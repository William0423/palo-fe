/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class BackendService {

  public interface Iface {

    public com.baidu.palo.thrift.TExecPlanFragmentResult exec_plan_fragment(com.baidu.palo.thrift.TExecPlanFragmentParams params) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TCancelPlanFragmentResult cancel_plan_fragment(com.baidu.palo.thrift.TCancelPlanFragmentParams params) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TTransmitDataResult transmit_data(com.baidu.palo.thrift.TTransmitDataParams params) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TFetchDataResult fetch_data(com.baidu.palo.thrift.TFetchDataParams params) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult submit_tasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult make_snapshot(com.baidu.palo.thrift.TSnapshotRequest snapshot_request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult release_snapshot(String snapshot_path) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult publish_cluster_state(com.baidu.palo.thrift.TAgentPublishRequest request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult submit_etl_task(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TMiniLoadEtlStatusResult get_etl_status(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TAgentResult delete_etl_files(com.baidu.palo.thrift.TDeleteEtlFilesRequest request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TStatus register_pull_load_task(com.baidu.palo.thrift.TUniqueId id, int num_senders) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TStatus deregister_pull_load_task(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TStatus report_pull_load_sub_task_info(TPullLoadSubTaskInfo task_info) throws org.apache.thrift.TException;

    public TFetchPullLoadTaskInfoResult fetch_pull_load_task_info(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException;

    public TFetchAllPullLoadTaskInfosResult fetch_all_pull_load_task_infos() throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TStatus submit_export_task(TExportTaskRequest request) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TExportStatusResult get_export_status(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException;

    public com.baidu.palo.thrift.TStatus erase_export_task(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void exec_plan_fragment(com.baidu.palo.thrift.TExecPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancel_plan_fragment(com.baidu.palo.thrift.TCancelPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transmit_data(com.baidu.palo.thrift.TTransmitDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetch_data(com.baidu.palo.thrift.TFetchDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submit_tasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void make_snapshot(com.baidu.palo.thrift.TSnapshotRequest snapshot_request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void release_snapshot(String snapshot_path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publish_cluster_state(com.baidu.palo.thrift.TAgentPublishRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submit_etl_task(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_etl_status(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delete_etl_files(com.baidu.palo.thrift.TDeleteEtlFilesRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void register_pull_load_task(com.baidu.palo.thrift.TUniqueId id, int num_senders, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deregister_pull_load_task(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void report_pull_load_sub_task_info(TPullLoadSubTaskInfo task_info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetch_pull_load_task_info(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetch_all_pull_load_task_infos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submit_export_task(TExportTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_export_status(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void erase_export_task(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.baidu.palo.thrift.TExecPlanFragmentResult exec_plan_fragment(com.baidu.palo.thrift.TExecPlanFragmentParams params) throws org.apache.thrift.TException
    {
      send_exec_plan_fragment(params);
      return recv_exec_plan_fragment();
    }

    public void send_exec_plan_fragment(com.baidu.palo.thrift.TExecPlanFragmentParams params) throws org.apache.thrift.TException
    {
      exec_plan_fragment_args args = new exec_plan_fragment_args();
      args.setParams(params);
      sendBase("exec_plan_fragment", args);
    }

    public com.baidu.palo.thrift.TExecPlanFragmentResult recv_exec_plan_fragment() throws org.apache.thrift.TException
    {
      exec_plan_fragment_result result = new exec_plan_fragment_result();
      receiveBase(result, "exec_plan_fragment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exec_plan_fragment failed: unknown result");
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentResult cancel_plan_fragment(com.baidu.palo.thrift.TCancelPlanFragmentParams params) throws org.apache.thrift.TException
    {
      send_cancel_plan_fragment(params);
      return recv_cancel_plan_fragment();
    }

    public void send_cancel_plan_fragment(com.baidu.palo.thrift.TCancelPlanFragmentParams params) throws org.apache.thrift.TException
    {
      cancel_plan_fragment_args args = new cancel_plan_fragment_args();
      args.setParams(params);
      sendBase("cancel_plan_fragment", args);
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentResult recv_cancel_plan_fragment() throws org.apache.thrift.TException
    {
      cancel_plan_fragment_result result = new cancel_plan_fragment_result();
      receiveBase(result, "cancel_plan_fragment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancel_plan_fragment failed: unknown result");
    }

    public com.baidu.palo.thrift.TTransmitDataResult transmit_data(com.baidu.palo.thrift.TTransmitDataParams params) throws org.apache.thrift.TException
    {
      send_transmit_data(params);
      return recv_transmit_data();
    }

    public void send_transmit_data(com.baidu.palo.thrift.TTransmitDataParams params) throws org.apache.thrift.TException
    {
      transmit_data_args args = new transmit_data_args();
      args.setParams(params);
      sendBase("transmit_data", args);
    }

    public com.baidu.palo.thrift.TTransmitDataResult recv_transmit_data() throws org.apache.thrift.TException
    {
      transmit_data_result result = new transmit_data_result();
      receiveBase(result, "transmit_data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transmit_data failed: unknown result");
    }

    public com.baidu.palo.thrift.TFetchDataResult fetch_data(com.baidu.palo.thrift.TFetchDataParams params) throws org.apache.thrift.TException
    {
      send_fetch_data(params);
      return recv_fetch_data();
    }

    public void send_fetch_data(com.baidu.palo.thrift.TFetchDataParams params) throws org.apache.thrift.TException
    {
      fetch_data_args args = new fetch_data_args();
      args.setParams(params);
      sendBase("fetch_data", args);
    }

    public com.baidu.palo.thrift.TFetchDataResult recv_fetch_data() throws org.apache.thrift.TException
    {
      fetch_data_result result = new fetch_data_result();
      receiveBase(result, "fetch_data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetch_data failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult submit_tasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks) throws org.apache.thrift.TException
    {
      send_submit_tasks(tasks);
      return recv_submit_tasks();
    }

    public void send_submit_tasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks) throws org.apache.thrift.TException
    {
      submit_tasks_args args = new submit_tasks_args();
      args.setTasks(tasks);
      sendBase("submit_tasks", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_submit_tasks() throws org.apache.thrift.TException
    {
      submit_tasks_result result = new submit_tasks_result();
      receiveBase(result, "submit_tasks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submit_tasks failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult make_snapshot(com.baidu.palo.thrift.TSnapshotRequest snapshot_request) throws org.apache.thrift.TException
    {
      send_make_snapshot(snapshot_request);
      return recv_make_snapshot();
    }

    public void send_make_snapshot(com.baidu.palo.thrift.TSnapshotRequest snapshot_request) throws org.apache.thrift.TException
    {
      make_snapshot_args args = new make_snapshot_args();
      args.setSnapshot_request(snapshot_request);
      sendBase("make_snapshot", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_make_snapshot() throws org.apache.thrift.TException
    {
      make_snapshot_result result = new make_snapshot_result();
      receiveBase(result, "make_snapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "make_snapshot failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult release_snapshot(String snapshot_path) throws org.apache.thrift.TException
    {
      send_release_snapshot(snapshot_path);
      return recv_release_snapshot();
    }

    public void send_release_snapshot(String snapshot_path) throws org.apache.thrift.TException
    {
      release_snapshot_args args = new release_snapshot_args();
      args.setSnapshot_path(snapshot_path);
      sendBase("release_snapshot", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_release_snapshot() throws org.apache.thrift.TException
    {
      release_snapshot_result result = new release_snapshot_result();
      receiveBase(result, "release_snapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "release_snapshot failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult publish_cluster_state(com.baidu.palo.thrift.TAgentPublishRequest request) throws org.apache.thrift.TException
    {
      send_publish_cluster_state(request);
      return recv_publish_cluster_state();
    }

    public void send_publish_cluster_state(com.baidu.palo.thrift.TAgentPublishRequest request) throws org.apache.thrift.TException
    {
      publish_cluster_state_args args = new publish_cluster_state_args();
      args.setRequest(request);
      sendBase("publish_cluster_state", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_publish_cluster_state() throws org.apache.thrift.TException
    {
      publish_cluster_state_result result = new publish_cluster_state_result();
      receiveBase(result, "publish_cluster_state");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publish_cluster_state failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult submit_etl_task(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request) throws org.apache.thrift.TException
    {
      send_submit_etl_task(request);
      return recv_submit_etl_task();
    }

    public void send_submit_etl_task(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request) throws org.apache.thrift.TException
    {
      submit_etl_task_args args = new submit_etl_task_args();
      args.setRequest(request);
      sendBase("submit_etl_task", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_submit_etl_task() throws org.apache.thrift.TException
    {
      submit_etl_task_result result = new submit_etl_task_result();
      receiveBase(result, "submit_etl_task");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submit_etl_task failed: unknown result");
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusResult get_etl_status(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request) throws org.apache.thrift.TException
    {
      send_get_etl_status(request);
      return recv_get_etl_status();
    }

    public void send_get_etl_status(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request) throws org.apache.thrift.TException
    {
      get_etl_status_args args = new get_etl_status_args();
      args.setRequest(request);
      sendBase("get_etl_status", args);
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusResult recv_get_etl_status() throws org.apache.thrift.TException
    {
      get_etl_status_result result = new get_etl_status_result();
      receiveBase(result, "get_etl_status");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_etl_status failed: unknown result");
    }

    public com.baidu.palo.thrift.TAgentResult delete_etl_files(com.baidu.palo.thrift.TDeleteEtlFilesRequest request) throws org.apache.thrift.TException
    {
      send_delete_etl_files(request);
      return recv_delete_etl_files();
    }

    public void send_delete_etl_files(com.baidu.palo.thrift.TDeleteEtlFilesRequest request) throws org.apache.thrift.TException
    {
      delete_etl_files_args args = new delete_etl_files_args();
      args.setRequest(request);
      sendBase("delete_etl_files", args);
    }

    public com.baidu.palo.thrift.TAgentResult recv_delete_etl_files() throws org.apache.thrift.TException
    {
      delete_etl_files_result result = new delete_etl_files_result();
      receiveBase(result, "delete_etl_files");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_etl_files failed: unknown result");
    }

    public com.baidu.palo.thrift.TStatus register_pull_load_task(com.baidu.palo.thrift.TUniqueId id, int num_senders) throws org.apache.thrift.TException
    {
      send_register_pull_load_task(id, num_senders);
      return recv_register_pull_load_task();
    }

    public void send_register_pull_load_task(com.baidu.palo.thrift.TUniqueId id, int num_senders) throws org.apache.thrift.TException
    {
      register_pull_load_task_args args = new register_pull_load_task_args();
      args.setId(id);
      args.setNum_senders(num_senders);
      sendBase("register_pull_load_task", args);
    }

    public com.baidu.palo.thrift.TStatus recv_register_pull_load_task() throws org.apache.thrift.TException
    {
      register_pull_load_task_result result = new register_pull_load_task_result();
      receiveBase(result, "register_pull_load_task");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "register_pull_load_task failed: unknown result");
    }

    public com.baidu.palo.thrift.TStatus deregister_pull_load_task(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException
    {
      send_deregister_pull_load_task(id);
      return recv_deregister_pull_load_task();
    }

    public void send_deregister_pull_load_task(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException
    {
      deregister_pull_load_task_args args = new deregister_pull_load_task_args();
      args.setId(id);
      sendBase("deregister_pull_load_task", args);
    }

    public com.baidu.palo.thrift.TStatus recv_deregister_pull_load_task() throws org.apache.thrift.TException
    {
      deregister_pull_load_task_result result = new deregister_pull_load_task_result();
      receiveBase(result, "deregister_pull_load_task");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deregister_pull_load_task failed: unknown result");
    }

    public com.baidu.palo.thrift.TStatus report_pull_load_sub_task_info(TPullLoadSubTaskInfo task_info) throws org.apache.thrift.TException
    {
      send_report_pull_load_sub_task_info(task_info);
      return recv_report_pull_load_sub_task_info();
    }

    public void send_report_pull_load_sub_task_info(TPullLoadSubTaskInfo task_info) throws org.apache.thrift.TException
    {
      report_pull_load_sub_task_info_args args = new report_pull_load_sub_task_info_args();
      args.setTask_info(task_info);
      sendBase("report_pull_load_sub_task_info", args);
    }

    public com.baidu.palo.thrift.TStatus recv_report_pull_load_sub_task_info() throws org.apache.thrift.TException
    {
      report_pull_load_sub_task_info_result result = new report_pull_load_sub_task_info_result();
      receiveBase(result, "report_pull_load_sub_task_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "report_pull_load_sub_task_info failed: unknown result");
    }

    public TFetchPullLoadTaskInfoResult fetch_pull_load_task_info(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException
    {
      send_fetch_pull_load_task_info(id);
      return recv_fetch_pull_load_task_info();
    }

    public void send_fetch_pull_load_task_info(com.baidu.palo.thrift.TUniqueId id) throws org.apache.thrift.TException
    {
      fetch_pull_load_task_info_args args = new fetch_pull_load_task_info_args();
      args.setId(id);
      sendBase("fetch_pull_load_task_info", args);
    }

    public TFetchPullLoadTaskInfoResult recv_fetch_pull_load_task_info() throws org.apache.thrift.TException
    {
      fetch_pull_load_task_info_result result = new fetch_pull_load_task_info_result();
      receiveBase(result, "fetch_pull_load_task_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetch_pull_load_task_info failed: unknown result");
    }

    public TFetchAllPullLoadTaskInfosResult fetch_all_pull_load_task_infos() throws org.apache.thrift.TException
    {
      send_fetch_all_pull_load_task_infos();
      return recv_fetch_all_pull_load_task_infos();
    }

    public void send_fetch_all_pull_load_task_infos() throws org.apache.thrift.TException
    {
      fetch_all_pull_load_task_infos_args args = new fetch_all_pull_load_task_infos_args();
      sendBase("fetch_all_pull_load_task_infos", args);
    }

    public TFetchAllPullLoadTaskInfosResult recv_fetch_all_pull_load_task_infos() throws org.apache.thrift.TException
    {
      fetch_all_pull_load_task_infos_result result = new fetch_all_pull_load_task_infos_result();
      receiveBase(result, "fetch_all_pull_load_task_infos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetch_all_pull_load_task_infos failed: unknown result");
    }

    public com.baidu.palo.thrift.TStatus submit_export_task(TExportTaskRequest request) throws org.apache.thrift.TException
    {
      send_submit_export_task(request);
      return recv_submit_export_task();
    }

    public void send_submit_export_task(TExportTaskRequest request) throws org.apache.thrift.TException
    {
      submit_export_task_args args = new submit_export_task_args();
      args.setRequest(request);
      sendBase("submit_export_task", args);
    }

    public com.baidu.palo.thrift.TStatus recv_submit_export_task() throws org.apache.thrift.TException
    {
      submit_export_task_result result = new submit_export_task_result();
      receiveBase(result, "submit_export_task");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submit_export_task failed: unknown result");
    }

    public com.baidu.palo.thrift.TExportStatusResult get_export_status(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException
    {
      send_get_export_status(task_id);
      return recv_get_export_status();
    }

    public void send_get_export_status(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException
    {
      get_export_status_args args = new get_export_status_args();
      args.setTask_id(task_id);
      sendBase("get_export_status", args);
    }

    public com.baidu.palo.thrift.TExportStatusResult recv_get_export_status() throws org.apache.thrift.TException
    {
      get_export_status_result result = new get_export_status_result();
      receiveBase(result, "get_export_status");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_export_status failed: unknown result");
    }

    public com.baidu.palo.thrift.TStatus erase_export_task(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException
    {
      send_erase_export_task(task_id);
      return recv_erase_export_task();
    }

    public void send_erase_export_task(com.baidu.palo.thrift.TUniqueId task_id) throws org.apache.thrift.TException
    {
      erase_export_task_args args = new erase_export_task_args();
      args.setTask_id(task_id);
      sendBase("erase_export_task", args);
    }

    public com.baidu.palo.thrift.TStatus recv_erase_export_task() throws org.apache.thrift.TException
    {
      erase_export_task_result result = new erase_export_task_result();
      receiveBase(result, "erase_export_task");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "erase_export_task failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void exec_plan_fragment(com.baidu.palo.thrift.TExecPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exec_plan_fragment_call method_call = new exec_plan_fragment_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exec_plan_fragment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TExecPlanFragmentParams params;
      public exec_plan_fragment_call(com.baidu.palo.thrift.TExecPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exec_plan_fragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exec_plan_fragment_args args = new exec_plan_fragment_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TExecPlanFragmentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exec_plan_fragment();
      }
    }

    public void cancel_plan_fragment(com.baidu.palo.thrift.TCancelPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancel_plan_fragment_call method_call = new cancel_plan_fragment_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancel_plan_fragment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TCancelPlanFragmentParams params;
      public cancel_plan_fragment_call(com.baidu.palo.thrift.TCancelPlanFragmentParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancel_plan_fragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancel_plan_fragment_args args = new cancel_plan_fragment_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TCancelPlanFragmentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancel_plan_fragment();
      }
    }

    public void transmit_data(com.baidu.palo.thrift.TTransmitDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transmit_data_call method_call = new transmit_data_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transmit_data_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TTransmitDataParams params;
      public transmit_data_call(com.baidu.palo.thrift.TTransmitDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transmit_data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transmit_data_args args = new transmit_data_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TTransmitDataResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transmit_data();
      }
    }

    public void fetch_data(com.baidu.palo.thrift.TFetchDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetch_data_call method_call = new fetch_data_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetch_data_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TFetchDataParams params;
      public fetch_data_call(com.baidu.palo.thrift.TFetchDataParams params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetch_data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetch_data_args args = new fetch_data_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TFetchDataResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetch_data();
      }
    }

    public void submit_tasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submit_tasks_call method_call = new submit_tasks_call(tasks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submit_tasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.baidu.palo.thrift.TAgentTaskRequest> tasks;
      public submit_tasks_call(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tasks = tasks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submit_tasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submit_tasks_args args = new submit_tasks_args();
        args.setTasks(tasks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submit_tasks();
      }
    }

    public void make_snapshot(com.baidu.palo.thrift.TSnapshotRequest snapshot_request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      make_snapshot_call method_call = new make_snapshot_call(snapshot_request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class make_snapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TSnapshotRequest snapshot_request;
      public make_snapshot_call(com.baidu.palo.thrift.TSnapshotRequest snapshot_request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snapshot_request = snapshot_request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("make_snapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        make_snapshot_args args = new make_snapshot_args();
        args.setSnapshot_request(snapshot_request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_make_snapshot();
      }
    }

    public void release_snapshot(String snapshot_path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      release_snapshot_call method_call = new release_snapshot_call(snapshot_path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class release_snapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String snapshot_path;
      public release_snapshot_call(String snapshot_path, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snapshot_path = snapshot_path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("release_snapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        release_snapshot_args args = new release_snapshot_args();
        args.setSnapshot_path(snapshot_path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_release_snapshot();
      }
    }

    public void publish_cluster_state(com.baidu.palo.thrift.TAgentPublishRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publish_cluster_state_call method_call = new publish_cluster_state_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publish_cluster_state_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TAgentPublishRequest request;
      public publish_cluster_state_call(com.baidu.palo.thrift.TAgentPublishRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publish_cluster_state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publish_cluster_state_args args = new publish_cluster_state_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_publish_cluster_state();
      }
    }

    public void submit_etl_task(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submit_etl_task_call method_call = new submit_etl_task_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submit_etl_task_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request;
      public submit_etl_task_call(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submit_etl_task", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submit_etl_task_args args = new submit_etl_task_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submit_etl_task();
      }
    }

    public void get_etl_status(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_etl_status_call method_call = new get_etl_status_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_etl_status_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request;
      public get_etl_status_call(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_etl_status", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_etl_status_args args = new get_etl_status_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TMiniLoadEtlStatusResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_etl_status();
      }
    }

    public void delete_etl_files(com.baidu.palo.thrift.TDeleteEtlFilesRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_etl_files_call method_call = new delete_etl_files_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_etl_files_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TDeleteEtlFilesRequest request;
      public delete_etl_files_call(com.baidu.palo.thrift.TDeleteEtlFilesRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_etl_files", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_etl_files_args args = new delete_etl_files_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TAgentResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_etl_files();
      }
    }

    public void register_pull_load_task(com.baidu.palo.thrift.TUniqueId id, int num_senders, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      register_pull_load_task_call method_call = new register_pull_load_task_call(id, num_senders, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class register_pull_load_task_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TUniqueId id;
      private int num_senders;
      public register_pull_load_task_call(com.baidu.palo.thrift.TUniqueId id, int num_senders, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.num_senders = num_senders;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("register_pull_load_task", org.apache.thrift.protocol.TMessageType.CALL, 0));
        register_pull_load_task_args args = new register_pull_load_task_args();
        args.setId(id);
        args.setNum_senders(num_senders);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_register_pull_load_task();
      }
    }

    public void deregister_pull_load_task(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deregister_pull_load_task_call method_call = new deregister_pull_load_task_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deregister_pull_load_task_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TUniqueId id;
      public deregister_pull_load_task_call(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deregister_pull_load_task", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deregister_pull_load_task_args args = new deregister_pull_load_task_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deregister_pull_load_task();
      }
    }

    public void report_pull_load_sub_task_info(TPullLoadSubTaskInfo task_info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      report_pull_load_sub_task_info_call method_call = new report_pull_load_sub_task_info_call(task_info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class report_pull_load_sub_task_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TPullLoadSubTaskInfo task_info;
      public report_pull_load_sub_task_info_call(TPullLoadSubTaskInfo task_info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_info = task_info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("report_pull_load_sub_task_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        report_pull_load_sub_task_info_args args = new report_pull_load_sub_task_info_args();
        args.setTask_info(task_info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_report_pull_load_sub_task_info();
      }
    }

    public void fetch_pull_load_task_info(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetch_pull_load_task_info_call method_call = new fetch_pull_load_task_info_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetch_pull_load_task_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TUniqueId id;
      public fetch_pull_load_task_info_call(com.baidu.palo.thrift.TUniqueId id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetch_pull_load_task_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetch_pull_load_task_info_args args = new fetch_pull_load_task_info_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFetchPullLoadTaskInfoResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetch_pull_load_task_info();
      }
    }

    public void fetch_all_pull_load_task_infos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetch_all_pull_load_task_infos_call method_call = new fetch_all_pull_load_task_infos_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetch_all_pull_load_task_infos_call extends org.apache.thrift.async.TAsyncMethodCall {
      public fetch_all_pull_load_task_infos_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetch_all_pull_load_task_infos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetch_all_pull_load_task_infos_args args = new fetch_all_pull_load_task_infos_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFetchAllPullLoadTaskInfosResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetch_all_pull_load_task_infos();
      }
    }

    public void submit_export_task(TExportTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submit_export_task_call method_call = new submit_export_task_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submit_export_task_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TExportTaskRequest request;
      public submit_export_task_call(TExportTaskRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submit_export_task", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submit_export_task_args args = new submit_export_task_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submit_export_task();
      }
    }

    public void get_export_status(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_export_status_call method_call = new get_export_status_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_export_status_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TUniqueId task_id;
      public get_export_status_call(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_export_status", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_export_status_args args = new get_export_status_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TExportStatusResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_export_status();
      }
    }

    public void erase_export_task(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      erase_export_task_call method_call = new erase_export_task_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class erase_export_task_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.baidu.palo.thrift.TUniqueId task_id;
      public erase_export_task_call(com.baidu.palo.thrift.TUniqueId task_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("erase_export_task", org.apache.thrift.protocol.TMessageType.CALL, 0));
        erase_export_task_args args = new erase_export_task_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.baidu.palo.thrift.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_erase_export_task();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("exec_plan_fragment", new exec_plan_fragment());
      processMap.put("cancel_plan_fragment", new cancel_plan_fragment());
      processMap.put("transmit_data", new transmit_data());
      processMap.put("fetch_data", new fetch_data());
      processMap.put("submit_tasks", new submit_tasks());
      processMap.put("make_snapshot", new make_snapshot());
      processMap.put("release_snapshot", new release_snapshot());
      processMap.put("publish_cluster_state", new publish_cluster_state());
      processMap.put("submit_etl_task", new submit_etl_task());
      processMap.put("get_etl_status", new get_etl_status());
      processMap.put("delete_etl_files", new delete_etl_files());
      processMap.put("register_pull_load_task", new register_pull_load_task());
      processMap.put("deregister_pull_load_task", new deregister_pull_load_task());
      processMap.put("report_pull_load_sub_task_info", new report_pull_load_sub_task_info());
      processMap.put("fetch_pull_load_task_info", new fetch_pull_load_task_info());
      processMap.put("fetch_all_pull_load_task_infos", new fetch_all_pull_load_task_infos());
      processMap.put("submit_export_task", new submit_export_task());
      processMap.put("get_export_status", new get_export_status());
      processMap.put("erase_export_task", new erase_export_task());
      return processMap;
    }

    public static class exec_plan_fragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exec_plan_fragment_args> {
      public exec_plan_fragment() {
        super("exec_plan_fragment");
      }

      public exec_plan_fragment_args getEmptyArgsInstance() {
        return new exec_plan_fragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exec_plan_fragment_result getResult(I iface, exec_plan_fragment_args args) throws org.apache.thrift.TException {
        exec_plan_fragment_result result = new exec_plan_fragment_result();
        result.success = iface.exec_plan_fragment(args.params);
        return result;
      }
    }

    public static class cancel_plan_fragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancel_plan_fragment_args> {
      public cancel_plan_fragment() {
        super("cancel_plan_fragment");
      }

      public cancel_plan_fragment_args getEmptyArgsInstance() {
        return new cancel_plan_fragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancel_plan_fragment_result getResult(I iface, cancel_plan_fragment_args args) throws org.apache.thrift.TException {
        cancel_plan_fragment_result result = new cancel_plan_fragment_result();
        result.success = iface.cancel_plan_fragment(args.params);
        return result;
      }
    }

    public static class transmit_data<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transmit_data_args> {
      public transmit_data() {
        super("transmit_data");
      }

      public transmit_data_args getEmptyArgsInstance() {
        return new transmit_data_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transmit_data_result getResult(I iface, transmit_data_args args) throws org.apache.thrift.TException {
        transmit_data_result result = new transmit_data_result();
        result.success = iface.transmit_data(args.params);
        return result;
      }
    }

    public static class fetch_data<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_data_args> {
      public fetch_data() {
        super("fetch_data");
      }

      public fetch_data_args getEmptyArgsInstance() {
        return new fetch_data_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetch_data_result getResult(I iface, fetch_data_args args) throws org.apache.thrift.TException {
        fetch_data_result result = new fetch_data_result();
        result.success = iface.fetch_data(args.params);
        return result;
      }
    }

    public static class submit_tasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submit_tasks_args> {
      public submit_tasks() {
        super("submit_tasks");
      }

      public submit_tasks_args getEmptyArgsInstance() {
        return new submit_tasks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submit_tasks_result getResult(I iface, submit_tasks_args args) throws org.apache.thrift.TException {
        submit_tasks_result result = new submit_tasks_result();
        result.success = iface.submit_tasks(args.tasks);
        return result;
      }
    }

    public static class make_snapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, make_snapshot_args> {
      public make_snapshot() {
        super("make_snapshot");
      }

      public make_snapshot_args getEmptyArgsInstance() {
        return new make_snapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public make_snapshot_result getResult(I iface, make_snapshot_args args) throws org.apache.thrift.TException {
        make_snapshot_result result = new make_snapshot_result();
        result.success = iface.make_snapshot(args.snapshot_request);
        return result;
      }
    }

    public static class release_snapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, release_snapshot_args> {
      public release_snapshot() {
        super("release_snapshot");
      }

      public release_snapshot_args getEmptyArgsInstance() {
        return new release_snapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public release_snapshot_result getResult(I iface, release_snapshot_args args) throws org.apache.thrift.TException {
        release_snapshot_result result = new release_snapshot_result();
        result.success = iface.release_snapshot(args.snapshot_path);
        return result;
      }
    }

    public static class publish_cluster_state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publish_cluster_state_args> {
      public publish_cluster_state() {
        super("publish_cluster_state");
      }

      public publish_cluster_state_args getEmptyArgsInstance() {
        return new publish_cluster_state_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publish_cluster_state_result getResult(I iface, publish_cluster_state_args args) throws org.apache.thrift.TException {
        publish_cluster_state_result result = new publish_cluster_state_result();
        result.success = iface.publish_cluster_state(args.request);
        return result;
      }
    }

    public static class submit_etl_task<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submit_etl_task_args> {
      public submit_etl_task() {
        super("submit_etl_task");
      }

      public submit_etl_task_args getEmptyArgsInstance() {
        return new submit_etl_task_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submit_etl_task_result getResult(I iface, submit_etl_task_args args) throws org.apache.thrift.TException {
        submit_etl_task_result result = new submit_etl_task_result();
        result.success = iface.submit_etl_task(args.request);
        return result;
      }
    }

    public static class get_etl_status<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_etl_status_args> {
      public get_etl_status() {
        super("get_etl_status");
      }

      public get_etl_status_args getEmptyArgsInstance() {
        return new get_etl_status_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_etl_status_result getResult(I iface, get_etl_status_args args) throws org.apache.thrift.TException {
        get_etl_status_result result = new get_etl_status_result();
        result.success = iface.get_etl_status(args.request);
        return result;
      }
    }

    public static class delete_etl_files<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_etl_files_args> {
      public delete_etl_files() {
        super("delete_etl_files");
      }

      public delete_etl_files_args getEmptyArgsInstance() {
        return new delete_etl_files_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delete_etl_files_result getResult(I iface, delete_etl_files_args args) throws org.apache.thrift.TException {
        delete_etl_files_result result = new delete_etl_files_result();
        result.success = iface.delete_etl_files(args.request);
        return result;
      }
    }

    public static class register_pull_load_task<I extends Iface> extends org.apache.thrift.ProcessFunction<I, register_pull_load_task_args> {
      public register_pull_load_task() {
        super("register_pull_load_task");
      }

      public register_pull_load_task_args getEmptyArgsInstance() {
        return new register_pull_load_task_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public register_pull_load_task_result getResult(I iface, register_pull_load_task_args args) throws org.apache.thrift.TException {
        register_pull_load_task_result result = new register_pull_load_task_result();
        result.success = iface.register_pull_load_task(args.id, args.num_senders);
        return result;
      }
    }

    public static class deregister_pull_load_task<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deregister_pull_load_task_args> {
      public deregister_pull_load_task() {
        super("deregister_pull_load_task");
      }

      public deregister_pull_load_task_args getEmptyArgsInstance() {
        return new deregister_pull_load_task_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deregister_pull_load_task_result getResult(I iface, deregister_pull_load_task_args args) throws org.apache.thrift.TException {
        deregister_pull_load_task_result result = new deregister_pull_load_task_result();
        result.success = iface.deregister_pull_load_task(args.id);
        return result;
      }
    }

    public static class report_pull_load_sub_task_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, report_pull_load_sub_task_info_args> {
      public report_pull_load_sub_task_info() {
        super("report_pull_load_sub_task_info");
      }

      public report_pull_load_sub_task_info_args getEmptyArgsInstance() {
        return new report_pull_load_sub_task_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public report_pull_load_sub_task_info_result getResult(I iface, report_pull_load_sub_task_info_args args) throws org.apache.thrift.TException {
        report_pull_load_sub_task_info_result result = new report_pull_load_sub_task_info_result();
        result.success = iface.report_pull_load_sub_task_info(args.task_info);
        return result;
      }
    }

    public static class fetch_pull_load_task_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_pull_load_task_info_args> {
      public fetch_pull_load_task_info() {
        super("fetch_pull_load_task_info");
      }

      public fetch_pull_load_task_info_args getEmptyArgsInstance() {
        return new fetch_pull_load_task_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetch_pull_load_task_info_result getResult(I iface, fetch_pull_load_task_info_args args) throws org.apache.thrift.TException {
        fetch_pull_load_task_info_result result = new fetch_pull_load_task_info_result();
        result.success = iface.fetch_pull_load_task_info(args.id);
        return result;
      }
    }

    public static class fetch_all_pull_load_task_infos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_all_pull_load_task_infos_args> {
      public fetch_all_pull_load_task_infos() {
        super("fetch_all_pull_load_task_infos");
      }

      public fetch_all_pull_load_task_infos_args getEmptyArgsInstance() {
        return new fetch_all_pull_load_task_infos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetch_all_pull_load_task_infos_result getResult(I iface, fetch_all_pull_load_task_infos_args args) throws org.apache.thrift.TException {
        fetch_all_pull_load_task_infos_result result = new fetch_all_pull_load_task_infos_result();
        result.success = iface.fetch_all_pull_load_task_infos();
        return result;
      }
    }

    public static class submit_export_task<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submit_export_task_args> {
      public submit_export_task() {
        super("submit_export_task");
      }

      public submit_export_task_args getEmptyArgsInstance() {
        return new submit_export_task_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submit_export_task_result getResult(I iface, submit_export_task_args args) throws org.apache.thrift.TException {
        submit_export_task_result result = new submit_export_task_result();
        result.success = iface.submit_export_task(args.request);
        return result;
      }
    }

    public static class get_export_status<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_export_status_args> {
      public get_export_status() {
        super("get_export_status");
      }

      public get_export_status_args getEmptyArgsInstance() {
        return new get_export_status_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_export_status_result getResult(I iface, get_export_status_args args) throws org.apache.thrift.TException {
        get_export_status_result result = new get_export_status_result();
        result.success = iface.get_export_status(args.task_id);
        return result;
      }
    }

    public static class erase_export_task<I extends Iface> extends org.apache.thrift.ProcessFunction<I, erase_export_task_args> {
      public erase_export_task() {
        super("erase_export_task");
      }

      public erase_export_task_args getEmptyArgsInstance() {
        return new erase_export_task_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public erase_export_task_result getResult(I iface, erase_export_task_args args) throws org.apache.thrift.TException {
        erase_export_task_result result = new erase_export_task_result();
        result.success = iface.erase_export_task(args.task_id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("exec_plan_fragment", new exec_plan_fragment());
      processMap.put("cancel_plan_fragment", new cancel_plan_fragment());
      processMap.put("transmit_data", new transmit_data());
      processMap.put("fetch_data", new fetch_data());
      processMap.put("submit_tasks", new submit_tasks());
      processMap.put("make_snapshot", new make_snapshot());
      processMap.put("release_snapshot", new release_snapshot());
      processMap.put("publish_cluster_state", new publish_cluster_state());
      processMap.put("submit_etl_task", new submit_etl_task());
      processMap.put("get_etl_status", new get_etl_status());
      processMap.put("delete_etl_files", new delete_etl_files());
      processMap.put("register_pull_load_task", new register_pull_load_task());
      processMap.put("deregister_pull_load_task", new deregister_pull_load_task());
      processMap.put("report_pull_load_sub_task_info", new report_pull_load_sub_task_info());
      processMap.put("fetch_pull_load_task_info", new fetch_pull_load_task_info());
      processMap.put("fetch_all_pull_load_task_infos", new fetch_all_pull_load_task_infos());
      processMap.put("submit_export_task", new submit_export_task());
      processMap.put("get_export_status", new get_export_status());
      processMap.put("erase_export_task", new erase_export_task());
      return processMap;
    }

    public static class exec_plan_fragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exec_plan_fragment_args, com.baidu.palo.thrift.TExecPlanFragmentResult> {
      public exec_plan_fragment() {
        super("exec_plan_fragment");
      }

      public exec_plan_fragment_args getEmptyArgsInstance() {
        return new exec_plan_fragment_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TExecPlanFragmentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TExecPlanFragmentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TExecPlanFragmentResult o) {
            exec_plan_fragment_result result = new exec_plan_fragment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exec_plan_fragment_result result = new exec_plan_fragment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exec_plan_fragment_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TExecPlanFragmentResult> resultHandler) throws TException {
        iface.exec_plan_fragment(args.params,resultHandler);
      }
    }

    public static class cancel_plan_fragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancel_plan_fragment_args, com.baidu.palo.thrift.TCancelPlanFragmentResult> {
      public cancel_plan_fragment() {
        super("cancel_plan_fragment");
      }

      public cancel_plan_fragment_args getEmptyArgsInstance() {
        return new cancel_plan_fragment_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TCancelPlanFragmentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TCancelPlanFragmentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TCancelPlanFragmentResult o) {
            cancel_plan_fragment_result result = new cancel_plan_fragment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancel_plan_fragment_result result = new cancel_plan_fragment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancel_plan_fragment_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TCancelPlanFragmentResult> resultHandler) throws TException {
        iface.cancel_plan_fragment(args.params,resultHandler);
      }
    }

    public static class transmit_data<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transmit_data_args, com.baidu.palo.thrift.TTransmitDataResult> {
      public transmit_data() {
        super("transmit_data");
      }

      public transmit_data_args getEmptyArgsInstance() {
        return new transmit_data_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TTransmitDataResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TTransmitDataResult>() { 
          public void onComplete(com.baidu.palo.thrift.TTransmitDataResult o) {
            transmit_data_result result = new transmit_data_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transmit_data_result result = new transmit_data_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transmit_data_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TTransmitDataResult> resultHandler) throws TException {
        iface.transmit_data(args.params,resultHandler);
      }
    }

    public static class fetch_data<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetch_data_args, com.baidu.palo.thrift.TFetchDataResult> {
      public fetch_data() {
        super("fetch_data");
      }

      public fetch_data_args getEmptyArgsInstance() {
        return new fetch_data_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TFetchDataResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TFetchDataResult>() { 
          public void onComplete(com.baidu.palo.thrift.TFetchDataResult o) {
            fetch_data_result result = new fetch_data_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetch_data_result result = new fetch_data_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetch_data_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TFetchDataResult> resultHandler) throws TException {
        iface.fetch_data(args.params,resultHandler);
      }
    }

    public static class submit_tasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submit_tasks_args, com.baidu.palo.thrift.TAgentResult> {
      public submit_tasks() {
        super("submit_tasks");
      }

      public submit_tasks_args getEmptyArgsInstance() {
        return new submit_tasks_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            submit_tasks_result result = new submit_tasks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submit_tasks_result result = new submit_tasks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submit_tasks_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.submit_tasks(args.tasks,resultHandler);
      }
    }

    public static class make_snapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, make_snapshot_args, com.baidu.palo.thrift.TAgentResult> {
      public make_snapshot() {
        super("make_snapshot");
      }

      public make_snapshot_args getEmptyArgsInstance() {
        return new make_snapshot_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            make_snapshot_result result = new make_snapshot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            make_snapshot_result result = new make_snapshot_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, make_snapshot_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.make_snapshot(args.snapshot_request,resultHandler);
      }
    }

    public static class release_snapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, release_snapshot_args, com.baidu.palo.thrift.TAgentResult> {
      public release_snapshot() {
        super("release_snapshot");
      }

      public release_snapshot_args getEmptyArgsInstance() {
        return new release_snapshot_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            release_snapshot_result result = new release_snapshot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            release_snapshot_result result = new release_snapshot_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, release_snapshot_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.release_snapshot(args.snapshot_path,resultHandler);
      }
    }

    public static class publish_cluster_state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publish_cluster_state_args, com.baidu.palo.thrift.TAgentResult> {
      public publish_cluster_state() {
        super("publish_cluster_state");
      }

      public publish_cluster_state_args getEmptyArgsInstance() {
        return new publish_cluster_state_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            publish_cluster_state_result result = new publish_cluster_state_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            publish_cluster_state_result result = new publish_cluster_state_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, publish_cluster_state_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.publish_cluster_state(args.request,resultHandler);
      }
    }

    public static class submit_etl_task<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submit_etl_task_args, com.baidu.palo.thrift.TAgentResult> {
      public submit_etl_task() {
        super("submit_etl_task");
      }

      public submit_etl_task_args getEmptyArgsInstance() {
        return new submit_etl_task_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            submit_etl_task_result result = new submit_etl_task_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submit_etl_task_result result = new submit_etl_task_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submit_etl_task_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.submit_etl_task(args.request,resultHandler);
      }
    }

    public static class get_etl_status<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_etl_status_args, com.baidu.palo.thrift.TMiniLoadEtlStatusResult> {
      public get_etl_status() {
        super("get_etl_status");
      }

      public get_etl_status_args getEmptyArgsInstance() {
        return new get_etl_status_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TMiniLoadEtlStatusResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TMiniLoadEtlStatusResult>() { 
          public void onComplete(com.baidu.palo.thrift.TMiniLoadEtlStatusResult o) {
            get_etl_status_result result = new get_etl_status_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_etl_status_result result = new get_etl_status_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_etl_status_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TMiniLoadEtlStatusResult> resultHandler) throws TException {
        iface.get_etl_status(args.request,resultHandler);
      }
    }

    public static class delete_etl_files<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_etl_files_args, com.baidu.palo.thrift.TAgentResult> {
      public delete_etl_files() {
        super("delete_etl_files");
      }

      public delete_etl_files_args getEmptyArgsInstance() {
        return new delete_etl_files_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult>() { 
          public void onComplete(com.baidu.palo.thrift.TAgentResult o) {
            delete_etl_files_result result = new delete_etl_files_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delete_etl_files_result result = new delete_etl_files_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_etl_files_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TAgentResult> resultHandler) throws TException {
        iface.delete_etl_files(args.request,resultHandler);
      }
    }

    public static class register_pull_load_task<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, register_pull_load_task_args, com.baidu.palo.thrift.TStatus> {
      public register_pull_load_task() {
        super("register_pull_load_task");
      }

      public register_pull_load_task_args getEmptyArgsInstance() {
        return new register_pull_load_task_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TStatus>() { 
          public void onComplete(com.baidu.palo.thrift.TStatus o) {
            register_pull_load_task_result result = new register_pull_load_task_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            register_pull_load_task_result result = new register_pull_load_task_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, register_pull_load_task_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TStatus> resultHandler) throws TException {
        iface.register_pull_load_task(args.id, args.num_senders,resultHandler);
      }
    }

    public static class deregister_pull_load_task<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deregister_pull_load_task_args, com.baidu.palo.thrift.TStatus> {
      public deregister_pull_load_task() {
        super("deregister_pull_load_task");
      }

      public deregister_pull_load_task_args getEmptyArgsInstance() {
        return new deregister_pull_load_task_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TStatus>() { 
          public void onComplete(com.baidu.palo.thrift.TStatus o) {
            deregister_pull_load_task_result result = new deregister_pull_load_task_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deregister_pull_load_task_result result = new deregister_pull_load_task_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deregister_pull_load_task_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TStatus> resultHandler) throws TException {
        iface.deregister_pull_load_task(args.id,resultHandler);
      }
    }

    public static class report_pull_load_sub_task_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, report_pull_load_sub_task_info_args, com.baidu.palo.thrift.TStatus> {
      public report_pull_load_sub_task_info() {
        super("report_pull_load_sub_task_info");
      }

      public report_pull_load_sub_task_info_args getEmptyArgsInstance() {
        return new report_pull_load_sub_task_info_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TStatus>() { 
          public void onComplete(com.baidu.palo.thrift.TStatus o) {
            report_pull_load_sub_task_info_result result = new report_pull_load_sub_task_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            report_pull_load_sub_task_info_result result = new report_pull_load_sub_task_info_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, report_pull_load_sub_task_info_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TStatus> resultHandler) throws TException {
        iface.report_pull_load_sub_task_info(args.task_info,resultHandler);
      }
    }

    public static class fetch_pull_load_task_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetch_pull_load_task_info_args, TFetchPullLoadTaskInfoResult> {
      public fetch_pull_load_task_info() {
        super("fetch_pull_load_task_info");
      }

      public fetch_pull_load_task_info_args getEmptyArgsInstance() {
        return new fetch_pull_load_task_info_args();
      }

      public AsyncMethodCallback<TFetchPullLoadTaskInfoResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TFetchPullLoadTaskInfoResult>() { 
          public void onComplete(TFetchPullLoadTaskInfoResult o) {
            fetch_pull_load_task_info_result result = new fetch_pull_load_task_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetch_pull_load_task_info_result result = new fetch_pull_load_task_info_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetch_pull_load_task_info_args args, org.apache.thrift.async.AsyncMethodCallback<TFetchPullLoadTaskInfoResult> resultHandler) throws TException {
        iface.fetch_pull_load_task_info(args.id,resultHandler);
      }
    }

    public static class fetch_all_pull_load_task_infos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetch_all_pull_load_task_infos_args, TFetchAllPullLoadTaskInfosResult> {
      public fetch_all_pull_load_task_infos() {
        super("fetch_all_pull_load_task_infos");
      }

      public fetch_all_pull_load_task_infos_args getEmptyArgsInstance() {
        return new fetch_all_pull_load_task_infos_args();
      }

      public AsyncMethodCallback<TFetchAllPullLoadTaskInfosResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TFetchAllPullLoadTaskInfosResult>() { 
          public void onComplete(TFetchAllPullLoadTaskInfosResult o) {
            fetch_all_pull_load_task_infos_result result = new fetch_all_pull_load_task_infos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetch_all_pull_load_task_infos_result result = new fetch_all_pull_load_task_infos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetch_all_pull_load_task_infos_args args, org.apache.thrift.async.AsyncMethodCallback<TFetchAllPullLoadTaskInfosResult> resultHandler) throws TException {
        iface.fetch_all_pull_load_task_infos(resultHandler);
      }
    }

    public static class submit_export_task<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submit_export_task_args, com.baidu.palo.thrift.TStatus> {
      public submit_export_task() {
        super("submit_export_task");
      }

      public submit_export_task_args getEmptyArgsInstance() {
        return new submit_export_task_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TStatus>() { 
          public void onComplete(com.baidu.palo.thrift.TStatus o) {
            submit_export_task_result result = new submit_export_task_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submit_export_task_result result = new submit_export_task_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submit_export_task_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TStatus> resultHandler) throws TException {
        iface.submit_export_task(args.request,resultHandler);
      }
    }

    public static class get_export_status<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_export_status_args, com.baidu.palo.thrift.TExportStatusResult> {
      public get_export_status() {
        super("get_export_status");
      }

      public get_export_status_args getEmptyArgsInstance() {
        return new get_export_status_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TExportStatusResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TExportStatusResult>() { 
          public void onComplete(com.baidu.palo.thrift.TExportStatusResult o) {
            get_export_status_result result = new get_export_status_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_export_status_result result = new get_export_status_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_export_status_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TExportStatusResult> resultHandler) throws TException {
        iface.get_export_status(args.task_id,resultHandler);
      }
    }

    public static class erase_export_task<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, erase_export_task_args, com.baidu.palo.thrift.TStatus> {
      public erase_export_task() {
        super("erase_export_task");
      }

      public erase_export_task_args getEmptyArgsInstance() {
        return new erase_export_task_args();
      }

      public AsyncMethodCallback<com.baidu.palo.thrift.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.baidu.palo.thrift.TStatus>() { 
          public void onComplete(com.baidu.palo.thrift.TStatus o) {
            erase_export_task_result result = new erase_export_task_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            erase_export_task_result result = new erase_export_task_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, erase_export_task_args args, org.apache.thrift.async.AsyncMethodCallback<com.baidu.palo.thrift.TStatus> resultHandler) throws TException {
        iface.erase_export_task(args.task_id,resultHandler);
      }
    }

  }

  public static class exec_plan_fragment_args implements org.apache.thrift.TBase<exec_plan_fragment_args, exec_plan_fragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<exec_plan_fragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_plan_fragment_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_plan_fragment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_plan_fragment_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TExecPlanFragmentParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExecPlanFragmentParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_plan_fragment_args.class, metaDataMap);
    }

    public exec_plan_fragment_args() {
    }

    public exec_plan_fragment_args(
      com.baidu.palo.thrift.TExecPlanFragmentParams params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_plan_fragment_args(exec_plan_fragment_args other) {
      if (other.isSetParams()) {
        this.params = new com.baidu.palo.thrift.TExecPlanFragmentParams(other.params);
      }
    }

    public exec_plan_fragment_args deepCopy() {
      return new exec_plan_fragment_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public com.baidu.palo.thrift.TExecPlanFragmentParams getParams() {
      return this.params;
    }

    public exec_plan_fragment_args setParams(com.baidu.palo.thrift.TExecPlanFragmentParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.baidu.palo.thrift.TExecPlanFragmentParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_plan_fragment_args)
        return this.equals((exec_plan_fragment_args)that);
      return false;
    }

    public boolean equals(exec_plan_fragment_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_plan_fragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_plan_fragment_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_plan_fragment_argsStandardSchemeFactory implements SchemeFactory {
      public exec_plan_fragment_argsStandardScheme getScheme() {
        return new exec_plan_fragment_argsStandardScheme();
      }
    }

    private static class exec_plan_fragment_argsStandardScheme extends StandardScheme<exec_plan_fragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_plan_fragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.baidu.palo.thrift.TExecPlanFragmentParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_plan_fragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_plan_fragment_argsTupleSchemeFactory implements SchemeFactory {
      public exec_plan_fragment_argsTupleScheme getScheme() {
        return new exec_plan_fragment_argsTupleScheme();
      }
    }

    private static class exec_plan_fragment_argsTupleScheme extends TupleScheme<exec_plan_fragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_plan_fragment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_plan_fragment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new com.baidu.palo.thrift.TExecPlanFragmentParams();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class exec_plan_fragment_result implements org.apache.thrift.TBase<exec_plan_fragment_result, exec_plan_fragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<exec_plan_fragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exec_plan_fragment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exec_plan_fragment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exec_plan_fragment_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TExecPlanFragmentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExecPlanFragmentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exec_plan_fragment_result.class, metaDataMap);
    }

    public exec_plan_fragment_result() {
    }

    public exec_plan_fragment_result(
      com.baidu.palo.thrift.TExecPlanFragmentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exec_plan_fragment_result(exec_plan_fragment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TExecPlanFragmentResult(other.success);
      }
    }

    public exec_plan_fragment_result deepCopy() {
      return new exec_plan_fragment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TExecPlanFragmentResult getSuccess() {
      return this.success;
    }

    public exec_plan_fragment_result setSuccess(com.baidu.palo.thrift.TExecPlanFragmentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TExecPlanFragmentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exec_plan_fragment_result)
        return this.equals((exec_plan_fragment_result)that);
      return false;
    }

    public boolean equals(exec_plan_fragment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exec_plan_fragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exec_plan_fragment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exec_plan_fragment_resultStandardSchemeFactory implements SchemeFactory {
      public exec_plan_fragment_resultStandardScheme getScheme() {
        return new exec_plan_fragment_resultStandardScheme();
      }
    }

    private static class exec_plan_fragment_resultStandardScheme extends StandardScheme<exec_plan_fragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exec_plan_fragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TExecPlanFragmentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exec_plan_fragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exec_plan_fragment_resultTupleSchemeFactory implements SchemeFactory {
      public exec_plan_fragment_resultTupleScheme getScheme() {
        return new exec_plan_fragment_resultTupleScheme();
      }
    }

    private static class exec_plan_fragment_resultTupleScheme extends TupleScheme<exec_plan_fragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exec_plan_fragment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exec_plan_fragment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TExecPlanFragmentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancel_plan_fragment_args implements org.apache.thrift.TBase<cancel_plan_fragment_args, cancel_plan_fragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancel_plan_fragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_plan_fragment_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancel_plan_fragment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancel_plan_fragment_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TCancelPlanFragmentParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_plan_fragment_args.class, metaDataMap);
    }

    public cancel_plan_fragment_args() {
    }

    public cancel_plan_fragment_args(
      com.baidu.palo.thrift.TCancelPlanFragmentParams params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_plan_fragment_args(cancel_plan_fragment_args other) {
      if (other.isSetParams()) {
        this.params = new com.baidu.palo.thrift.TCancelPlanFragmentParams(other.params);
      }
    }

    public cancel_plan_fragment_args deepCopy() {
      return new cancel_plan_fragment_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentParams getParams() {
      return this.params;
    }

    public cancel_plan_fragment_args setParams(com.baidu.palo.thrift.TCancelPlanFragmentParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.baidu.palo.thrift.TCancelPlanFragmentParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_plan_fragment_args)
        return this.equals((cancel_plan_fragment_args)that);
      return false;
    }

    public boolean equals(cancel_plan_fragment_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancel_plan_fragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_plan_fragment_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancel_plan_fragment_argsStandardSchemeFactory implements SchemeFactory {
      public cancel_plan_fragment_argsStandardScheme getScheme() {
        return new cancel_plan_fragment_argsStandardScheme();
      }
    }

    private static class cancel_plan_fragment_argsStandardScheme extends StandardScheme<cancel_plan_fragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_plan_fragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.baidu.palo.thrift.TCancelPlanFragmentParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_plan_fragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancel_plan_fragment_argsTupleSchemeFactory implements SchemeFactory {
      public cancel_plan_fragment_argsTupleScheme getScheme() {
        return new cancel_plan_fragment_argsTupleScheme();
      }
    }

    private static class cancel_plan_fragment_argsTupleScheme extends TupleScheme<cancel_plan_fragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_plan_fragment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_plan_fragment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new com.baidu.palo.thrift.TCancelPlanFragmentParams();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class cancel_plan_fragment_result implements org.apache.thrift.TBase<cancel_plan_fragment_result, cancel_plan_fragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancel_plan_fragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_plan_fragment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancel_plan_fragment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancel_plan_fragment_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TCancelPlanFragmentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_plan_fragment_result.class, metaDataMap);
    }

    public cancel_plan_fragment_result() {
    }

    public cancel_plan_fragment_result(
      com.baidu.palo.thrift.TCancelPlanFragmentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_plan_fragment_result(cancel_plan_fragment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TCancelPlanFragmentResult(other.success);
      }
    }

    public cancel_plan_fragment_result deepCopy() {
      return new cancel_plan_fragment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TCancelPlanFragmentResult getSuccess() {
      return this.success;
    }

    public cancel_plan_fragment_result setSuccess(com.baidu.palo.thrift.TCancelPlanFragmentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TCancelPlanFragmentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_plan_fragment_result)
        return this.equals((cancel_plan_fragment_result)that);
      return false;
    }

    public boolean equals(cancel_plan_fragment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancel_plan_fragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_plan_fragment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancel_plan_fragment_resultStandardSchemeFactory implements SchemeFactory {
      public cancel_plan_fragment_resultStandardScheme getScheme() {
        return new cancel_plan_fragment_resultStandardScheme();
      }
    }

    private static class cancel_plan_fragment_resultStandardScheme extends StandardScheme<cancel_plan_fragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_plan_fragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TCancelPlanFragmentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_plan_fragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancel_plan_fragment_resultTupleSchemeFactory implements SchemeFactory {
      public cancel_plan_fragment_resultTupleScheme getScheme() {
        return new cancel_plan_fragment_resultTupleScheme();
      }
    }

    private static class cancel_plan_fragment_resultTupleScheme extends TupleScheme<cancel_plan_fragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_plan_fragment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_plan_fragment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TCancelPlanFragmentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class transmit_data_args implements org.apache.thrift.TBase<transmit_data_args, transmit_data_args._Fields>, java.io.Serializable, Cloneable, Comparable<transmit_data_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transmit_data_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transmit_data_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transmit_data_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TTransmitDataParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TTransmitDataParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transmit_data_args.class, metaDataMap);
    }

    public transmit_data_args() {
    }

    public transmit_data_args(
      com.baidu.palo.thrift.TTransmitDataParams params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transmit_data_args(transmit_data_args other) {
      if (other.isSetParams()) {
        this.params = new com.baidu.palo.thrift.TTransmitDataParams(other.params);
      }
    }

    public transmit_data_args deepCopy() {
      return new transmit_data_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public com.baidu.palo.thrift.TTransmitDataParams getParams() {
      return this.params;
    }

    public transmit_data_args setParams(com.baidu.palo.thrift.TTransmitDataParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.baidu.palo.thrift.TTransmitDataParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transmit_data_args)
        return this.equals((transmit_data_args)that);
      return false;
    }

    public boolean equals(transmit_data_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(transmit_data_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transmit_data_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transmit_data_argsStandardSchemeFactory implements SchemeFactory {
      public transmit_data_argsStandardScheme getScheme() {
        return new transmit_data_argsStandardScheme();
      }
    }

    private static class transmit_data_argsStandardScheme extends StandardScheme<transmit_data_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transmit_data_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.baidu.palo.thrift.TTransmitDataParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transmit_data_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transmit_data_argsTupleSchemeFactory implements SchemeFactory {
      public transmit_data_argsTupleScheme getScheme() {
        return new transmit_data_argsTupleScheme();
      }
    }

    private static class transmit_data_argsTupleScheme extends TupleScheme<transmit_data_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transmit_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transmit_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new com.baidu.palo.thrift.TTransmitDataParams();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class transmit_data_result implements org.apache.thrift.TBase<transmit_data_result, transmit_data_result._Fields>, java.io.Serializable, Cloneable, Comparable<transmit_data_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transmit_data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transmit_data_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transmit_data_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TTransmitDataResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TTransmitDataResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transmit_data_result.class, metaDataMap);
    }

    public transmit_data_result() {
    }

    public transmit_data_result(
      com.baidu.palo.thrift.TTransmitDataResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transmit_data_result(transmit_data_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TTransmitDataResult(other.success);
      }
    }

    public transmit_data_result deepCopy() {
      return new transmit_data_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TTransmitDataResult getSuccess() {
      return this.success;
    }

    public transmit_data_result setSuccess(com.baidu.palo.thrift.TTransmitDataResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TTransmitDataResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transmit_data_result)
        return this.equals((transmit_data_result)that);
      return false;
    }

    public boolean equals(transmit_data_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(transmit_data_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transmit_data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transmit_data_resultStandardSchemeFactory implements SchemeFactory {
      public transmit_data_resultStandardScheme getScheme() {
        return new transmit_data_resultStandardScheme();
      }
    }

    private static class transmit_data_resultStandardScheme extends StandardScheme<transmit_data_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transmit_data_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TTransmitDataResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transmit_data_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transmit_data_resultTupleSchemeFactory implements SchemeFactory {
      public transmit_data_resultTupleScheme getScheme() {
        return new transmit_data_resultTupleScheme();
      }
    }

    private static class transmit_data_resultTupleScheme extends TupleScheme<transmit_data_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transmit_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transmit_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TTransmitDataResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fetch_data_args implements org.apache.thrift.TBase<fetch_data_args, fetch_data_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_data_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_data_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_data_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_data_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TFetchDataParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TFetchDataParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_data_args.class, metaDataMap);
    }

    public fetch_data_args() {
    }

    public fetch_data_args(
      com.baidu.palo.thrift.TFetchDataParams params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_data_args(fetch_data_args other) {
      if (other.isSetParams()) {
        this.params = new com.baidu.palo.thrift.TFetchDataParams(other.params);
      }
    }

    public fetch_data_args deepCopy() {
      return new fetch_data_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public com.baidu.palo.thrift.TFetchDataParams getParams() {
      return this.params;
    }

    public fetch_data_args setParams(com.baidu.palo.thrift.TFetchDataParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.baidu.palo.thrift.TFetchDataParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_data_args)
        return this.equals((fetch_data_args)that);
      return false;
    }

    public boolean equals(fetch_data_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_data_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_data_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_data_argsStandardSchemeFactory implements SchemeFactory {
      public fetch_data_argsStandardScheme getScheme() {
        return new fetch_data_argsStandardScheme();
      }
    }

    private static class fetch_data_argsStandardScheme extends StandardScheme<fetch_data_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_data_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.baidu.palo.thrift.TFetchDataParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_data_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_data_argsTupleSchemeFactory implements SchemeFactory {
      public fetch_data_argsTupleScheme getScheme() {
        return new fetch_data_argsTupleScheme();
      }
    }

    private static class fetch_data_argsTupleScheme extends TupleScheme<fetch_data_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new com.baidu.palo.thrift.TFetchDataParams();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class fetch_data_result implements org.apache.thrift.TBase<fetch_data_result, fetch_data_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_data_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_data_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_data_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TFetchDataResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TFetchDataResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_data_result.class, metaDataMap);
    }

    public fetch_data_result() {
    }

    public fetch_data_result(
      com.baidu.palo.thrift.TFetchDataResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_data_result(fetch_data_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TFetchDataResult(other.success);
      }
    }

    public fetch_data_result deepCopy() {
      return new fetch_data_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TFetchDataResult getSuccess() {
      return this.success;
    }

    public fetch_data_result setSuccess(com.baidu.palo.thrift.TFetchDataResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TFetchDataResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_data_result)
        return this.equals((fetch_data_result)that);
      return false;
    }

    public boolean equals(fetch_data_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_data_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_data_resultStandardSchemeFactory implements SchemeFactory {
      public fetch_data_resultStandardScheme getScheme() {
        return new fetch_data_resultStandardScheme();
      }
    }

    private static class fetch_data_resultStandardScheme extends StandardScheme<fetch_data_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_data_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TFetchDataResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_data_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_data_resultTupleSchemeFactory implements SchemeFactory {
      public fetch_data_resultTupleScheme getScheme() {
        return new fetch_data_resultTupleScheme();
      }
    }

    private static class fetch_data_resultTupleScheme extends TupleScheme<fetch_data_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TFetchDataResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submit_tasks_args implements org.apache.thrift.TBase<submit_tasks_args, submit_tasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<submit_tasks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_tasks_args");

    private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_tasks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_tasks_argsTupleSchemeFactory());
    }

    public List<com.baidu.palo.thrift.TAgentTaskRequest> tasks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASKS((short)1, "tasks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASKS
            return TASKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentTaskRequest.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_tasks_args.class, metaDataMap);
    }

    public submit_tasks_args() {
    }

    public submit_tasks_args(
      List<com.baidu.palo.thrift.TAgentTaskRequest> tasks)
    {
      this();
      this.tasks = tasks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_tasks_args(submit_tasks_args other) {
      if (other.isSetTasks()) {
        List<com.baidu.palo.thrift.TAgentTaskRequest> __this__tasks = new ArrayList<com.baidu.palo.thrift.TAgentTaskRequest>(other.tasks.size());
        for (com.baidu.palo.thrift.TAgentTaskRequest other_element : other.tasks) {
          __this__tasks.add(new com.baidu.palo.thrift.TAgentTaskRequest(other_element));
        }
        this.tasks = __this__tasks;
      }
    }

    public submit_tasks_args deepCopy() {
      return new submit_tasks_args(this);
    }

    @Override
    public void clear() {
      this.tasks = null;
    }

    public int getTasksSize() {
      return (this.tasks == null) ? 0 : this.tasks.size();
    }

    public java.util.Iterator<com.baidu.palo.thrift.TAgentTaskRequest> getTasksIterator() {
      return (this.tasks == null) ? null : this.tasks.iterator();
    }

    public void addToTasks(com.baidu.palo.thrift.TAgentTaskRequest elem) {
      if (this.tasks == null) {
        this.tasks = new ArrayList<com.baidu.palo.thrift.TAgentTaskRequest>();
      }
      this.tasks.add(elem);
    }

    public List<com.baidu.palo.thrift.TAgentTaskRequest> getTasks() {
      return this.tasks;
    }

    public submit_tasks_args setTasks(List<com.baidu.palo.thrift.TAgentTaskRequest> tasks) {
      this.tasks = tasks;
      return this;
    }

    public void unsetTasks() {
      this.tasks = null;
    }

    /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
    public boolean isSetTasks() {
      return this.tasks != null;
    }

    public void setTasksIsSet(boolean value) {
      if (!value) {
        this.tasks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASKS:
        if (value == null) {
          unsetTasks();
        } else {
          setTasks((List<com.baidu.palo.thrift.TAgentTaskRequest>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASKS:
        return getTasks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASKS:
        return isSetTasks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_tasks_args)
        return this.equals((submit_tasks_args)that);
      return false;
    }

    public boolean equals(submit_tasks_args that) {
      if (that == null)
        return false;

      boolean this_present_tasks = true && this.isSetTasks();
      boolean that_present_tasks = true && that.isSetTasks();
      if (this_present_tasks || that_present_tasks) {
        if (!(this_present_tasks && that_present_tasks))
          return false;
        if (!this.tasks.equals(that.tasks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tasks = true && (isSetTasks());
      list.add(present_tasks);
      if (present_tasks)
        list.add(tasks);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_tasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTasks()).compareTo(other.isSetTasks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTasks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_tasks_args(");
      boolean first = true;

      sb.append("tasks:");
      if (this.tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.tasks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_tasks_argsStandardSchemeFactory implements SchemeFactory {
      public submit_tasks_argsStandardScheme getScheme() {
        return new submit_tasks_argsStandardScheme();
      }
    }

    private static class submit_tasks_argsStandardScheme extends StandardScheme<submit_tasks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_tasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.tasks = new ArrayList<com.baidu.palo.thrift.TAgentTaskRequest>(_list56.size);
                  com.baidu.palo.thrift.TAgentTaskRequest _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.baidu.palo.thrift.TAgentTaskRequest();
                    _elem57.read(iprot);
                    struct.tasks.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setTasksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_tasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tasks != null) {
          oprot.writeFieldBegin(TASKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tasks.size()));
            for (com.baidu.palo.thrift.TAgentTaskRequest _iter59 : struct.tasks)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_tasks_argsTupleSchemeFactory implements SchemeFactory {
      public submit_tasks_argsTupleScheme getScheme() {
        return new submit_tasks_argsTupleScheme();
      }
    }

    private static class submit_tasks_argsTupleScheme extends TupleScheme<submit_tasks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_tasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTasks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTasks()) {
          {
            oprot.writeI32(struct.tasks.size());
            for (com.baidu.palo.thrift.TAgentTaskRequest _iter60 : struct.tasks)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_tasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tasks = new ArrayList<com.baidu.palo.thrift.TAgentTaskRequest>(_list61.size);
            com.baidu.palo.thrift.TAgentTaskRequest _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.baidu.palo.thrift.TAgentTaskRequest();
              _elem62.read(iprot);
              struct.tasks.add(_elem62);
            }
          }
          struct.setTasksIsSet(true);
        }
      }
    }

  }

  public static class submit_tasks_result implements org.apache.thrift.TBase<submit_tasks_result, submit_tasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<submit_tasks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_tasks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_tasks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_tasks_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_tasks_result.class, metaDataMap);
    }

    public submit_tasks_result() {
    }

    public submit_tasks_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_tasks_result(submit_tasks_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public submit_tasks_result deepCopy() {
      return new submit_tasks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public submit_tasks_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_tasks_result)
        return this.equals((submit_tasks_result)that);
      return false;
    }

    public boolean equals(submit_tasks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_tasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_tasks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_tasks_resultStandardSchemeFactory implements SchemeFactory {
      public submit_tasks_resultStandardScheme getScheme() {
        return new submit_tasks_resultStandardScheme();
      }
    }

    private static class submit_tasks_resultStandardScheme extends StandardScheme<submit_tasks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_tasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_tasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_tasks_resultTupleSchemeFactory implements SchemeFactory {
      public submit_tasks_resultTupleScheme getScheme() {
        return new submit_tasks_resultTupleScheme();
      }
    }

    private static class submit_tasks_resultTupleScheme extends TupleScheme<submit_tasks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_tasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_tasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class make_snapshot_args implements org.apache.thrift.TBase<make_snapshot_args, make_snapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<make_snapshot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("make_snapshot_args");

    private static final org.apache.thrift.protocol.TField SNAPSHOT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new make_snapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new make_snapshot_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TSnapshotRequest snapshot_request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SNAPSHOT_REQUEST((short)1, "snapshot_request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SNAPSHOT_REQUEST
            return SNAPSHOT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNAPSHOT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("snapshot_request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TSnapshotRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(make_snapshot_args.class, metaDataMap);
    }

    public make_snapshot_args() {
    }

    public make_snapshot_args(
      com.baidu.palo.thrift.TSnapshotRequest snapshot_request)
    {
      this();
      this.snapshot_request = snapshot_request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public make_snapshot_args(make_snapshot_args other) {
      if (other.isSetSnapshot_request()) {
        this.snapshot_request = new com.baidu.palo.thrift.TSnapshotRequest(other.snapshot_request);
      }
    }

    public make_snapshot_args deepCopy() {
      return new make_snapshot_args(this);
    }

    @Override
    public void clear() {
      this.snapshot_request = null;
    }

    public com.baidu.palo.thrift.TSnapshotRequest getSnapshot_request() {
      return this.snapshot_request;
    }

    public make_snapshot_args setSnapshot_request(com.baidu.palo.thrift.TSnapshotRequest snapshot_request) {
      this.snapshot_request = snapshot_request;
      return this;
    }

    public void unsetSnapshot_request() {
      this.snapshot_request = null;
    }

    /** Returns true if field snapshot_request is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshot_request() {
      return this.snapshot_request != null;
    }

    public void setSnapshot_requestIsSet(boolean value) {
      if (!value) {
        this.snapshot_request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SNAPSHOT_REQUEST:
        if (value == null) {
          unsetSnapshot_request();
        } else {
          setSnapshot_request((com.baidu.palo.thrift.TSnapshotRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SNAPSHOT_REQUEST:
        return getSnapshot_request();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SNAPSHOT_REQUEST:
        return isSetSnapshot_request();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof make_snapshot_args)
        return this.equals((make_snapshot_args)that);
      return false;
    }

    public boolean equals(make_snapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_snapshot_request = true && this.isSetSnapshot_request();
      boolean that_present_snapshot_request = true && that.isSetSnapshot_request();
      if (this_present_snapshot_request || that_present_snapshot_request) {
        if (!(this_present_snapshot_request && that_present_snapshot_request))
          return false;
        if (!this.snapshot_request.equals(that.snapshot_request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_snapshot_request = true && (isSetSnapshot_request());
      list.add(present_snapshot_request);
      if (present_snapshot_request)
        list.add(snapshot_request);

      return list.hashCode();
    }

    @Override
    public int compareTo(make_snapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSnapshot_request()).compareTo(other.isSetSnapshot_request());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshot_request()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_request, other.snapshot_request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("make_snapshot_args(");
      boolean first = true;

      sb.append("snapshot_request:");
      if (this.snapshot_request == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (snapshot_request != null) {
        snapshot_request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class make_snapshot_argsStandardSchemeFactory implements SchemeFactory {
      public make_snapshot_argsStandardScheme getScheme() {
        return new make_snapshot_argsStandardScheme();
      }
    }

    private static class make_snapshot_argsStandardScheme extends StandardScheme<make_snapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, make_snapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SNAPSHOT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.snapshot_request = new com.baidu.palo.thrift.TSnapshotRequest();
                struct.snapshot_request.read(iprot);
                struct.setSnapshot_requestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, make_snapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.snapshot_request != null) {
          oprot.writeFieldBegin(SNAPSHOT_REQUEST_FIELD_DESC);
          struct.snapshot_request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class make_snapshot_argsTupleSchemeFactory implements SchemeFactory {
      public make_snapshot_argsTupleScheme getScheme() {
        return new make_snapshot_argsTupleScheme();
      }
    }

    private static class make_snapshot_argsTupleScheme extends TupleScheme<make_snapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, make_snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSnapshot_request()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSnapshot_request()) {
          struct.snapshot_request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, make_snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.snapshot_request = new com.baidu.palo.thrift.TSnapshotRequest();
          struct.snapshot_request.read(iprot);
          struct.setSnapshot_requestIsSet(true);
        }
      }
    }

  }

  public static class make_snapshot_result implements org.apache.thrift.TBase<make_snapshot_result, make_snapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<make_snapshot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("make_snapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new make_snapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new make_snapshot_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(make_snapshot_result.class, metaDataMap);
    }

    public make_snapshot_result() {
    }

    public make_snapshot_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public make_snapshot_result(make_snapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public make_snapshot_result deepCopy() {
      return new make_snapshot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public make_snapshot_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof make_snapshot_result)
        return this.equals((make_snapshot_result)that);
      return false;
    }

    public boolean equals(make_snapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(make_snapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("make_snapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class make_snapshot_resultStandardSchemeFactory implements SchemeFactory {
      public make_snapshot_resultStandardScheme getScheme() {
        return new make_snapshot_resultStandardScheme();
      }
    }

    private static class make_snapshot_resultStandardScheme extends StandardScheme<make_snapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, make_snapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, make_snapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class make_snapshot_resultTupleSchemeFactory implements SchemeFactory {
      public make_snapshot_resultTupleScheme getScheme() {
        return new make_snapshot_resultTupleScheme();
      }
    }

    private static class make_snapshot_resultTupleScheme extends TupleScheme<make_snapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, make_snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, make_snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class release_snapshot_args implements org.apache.thrift.TBase<release_snapshot_args, release_snapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<release_snapshot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("release_snapshot_args");

    private static final org.apache.thrift.protocol.TField SNAPSHOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new release_snapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new release_snapshot_argsTupleSchemeFactory());
    }

    public String snapshot_path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SNAPSHOT_PATH((short)1, "snapshot_path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SNAPSHOT_PATH
            return SNAPSHOT_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNAPSHOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("snapshot_path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(release_snapshot_args.class, metaDataMap);
    }

    public release_snapshot_args() {
    }

    public release_snapshot_args(
      String snapshot_path)
    {
      this();
      this.snapshot_path = snapshot_path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public release_snapshot_args(release_snapshot_args other) {
      if (other.isSetSnapshot_path()) {
        this.snapshot_path = other.snapshot_path;
      }
    }

    public release_snapshot_args deepCopy() {
      return new release_snapshot_args(this);
    }

    @Override
    public void clear() {
      this.snapshot_path = null;
    }

    public String getSnapshot_path() {
      return this.snapshot_path;
    }

    public release_snapshot_args setSnapshot_path(String snapshot_path) {
      this.snapshot_path = snapshot_path;
      return this;
    }

    public void unsetSnapshot_path() {
      this.snapshot_path = null;
    }

    /** Returns true if field snapshot_path is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshot_path() {
      return this.snapshot_path != null;
    }

    public void setSnapshot_pathIsSet(boolean value) {
      if (!value) {
        this.snapshot_path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SNAPSHOT_PATH:
        if (value == null) {
          unsetSnapshot_path();
        } else {
          setSnapshot_path((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SNAPSHOT_PATH:
        return getSnapshot_path();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SNAPSHOT_PATH:
        return isSetSnapshot_path();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof release_snapshot_args)
        return this.equals((release_snapshot_args)that);
      return false;
    }

    public boolean equals(release_snapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_snapshot_path = true && this.isSetSnapshot_path();
      boolean that_present_snapshot_path = true && that.isSetSnapshot_path();
      if (this_present_snapshot_path || that_present_snapshot_path) {
        if (!(this_present_snapshot_path && that_present_snapshot_path))
          return false;
        if (!this.snapshot_path.equals(that.snapshot_path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_snapshot_path = true && (isSetSnapshot_path());
      list.add(present_snapshot_path);
      if (present_snapshot_path)
        list.add(snapshot_path);

      return list.hashCode();
    }

    @Override
    public int compareTo(release_snapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSnapshot_path()).compareTo(other.isSetSnapshot_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshot_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_path, other.snapshot_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("release_snapshot_args(");
      boolean first = true;

      sb.append("snapshot_path:");
      if (this.snapshot_path == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class release_snapshot_argsStandardSchemeFactory implements SchemeFactory {
      public release_snapshot_argsStandardScheme getScheme() {
        return new release_snapshot_argsStandardScheme();
      }
    }

    private static class release_snapshot_argsStandardScheme extends StandardScheme<release_snapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, release_snapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SNAPSHOT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snapshot_path = iprot.readString();
                struct.setSnapshot_pathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, release_snapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.snapshot_path != null) {
          oprot.writeFieldBegin(SNAPSHOT_PATH_FIELD_DESC);
          oprot.writeString(struct.snapshot_path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class release_snapshot_argsTupleSchemeFactory implements SchemeFactory {
      public release_snapshot_argsTupleScheme getScheme() {
        return new release_snapshot_argsTupleScheme();
      }
    }

    private static class release_snapshot_argsTupleScheme extends TupleScheme<release_snapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, release_snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSnapshot_path()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSnapshot_path()) {
          oprot.writeString(struct.snapshot_path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, release_snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.snapshot_path = iprot.readString();
          struct.setSnapshot_pathIsSet(true);
        }
      }
    }

  }

  public static class release_snapshot_result implements org.apache.thrift.TBase<release_snapshot_result, release_snapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<release_snapshot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("release_snapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new release_snapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new release_snapshot_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(release_snapshot_result.class, metaDataMap);
    }

    public release_snapshot_result() {
    }

    public release_snapshot_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public release_snapshot_result(release_snapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public release_snapshot_result deepCopy() {
      return new release_snapshot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public release_snapshot_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof release_snapshot_result)
        return this.equals((release_snapshot_result)that);
      return false;
    }

    public boolean equals(release_snapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(release_snapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("release_snapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class release_snapshot_resultStandardSchemeFactory implements SchemeFactory {
      public release_snapshot_resultStandardScheme getScheme() {
        return new release_snapshot_resultStandardScheme();
      }
    }

    private static class release_snapshot_resultStandardScheme extends StandardScheme<release_snapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, release_snapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, release_snapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class release_snapshot_resultTupleSchemeFactory implements SchemeFactory {
      public release_snapshot_resultTupleScheme getScheme() {
        return new release_snapshot_resultTupleScheme();
      }
    }

    private static class release_snapshot_resultTupleScheme extends TupleScheme<release_snapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, release_snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, release_snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class publish_cluster_state_args implements org.apache.thrift.TBase<publish_cluster_state_args, publish_cluster_state_args._Fields>, java.io.Serializable, Cloneable, Comparable<publish_cluster_state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_cluster_state_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_cluster_state_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publish_cluster_state_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentPublishRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentPublishRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_cluster_state_args.class, metaDataMap);
    }

    public publish_cluster_state_args() {
    }

    public publish_cluster_state_args(
      com.baidu.palo.thrift.TAgentPublishRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_cluster_state_args(publish_cluster_state_args other) {
      if (other.isSetRequest()) {
        this.request = new com.baidu.palo.thrift.TAgentPublishRequest(other.request);
      }
    }

    public publish_cluster_state_args deepCopy() {
      return new publish_cluster_state_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com.baidu.palo.thrift.TAgentPublishRequest getRequest() {
      return this.request;
    }

    public publish_cluster_state_args setRequest(com.baidu.palo.thrift.TAgentPublishRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.baidu.palo.thrift.TAgentPublishRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_cluster_state_args)
        return this.equals((publish_cluster_state_args)that);
      return false;
    }

    public boolean equals(publish_cluster_state_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_cluster_state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_cluster_state_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_cluster_state_argsStandardSchemeFactory implements SchemeFactory {
      public publish_cluster_state_argsStandardScheme getScheme() {
        return new publish_cluster_state_argsStandardScheme();
      }
    }

    private static class publish_cluster_state_argsStandardScheme extends StandardScheme<publish_cluster_state_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_cluster_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.baidu.palo.thrift.TAgentPublishRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_cluster_state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publish_cluster_state_argsTupleSchemeFactory implements SchemeFactory {
      public publish_cluster_state_argsTupleScheme getScheme() {
        return new publish_cluster_state_argsTupleScheme();
      }
    }

    private static class publish_cluster_state_argsTupleScheme extends TupleScheme<publish_cluster_state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publish_cluster_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publish_cluster_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.baidu.palo.thrift.TAgentPublishRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class publish_cluster_state_result implements org.apache.thrift.TBase<publish_cluster_state_result, publish_cluster_state_result._Fields>, java.io.Serializable, Cloneable, Comparable<publish_cluster_state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_cluster_state_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_cluster_state_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publish_cluster_state_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_cluster_state_result.class, metaDataMap);
    }

    public publish_cluster_state_result() {
    }

    public publish_cluster_state_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_cluster_state_result(publish_cluster_state_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public publish_cluster_state_result deepCopy() {
      return new publish_cluster_state_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public publish_cluster_state_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_cluster_state_result)
        return this.equals((publish_cluster_state_result)that);
      return false;
    }

    public boolean equals(publish_cluster_state_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_cluster_state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_cluster_state_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_cluster_state_resultStandardSchemeFactory implements SchemeFactory {
      public publish_cluster_state_resultStandardScheme getScheme() {
        return new publish_cluster_state_resultStandardScheme();
      }
    }

    private static class publish_cluster_state_resultStandardScheme extends StandardScheme<publish_cluster_state_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_cluster_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_cluster_state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publish_cluster_state_resultTupleSchemeFactory implements SchemeFactory {
      public publish_cluster_state_resultTupleScheme getScheme() {
        return new publish_cluster_state_resultTupleScheme();
      }
    }

    private static class publish_cluster_state_resultTupleScheme extends TupleScheme<publish_cluster_state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publish_cluster_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publish_cluster_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submit_etl_task_args implements org.apache.thrift.TBase<submit_etl_task_args, submit_etl_task_args._Fields>, java.io.Serializable, Cloneable, Comparable<submit_etl_task_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_etl_task_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_etl_task_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_etl_task_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TMiniLoadEtlTaskRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_etl_task_args.class, metaDataMap);
    }

    public submit_etl_task_args() {
    }

    public submit_etl_task_args(
      com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_etl_task_args(submit_etl_task_args other) {
      if (other.isSetRequest()) {
        this.request = new com.baidu.palo.thrift.TMiniLoadEtlTaskRequest(other.request);
      }
    }

    public submit_etl_task_args deepCopy() {
      return new submit_etl_task_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com.baidu.palo.thrift.TMiniLoadEtlTaskRequest getRequest() {
      return this.request;
    }

    public submit_etl_task_args setRequest(com.baidu.palo.thrift.TMiniLoadEtlTaskRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.baidu.palo.thrift.TMiniLoadEtlTaskRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_etl_task_args)
        return this.equals((submit_etl_task_args)that);
      return false;
    }

    public boolean equals(submit_etl_task_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_etl_task_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_etl_task_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_etl_task_argsStandardSchemeFactory implements SchemeFactory {
      public submit_etl_task_argsStandardScheme getScheme() {
        return new submit_etl_task_argsStandardScheme();
      }
    }

    private static class submit_etl_task_argsStandardScheme extends StandardScheme<submit_etl_task_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_etl_task_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.baidu.palo.thrift.TMiniLoadEtlTaskRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_etl_task_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_etl_task_argsTupleSchemeFactory implements SchemeFactory {
      public submit_etl_task_argsTupleScheme getScheme() {
        return new submit_etl_task_argsTupleScheme();
      }
    }

    private static class submit_etl_task_argsTupleScheme extends TupleScheme<submit_etl_task_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_etl_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_etl_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.baidu.palo.thrift.TMiniLoadEtlTaskRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class submit_etl_task_result implements org.apache.thrift.TBase<submit_etl_task_result, submit_etl_task_result._Fields>, java.io.Serializable, Cloneable, Comparable<submit_etl_task_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_etl_task_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_etl_task_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_etl_task_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_etl_task_result.class, metaDataMap);
    }

    public submit_etl_task_result() {
    }

    public submit_etl_task_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_etl_task_result(submit_etl_task_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public submit_etl_task_result deepCopy() {
      return new submit_etl_task_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public submit_etl_task_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_etl_task_result)
        return this.equals((submit_etl_task_result)that);
      return false;
    }

    public boolean equals(submit_etl_task_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_etl_task_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_etl_task_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_etl_task_resultStandardSchemeFactory implements SchemeFactory {
      public submit_etl_task_resultStandardScheme getScheme() {
        return new submit_etl_task_resultStandardScheme();
      }
    }

    private static class submit_etl_task_resultStandardScheme extends StandardScheme<submit_etl_task_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_etl_task_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_etl_task_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_etl_task_resultTupleSchemeFactory implements SchemeFactory {
      public submit_etl_task_resultTupleScheme getScheme() {
        return new submit_etl_task_resultTupleScheme();
      }
    }

    private static class submit_etl_task_resultTupleScheme extends TupleScheme<submit_etl_task_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_etl_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_etl_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_etl_status_args implements org.apache.thrift.TBase<get_etl_status_args, get_etl_status_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_etl_status_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_etl_status_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_etl_status_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_etl_status_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TMiniLoadEtlStatusRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_etl_status_args.class, metaDataMap);
    }

    public get_etl_status_args() {
    }

    public get_etl_status_args(
      com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_etl_status_args(get_etl_status_args other) {
      if (other.isSetRequest()) {
        this.request = new com.baidu.palo.thrift.TMiniLoadEtlStatusRequest(other.request);
      }
    }

    public get_etl_status_args deepCopy() {
      return new get_etl_status_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusRequest getRequest() {
      return this.request;
    }

    public get_etl_status_args setRequest(com.baidu.palo.thrift.TMiniLoadEtlStatusRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.baidu.palo.thrift.TMiniLoadEtlStatusRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_etl_status_args)
        return this.equals((get_etl_status_args)that);
      return false;
    }

    public boolean equals(get_etl_status_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_etl_status_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_etl_status_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_etl_status_argsStandardSchemeFactory implements SchemeFactory {
      public get_etl_status_argsStandardScheme getScheme() {
        return new get_etl_status_argsStandardScheme();
      }
    }

    private static class get_etl_status_argsStandardScheme extends StandardScheme<get_etl_status_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_etl_status_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.baidu.palo.thrift.TMiniLoadEtlStatusRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_etl_status_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_etl_status_argsTupleSchemeFactory implements SchemeFactory {
      public get_etl_status_argsTupleScheme getScheme() {
        return new get_etl_status_argsTupleScheme();
      }
    }

    private static class get_etl_status_argsTupleScheme extends TupleScheme<get_etl_status_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_etl_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_etl_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.baidu.palo.thrift.TMiniLoadEtlStatusRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class get_etl_status_result implements org.apache.thrift.TBase<get_etl_status_result, get_etl_status_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_etl_status_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_etl_status_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_etl_status_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_etl_status_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TMiniLoadEtlStatusResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_etl_status_result.class, metaDataMap);
    }

    public get_etl_status_result() {
    }

    public get_etl_status_result(
      com.baidu.palo.thrift.TMiniLoadEtlStatusResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_etl_status_result(get_etl_status_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TMiniLoadEtlStatusResult(other.success);
      }
    }

    public get_etl_status_result deepCopy() {
      return new get_etl_status_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TMiniLoadEtlStatusResult getSuccess() {
      return this.success;
    }

    public get_etl_status_result setSuccess(com.baidu.palo.thrift.TMiniLoadEtlStatusResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TMiniLoadEtlStatusResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_etl_status_result)
        return this.equals((get_etl_status_result)that);
      return false;
    }

    public boolean equals(get_etl_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_etl_status_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_etl_status_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_etl_status_resultStandardSchemeFactory implements SchemeFactory {
      public get_etl_status_resultStandardScheme getScheme() {
        return new get_etl_status_resultStandardScheme();
      }
    }

    private static class get_etl_status_resultStandardScheme extends StandardScheme<get_etl_status_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_etl_status_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TMiniLoadEtlStatusResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_etl_status_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_etl_status_resultTupleSchemeFactory implements SchemeFactory {
      public get_etl_status_resultTupleScheme getScheme() {
        return new get_etl_status_resultTupleScheme();
      }
    }

    private static class get_etl_status_resultTupleScheme extends TupleScheme<get_etl_status_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_etl_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_etl_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TMiniLoadEtlStatusResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_etl_files_args implements org.apache.thrift.TBase<delete_etl_files_args, delete_etl_files_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_etl_files_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_etl_files_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_etl_files_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_etl_files_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TDeleteEtlFilesRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TDeleteEtlFilesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_etl_files_args.class, metaDataMap);
    }

    public delete_etl_files_args() {
    }

    public delete_etl_files_args(
      com.baidu.palo.thrift.TDeleteEtlFilesRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_etl_files_args(delete_etl_files_args other) {
      if (other.isSetRequest()) {
        this.request = new com.baidu.palo.thrift.TDeleteEtlFilesRequest(other.request);
      }
    }

    public delete_etl_files_args deepCopy() {
      return new delete_etl_files_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com.baidu.palo.thrift.TDeleteEtlFilesRequest getRequest() {
      return this.request;
    }

    public delete_etl_files_args setRequest(com.baidu.palo.thrift.TDeleteEtlFilesRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.baidu.palo.thrift.TDeleteEtlFilesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_etl_files_args)
        return this.equals((delete_etl_files_args)that);
      return false;
    }

    public boolean equals(delete_etl_files_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_etl_files_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_etl_files_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_etl_files_argsStandardSchemeFactory implements SchemeFactory {
      public delete_etl_files_argsStandardScheme getScheme() {
        return new delete_etl_files_argsStandardScheme();
      }
    }

    private static class delete_etl_files_argsStandardScheme extends StandardScheme<delete_etl_files_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_etl_files_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.baidu.palo.thrift.TDeleteEtlFilesRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_etl_files_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_etl_files_argsTupleSchemeFactory implements SchemeFactory {
      public delete_etl_files_argsTupleScheme getScheme() {
        return new delete_etl_files_argsTupleScheme();
      }
    }

    private static class delete_etl_files_argsTupleScheme extends TupleScheme<delete_etl_files_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_etl_files_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_etl_files_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.baidu.palo.thrift.TDeleteEtlFilesRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class delete_etl_files_result implements org.apache.thrift.TBase<delete_etl_files_result, delete_etl_files_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_etl_files_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_etl_files_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_etl_files_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_etl_files_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TAgentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TAgentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_etl_files_result.class, metaDataMap);
    }

    public delete_etl_files_result() {
    }

    public delete_etl_files_result(
      com.baidu.palo.thrift.TAgentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_etl_files_result(delete_etl_files_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TAgentResult(other.success);
      }
    }

    public delete_etl_files_result deepCopy() {
      return new delete_etl_files_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TAgentResult getSuccess() {
      return this.success;
    }

    public delete_etl_files_result setSuccess(com.baidu.palo.thrift.TAgentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TAgentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_etl_files_result)
        return this.equals((delete_etl_files_result)that);
      return false;
    }

    public boolean equals(delete_etl_files_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_etl_files_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_etl_files_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_etl_files_resultStandardSchemeFactory implements SchemeFactory {
      public delete_etl_files_resultStandardScheme getScheme() {
        return new delete_etl_files_resultStandardScheme();
      }
    }

    private static class delete_etl_files_resultStandardScheme extends StandardScheme<delete_etl_files_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_etl_files_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TAgentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_etl_files_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_etl_files_resultTupleSchemeFactory implements SchemeFactory {
      public delete_etl_files_resultTupleScheme getScheme() {
        return new delete_etl_files_resultTupleScheme();
      }
    }

    private static class delete_etl_files_resultTupleScheme extends TupleScheme<delete_etl_files_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_etl_files_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_etl_files_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TAgentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class register_pull_load_task_args implements org.apache.thrift.TBase<register_pull_load_task_args, register_pull_load_task_args._Fields>, java.io.Serializable, Cloneable, Comparable<register_pull_load_task_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_pull_load_task_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_senders", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new register_pull_load_task_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new register_pull_load_task_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TUniqueId id; // required
    public int num_senders; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      NUM_SENDERS((short)2, "num_senders");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // NUM_SENDERS
            return NUM_SENDERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_SENDERS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
      tmpMap.put(_Fields.NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("num_senders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_pull_load_task_args.class, metaDataMap);
    }

    public register_pull_load_task_args() {
    }

    public register_pull_load_task_args(
      com.baidu.palo.thrift.TUniqueId id,
      int num_senders)
    {
      this();
      this.id = id;
      this.num_senders = num_senders;
      setNum_sendersIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_pull_load_task_args(register_pull_load_task_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = new com.baidu.palo.thrift.TUniqueId(other.id);
      }
      this.num_senders = other.num_senders;
    }

    public register_pull_load_task_args deepCopy() {
      return new register_pull_load_task_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setNum_sendersIsSet(false);
      this.num_senders = 0;
    }

    public com.baidu.palo.thrift.TUniqueId getId() {
      return this.id;
    }

    public register_pull_load_task_args setId(com.baidu.palo.thrift.TUniqueId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getNum_senders() {
      return this.num_senders;
    }

    public register_pull_load_task_args setNum_senders(int num_senders) {
      this.num_senders = num_senders;
      setNum_sendersIsSet(true);
      return this;
    }

    public void unsetNum_senders() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
    }

    /** Returns true if field num_senders is set (has been assigned a value) and false otherwise */
    public boolean isSetNum_senders() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
    }

    public void setNum_sendersIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((com.baidu.palo.thrift.TUniqueId)value);
        }
        break;

      case NUM_SENDERS:
        if (value == null) {
          unsetNum_senders();
        } else {
          setNum_senders((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case NUM_SENDERS:
        return getNum_senders();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case NUM_SENDERS:
        return isSetNum_senders();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof register_pull_load_task_args)
        return this.equals((register_pull_load_task_args)that);
      return false;
    }

    public boolean equals(register_pull_load_task_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_num_senders = true;
      boolean that_present_num_senders = true;
      if (this_present_num_senders || that_present_num_senders) {
        if (!(this_present_num_senders && that_present_num_senders))
          return false;
        if (this.num_senders != that.num_senders)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_num_senders = true;
      list.add(present_num_senders);
      if (present_num_senders)
        list.add(num_senders);

      return list.hashCode();
    }

    @Override
    public int compareTo(register_pull_load_task_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum_senders()).compareTo(other.isSetNum_senders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum_senders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_senders, other.num_senders);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_pull_load_task_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("num_senders:");
      sb.append(this.num_senders);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_pull_load_task_argsStandardSchemeFactory implements SchemeFactory {
      public register_pull_load_task_argsStandardScheme getScheme() {
        return new register_pull_load_task_argsStandardScheme();
      }
    }

    private static class register_pull_load_task_argsStandardScheme extends StandardScheme<register_pull_load_task_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_pull_load_task_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new com.baidu.palo.thrift.TUniqueId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_SENDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num_senders = iprot.readI32();
                struct.setNum_sendersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_pull_load_task_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_SENDERS_FIELD_DESC);
        oprot.writeI32(struct.num_senders);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_pull_load_task_argsTupleSchemeFactory implements SchemeFactory {
      public register_pull_load_task_argsTupleScheme getScheme() {
        return new register_pull_load_task_argsTupleScheme();
      }
    }

    private static class register_pull_load_task_argsTupleScheme extends TupleScheme<register_pull_load_task_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_pull_load_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetNum_senders()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetNum_senders()) {
          oprot.writeI32(struct.num_senders);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_pull_load_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = new com.baidu.palo.thrift.TUniqueId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.num_senders = iprot.readI32();
          struct.setNum_sendersIsSet(true);
        }
      }
    }

  }

  public static class register_pull_load_task_result implements org.apache.thrift.TBase<register_pull_load_task_result, register_pull_load_task_result._Fields>, java.io.Serializable, Cloneable, Comparable<register_pull_load_task_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_pull_load_task_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new register_pull_load_task_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new register_pull_load_task_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_pull_load_task_result.class, metaDataMap);
    }

    public register_pull_load_task_result() {
    }

    public register_pull_load_task_result(
      com.baidu.palo.thrift.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_pull_load_task_result(register_pull_load_task_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TStatus(other.success);
      }
    }

    public register_pull_load_task_result deepCopy() {
      return new register_pull_load_task_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TStatus getSuccess() {
      return this.success;
    }

    public register_pull_load_task_result setSuccess(com.baidu.palo.thrift.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof register_pull_load_task_result)
        return this.equals((register_pull_load_task_result)that);
      return false;
    }

    public boolean equals(register_pull_load_task_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(register_pull_load_task_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_pull_load_task_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_pull_load_task_resultStandardSchemeFactory implements SchemeFactory {
      public register_pull_load_task_resultStandardScheme getScheme() {
        return new register_pull_load_task_resultStandardScheme();
      }
    }

    private static class register_pull_load_task_resultStandardScheme extends StandardScheme<register_pull_load_task_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_pull_load_task_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_pull_load_task_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_pull_load_task_resultTupleSchemeFactory implements SchemeFactory {
      public register_pull_load_task_resultTupleScheme getScheme() {
        return new register_pull_load_task_resultTupleScheme();
      }
    }

    private static class register_pull_load_task_resultTupleScheme extends TupleScheme<register_pull_load_task_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_pull_load_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_pull_load_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deregister_pull_load_task_args implements org.apache.thrift.TBase<deregister_pull_load_task_args, deregister_pull_load_task_args._Fields>, java.io.Serializable, Cloneable, Comparable<deregister_pull_load_task_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregister_pull_load_task_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregister_pull_load_task_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregister_pull_load_task_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TUniqueId id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregister_pull_load_task_args.class, metaDataMap);
    }

    public deregister_pull_load_task_args() {
    }

    public deregister_pull_load_task_args(
      com.baidu.palo.thrift.TUniqueId id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregister_pull_load_task_args(deregister_pull_load_task_args other) {
      if (other.isSetId()) {
        this.id = new com.baidu.palo.thrift.TUniqueId(other.id);
      }
    }

    public deregister_pull_load_task_args deepCopy() {
      return new deregister_pull_load_task_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public com.baidu.palo.thrift.TUniqueId getId() {
      return this.id;
    }

    public deregister_pull_load_task_args setId(com.baidu.palo.thrift.TUniqueId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((com.baidu.palo.thrift.TUniqueId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregister_pull_load_task_args)
        return this.equals((deregister_pull_load_task_args)that);
      return false;
    }

    public boolean equals(deregister_pull_load_task_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deregister_pull_load_task_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregister_pull_load_task_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregister_pull_load_task_argsStandardSchemeFactory implements SchemeFactory {
      public deregister_pull_load_task_argsStandardScheme getScheme() {
        return new deregister_pull_load_task_argsStandardScheme();
      }
    }

    private static class deregister_pull_load_task_argsStandardScheme extends StandardScheme<deregister_pull_load_task_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregister_pull_load_task_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new com.baidu.palo.thrift.TUniqueId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregister_pull_load_task_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregister_pull_load_task_argsTupleSchemeFactory implements SchemeFactory {
      public deregister_pull_load_task_argsTupleScheme getScheme() {
        return new deregister_pull_load_task_argsTupleScheme();
      }
    }

    private static class deregister_pull_load_task_argsTupleScheme extends TupleScheme<deregister_pull_load_task_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregister_pull_load_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregister_pull_load_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = new com.baidu.palo.thrift.TUniqueId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deregister_pull_load_task_result implements org.apache.thrift.TBase<deregister_pull_load_task_result, deregister_pull_load_task_result._Fields>, java.io.Serializable, Cloneable, Comparable<deregister_pull_load_task_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregister_pull_load_task_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregister_pull_load_task_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregister_pull_load_task_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregister_pull_load_task_result.class, metaDataMap);
    }

    public deregister_pull_load_task_result() {
    }

    public deregister_pull_load_task_result(
      com.baidu.palo.thrift.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregister_pull_load_task_result(deregister_pull_load_task_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TStatus(other.success);
      }
    }

    public deregister_pull_load_task_result deepCopy() {
      return new deregister_pull_load_task_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TStatus getSuccess() {
      return this.success;
    }

    public deregister_pull_load_task_result setSuccess(com.baidu.palo.thrift.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregister_pull_load_task_result)
        return this.equals((deregister_pull_load_task_result)that);
      return false;
    }

    public boolean equals(deregister_pull_load_task_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deregister_pull_load_task_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregister_pull_load_task_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregister_pull_load_task_resultStandardSchemeFactory implements SchemeFactory {
      public deregister_pull_load_task_resultStandardScheme getScheme() {
        return new deregister_pull_load_task_resultStandardScheme();
      }
    }

    private static class deregister_pull_load_task_resultStandardScheme extends StandardScheme<deregister_pull_load_task_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregister_pull_load_task_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregister_pull_load_task_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregister_pull_load_task_resultTupleSchemeFactory implements SchemeFactory {
      public deregister_pull_load_task_resultTupleScheme getScheme() {
        return new deregister_pull_load_task_resultTupleScheme();
      }
    }

    private static class deregister_pull_load_task_resultTupleScheme extends TupleScheme<deregister_pull_load_task_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregister_pull_load_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregister_pull_load_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class report_pull_load_sub_task_info_args implements org.apache.thrift.TBase<report_pull_load_sub_task_info_args, report_pull_load_sub_task_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<report_pull_load_sub_task_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("report_pull_load_sub_task_info_args");

    private static final org.apache.thrift.protocol.TField TASK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("task_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new report_pull_load_sub_task_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new report_pull_load_sub_task_info_argsTupleSchemeFactory());
    }

    public TPullLoadSubTaskInfo task_info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_INFO((short)1, "task_info");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_INFO
            return TASK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_INFO, new org.apache.thrift.meta_data.FieldMetaData("task_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPullLoadSubTaskInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(report_pull_load_sub_task_info_args.class, metaDataMap);
    }

    public report_pull_load_sub_task_info_args() {
    }

    public report_pull_load_sub_task_info_args(
      TPullLoadSubTaskInfo task_info)
    {
      this();
      this.task_info = task_info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_pull_load_sub_task_info_args(report_pull_load_sub_task_info_args other) {
      if (other.isSetTask_info()) {
        this.task_info = new TPullLoadSubTaskInfo(other.task_info);
      }
    }

    public report_pull_load_sub_task_info_args deepCopy() {
      return new report_pull_load_sub_task_info_args(this);
    }

    @Override
    public void clear() {
      this.task_info = null;
    }

    public TPullLoadSubTaskInfo getTask_info() {
      return this.task_info;
    }

    public report_pull_load_sub_task_info_args setTask_info(TPullLoadSubTaskInfo task_info) {
      this.task_info = task_info;
      return this;
    }

    public void unsetTask_info() {
      this.task_info = null;
    }

    /** Returns true if field task_info is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_info() {
      return this.task_info != null;
    }

    public void setTask_infoIsSet(boolean value) {
      if (!value) {
        this.task_info = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_INFO:
        if (value == null) {
          unsetTask_info();
        } else {
          setTask_info((TPullLoadSubTaskInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_INFO:
        return getTask_info();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_INFO:
        return isSetTask_info();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_pull_load_sub_task_info_args)
        return this.equals((report_pull_load_sub_task_info_args)that);
      return false;
    }

    public boolean equals(report_pull_load_sub_task_info_args that) {
      if (that == null)
        return false;

      boolean this_present_task_info = true && this.isSetTask_info();
      boolean that_present_task_info = true && that.isSetTask_info();
      if (this_present_task_info || that_present_task_info) {
        if (!(this_present_task_info && that_present_task_info))
          return false;
        if (!this.task_info.equals(that.task_info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task_info = true && (isSetTask_info());
      list.add(present_task_info);
      if (present_task_info)
        list.add(task_info);

      return list.hashCode();
    }

    @Override
    public int compareTo(report_pull_load_sub_task_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_info()).compareTo(other.isSetTask_info());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_info()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_info, other.task_info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("report_pull_load_sub_task_info_args(");
      boolean first = true;

      sb.append("task_info:");
      if (this.task_info == null) {
        sb.append("null");
      } else {
        sb.append(this.task_info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task_info != null) {
        task_info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class report_pull_load_sub_task_info_argsStandardSchemeFactory implements SchemeFactory {
      public report_pull_load_sub_task_info_argsStandardScheme getScheme() {
        return new report_pull_load_sub_task_info_argsStandardScheme();
      }
    }

    private static class report_pull_load_sub_task_info_argsStandardScheme extends StandardScheme<report_pull_load_sub_task_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, report_pull_load_sub_task_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task_info = new TPullLoadSubTaskInfo();
                struct.task_info.read(iprot);
                struct.setTask_infoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, report_pull_load_sub_task_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_info != null) {
          oprot.writeFieldBegin(TASK_INFO_FIELD_DESC);
          struct.task_info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class report_pull_load_sub_task_info_argsTupleSchemeFactory implements SchemeFactory {
      public report_pull_load_sub_task_info_argsTupleScheme getScheme() {
        return new report_pull_load_sub_task_info_argsTupleScheme();
      }
    }

    private static class report_pull_load_sub_task_info_argsTupleScheme extends TupleScheme<report_pull_load_sub_task_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, report_pull_load_sub_task_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask_info()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_info()) {
          struct.task_info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, report_pull_load_sub_task_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_info = new TPullLoadSubTaskInfo();
          struct.task_info.read(iprot);
          struct.setTask_infoIsSet(true);
        }
      }
    }

  }

  public static class report_pull_load_sub_task_info_result implements org.apache.thrift.TBase<report_pull_load_sub_task_info_result, report_pull_load_sub_task_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<report_pull_load_sub_task_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("report_pull_load_sub_task_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new report_pull_load_sub_task_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new report_pull_load_sub_task_info_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(report_pull_load_sub_task_info_result.class, metaDataMap);
    }

    public report_pull_load_sub_task_info_result() {
    }

    public report_pull_load_sub_task_info_result(
      com.baidu.palo.thrift.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_pull_load_sub_task_info_result(report_pull_load_sub_task_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TStatus(other.success);
      }
    }

    public report_pull_load_sub_task_info_result deepCopy() {
      return new report_pull_load_sub_task_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TStatus getSuccess() {
      return this.success;
    }

    public report_pull_load_sub_task_info_result setSuccess(com.baidu.palo.thrift.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_pull_load_sub_task_info_result)
        return this.equals((report_pull_load_sub_task_info_result)that);
      return false;
    }

    public boolean equals(report_pull_load_sub_task_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(report_pull_load_sub_task_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("report_pull_load_sub_task_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class report_pull_load_sub_task_info_resultStandardSchemeFactory implements SchemeFactory {
      public report_pull_load_sub_task_info_resultStandardScheme getScheme() {
        return new report_pull_load_sub_task_info_resultStandardScheme();
      }
    }

    private static class report_pull_load_sub_task_info_resultStandardScheme extends StandardScheme<report_pull_load_sub_task_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, report_pull_load_sub_task_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, report_pull_load_sub_task_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class report_pull_load_sub_task_info_resultTupleSchemeFactory implements SchemeFactory {
      public report_pull_load_sub_task_info_resultTupleScheme getScheme() {
        return new report_pull_load_sub_task_info_resultTupleScheme();
      }
    }

    private static class report_pull_load_sub_task_info_resultTupleScheme extends TupleScheme<report_pull_load_sub_task_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, report_pull_load_sub_task_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, report_pull_load_sub_task_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fetch_pull_load_task_info_args implements org.apache.thrift.TBase<fetch_pull_load_task_info_args, fetch_pull_load_task_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_pull_load_task_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_pull_load_task_info_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_pull_load_task_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_pull_load_task_info_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TUniqueId id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_pull_load_task_info_args.class, metaDataMap);
    }

    public fetch_pull_load_task_info_args() {
    }

    public fetch_pull_load_task_info_args(
      com.baidu.palo.thrift.TUniqueId id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_pull_load_task_info_args(fetch_pull_load_task_info_args other) {
      if (other.isSetId()) {
        this.id = new com.baidu.palo.thrift.TUniqueId(other.id);
      }
    }

    public fetch_pull_load_task_info_args deepCopy() {
      return new fetch_pull_load_task_info_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public com.baidu.palo.thrift.TUniqueId getId() {
      return this.id;
    }

    public fetch_pull_load_task_info_args setId(com.baidu.palo.thrift.TUniqueId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((com.baidu.palo.thrift.TUniqueId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_pull_load_task_info_args)
        return this.equals((fetch_pull_load_task_info_args)that);
      return false;
    }

    public boolean equals(fetch_pull_load_task_info_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_pull_load_task_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_pull_load_task_info_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_pull_load_task_info_argsStandardSchemeFactory implements SchemeFactory {
      public fetch_pull_load_task_info_argsStandardScheme getScheme() {
        return new fetch_pull_load_task_info_argsStandardScheme();
      }
    }

    private static class fetch_pull_load_task_info_argsStandardScheme extends StandardScheme<fetch_pull_load_task_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_pull_load_task_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new com.baidu.palo.thrift.TUniqueId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_pull_load_task_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_pull_load_task_info_argsTupleSchemeFactory implements SchemeFactory {
      public fetch_pull_load_task_info_argsTupleScheme getScheme() {
        return new fetch_pull_load_task_info_argsTupleScheme();
      }
    }

    private static class fetch_pull_load_task_info_argsTupleScheme extends TupleScheme<fetch_pull_load_task_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_pull_load_task_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_pull_load_task_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = new com.baidu.palo.thrift.TUniqueId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class fetch_pull_load_task_info_result implements org.apache.thrift.TBase<fetch_pull_load_task_info_result, fetch_pull_load_task_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_pull_load_task_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_pull_load_task_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_pull_load_task_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_pull_load_task_info_resultTupleSchemeFactory());
    }

    public TFetchPullLoadTaskInfoResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchPullLoadTaskInfoResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_pull_load_task_info_result.class, metaDataMap);
    }

    public fetch_pull_load_task_info_result() {
    }

    public fetch_pull_load_task_info_result(
      TFetchPullLoadTaskInfoResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_pull_load_task_info_result(fetch_pull_load_task_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFetchPullLoadTaskInfoResult(other.success);
      }
    }

    public fetch_pull_load_task_info_result deepCopy() {
      return new fetch_pull_load_task_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TFetchPullLoadTaskInfoResult getSuccess() {
      return this.success;
    }

    public fetch_pull_load_task_info_result setSuccess(TFetchPullLoadTaskInfoResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFetchPullLoadTaskInfoResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_pull_load_task_info_result)
        return this.equals((fetch_pull_load_task_info_result)that);
      return false;
    }

    public boolean equals(fetch_pull_load_task_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_pull_load_task_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_pull_load_task_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_pull_load_task_info_resultStandardSchemeFactory implements SchemeFactory {
      public fetch_pull_load_task_info_resultStandardScheme getScheme() {
        return new fetch_pull_load_task_info_resultStandardScheme();
      }
    }

    private static class fetch_pull_load_task_info_resultStandardScheme extends StandardScheme<fetch_pull_load_task_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_pull_load_task_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFetchPullLoadTaskInfoResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_pull_load_task_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_pull_load_task_info_resultTupleSchemeFactory implements SchemeFactory {
      public fetch_pull_load_task_info_resultTupleScheme getScheme() {
        return new fetch_pull_load_task_info_resultTupleScheme();
      }
    }

    private static class fetch_pull_load_task_info_resultTupleScheme extends TupleScheme<fetch_pull_load_task_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_pull_load_task_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_pull_load_task_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TFetchPullLoadTaskInfoResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fetch_all_pull_load_task_infos_args implements org.apache.thrift.TBase<fetch_all_pull_load_task_infos_args, fetch_all_pull_load_task_infos_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_all_pull_load_task_infos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_all_pull_load_task_infos_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_all_pull_load_task_infos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_all_pull_load_task_infos_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_all_pull_load_task_infos_args.class, metaDataMap);
    }

    public fetch_all_pull_load_task_infos_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_all_pull_load_task_infos_args(fetch_all_pull_load_task_infos_args other) {
    }

    public fetch_all_pull_load_task_infos_args deepCopy() {
      return new fetch_all_pull_load_task_infos_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_all_pull_load_task_infos_args)
        return this.equals((fetch_all_pull_load_task_infos_args)that);
      return false;
    }

    public boolean equals(fetch_all_pull_load_task_infos_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_all_pull_load_task_infos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_all_pull_load_task_infos_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_all_pull_load_task_infos_argsStandardSchemeFactory implements SchemeFactory {
      public fetch_all_pull_load_task_infos_argsStandardScheme getScheme() {
        return new fetch_all_pull_load_task_infos_argsStandardScheme();
      }
    }

    private static class fetch_all_pull_load_task_infos_argsStandardScheme extends StandardScheme<fetch_all_pull_load_task_infos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_all_pull_load_task_infos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_all_pull_load_task_infos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_all_pull_load_task_infos_argsTupleSchemeFactory implements SchemeFactory {
      public fetch_all_pull_load_task_infos_argsTupleScheme getScheme() {
        return new fetch_all_pull_load_task_infos_argsTupleScheme();
      }
    }

    private static class fetch_all_pull_load_task_infos_argsTupleScheme extends TupleScheme<fetch_all_pull_load_task_infos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_all_pull_load_task_infos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_all_pull_load_task_infos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class fetch_all_pull_load_task_infos_result implements org.apache.thrift.TBase<fetch_all_pull_load_task_infos_result, fetch_all_pull_load_task_infos_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_all_pull_load_task_infos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_all_pull_load_task_infos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_all_pull_load_task_infos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetch_all_pull_load_task_infos_resultTupleSchemeFactory());
    }

    public TFetchAllPullLoadTaskInfosResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchAllPullLoadTaskInfosResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_all_pull_load_task_infos_result.class, metaDataMap);
    }

    public fetch_all_pull_load_task_infos_result() {
    }

    public fetch_all_pull_load_task_infos_result(
      TFetchAllPullLoadTaskInfosResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_all_pull_load_task_infos_result(fetch_all_pull_load_task_infos_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFetchAllPullLoadTaskInfosResult(other.success);
      }
    }

    public fetch_all_pull_load_task_infos_result deepCopy() {
      return new fetch_all_pull_load_task_infos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TFetchAllPullLoadTaskInfosResult getSuccess() {
      return this.success;
    }

    public fetch_all_pull_load_task_infos_result setSuccess(TFetchAllPullLoadTaskInfosResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFetchAllPullLoadTaskInfosResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_all_pull_load_task_infos_result)
        return this.equals((fetch_all_pull_load_task_infos_result)that);
      return false;
    }

    public boolean equals(fetch_all_pull_load_task_infos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_all_pull_load_task_infos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_all_pull_load_task_infos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_all_pull_load_task_infos_resultStandardSchemeFactory implements SchemeFactory {
      public fetch_all_pull_load_task_infos_resultStandardScheme getScheme() {
        return new fetch_all_pull_load_task_infos_resultStandardScheme();
      }
    }

    private static class fetch_all_pull_load_task_infos_resultStandardScheme extends StandardScheme<fetch_all_pull_load_task_infos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_all_pull_load_task_infos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFetchAllPullLoadTaskInfosResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_all_pull_load_task_infos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_all_pull_load_task_infos_resultTupleSchemeFactory implements SchemeFactory {
      public fetch_all_pull_load_task_infos_resultTupleScheme getScheme() {
        return new fetch_all_pull_load_task_infos_resultTupleScheme();
      }
    }

    private static class fetch_all_pull_load_task_infos_resultTupleScheme extends TupleScheme<fetch_all_pull_load_task_infos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_all_pull_load_task_infos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_all_pull_load_task_infos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TFetchAllPullLoadTaskInfosResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submit_export_task_args implements org.apache.thrift.TBase<submit_export_task_args, submit_export_task_args._Fields>, java.io.Serializable, Cloneable, Comparable<submit_export_task_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_export_task_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_export_task_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_export_task_argsTupleSchemeFactory());
    }

    public TExportTaskRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExportTaskRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_export_task_args.class, metaDataMap);
    }

    public submit_export_task_args() {
    }

    public submit_export_task_args(
      TExportTaskRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_export_task_args(submit_export_task_args other) {
      if (other.isSetRequest()) {
        this.request = new TExportTaskRequest(other.request);
      }
    }

    public submit_export_task_args deepCopy() {
      return new submit_export_task_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public TExportTaskRequest getRequest() {
      return this.request;
    }

    public submit_export_task_args setRequest(TExportTaskRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((TExportTaskRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_export_task_args)
        return this.equals((submit_export_task_args)that);
      return false;
    }

    public boolean equals(submit_export_task_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_export_task_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_export_task_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_export_task_argsStandardSchemeFactory implements SchemeFactory {
      public submit_export_task_argsStandardScheme getScheme() {
        return new submit_export_task_argsStandardScheme();
      }
    }

    private static class submit_export_task_argsStandardScheme extends StandardScheme<submit_export_task_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_export_task_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new TExportTaskRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_export_task_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_export_task_argsTupleSchemeFactory implements SchemeFactory {
      public submit_export_task_argsTupleScheme getScheme() {
        return new submit_export_task_argsTupleScheme();
      }
    }

    private static class submit_export_task_argsTupleScheme extends TupleScheme<submit_export_task_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_export_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_export_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new TExportTaskRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class submit_export_task_result implements org.apache.thrift.TBase<submit_export_task_result, submit_export_task_result._Fields>, java.io.Serializable, Cloneable, Comparable<submit_export_task_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_export_task_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submit_export_task_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submit_export_task_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_export_task_result.class, metaDataMap);
    }

    public submit_export_task_result() {
    }

    public submit_export_task_result(
      com.baidu.palo.thrift.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submit_export_task_result(submit_export_task_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TStatus(other.success);
      }
    }

    public submit_export_task_result deepCopy() {
      return new submit_export_task_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TStatus getSuccess() {
      return this.success;
    }

    public submit_export_task_result setSuccess(com.baidu.palo.thrift.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submit_export_task_result)
        return this.equals((submit_export_task_result)that);
      return false;
    }

    public boolean equals(submit_export_task_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submit_export_task_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submit_export_task_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submit_export_task_resultStandardSchemeFactory implements SchemeFactory {
      public submit_export_task_resultStandardScheme getScheme() {
        return new submit_export_task_resultStandardScheme();
      }
    }

    private static class submit_export_task_resultStandardScheme extends StandardScheme<submit_export_task_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submit_export_task_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submit_export_task_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submit_export_task_resultTupleSchemeFactory implements SchemeFactory {
      public submit_export_task_resultTupleScheme getScheme() {
        return new submit_export_task_resultTupleScheme();
      }
    }

    private static class submit_export_task_resultTupleScheme extends TupleScheme<submit_export_task_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submit_export_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submit_export_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_export_status_args implements org.apache.thrift.TBase<get_export_status_args, get_export_status_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_export_status_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_export_status_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_export_status_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_export_status_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TUniqueId task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_export_status_args.class, metaDataMap);
    }

    public get_export_status_args() {
    }

    public get_export_status_args(
      com.baidu.palo.thrift.TUniqueId task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_export_status_args(get_export_status_args other) {
      if (other.isSetTask_id()) {
        this.task_id = new com.baidu.palo.thrift.TUniqueId(other.task_id);
      }
    }

    public get_export_status_args deepCopy() {
      return new get_export_status_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public com.baidu.palo.thrift.TUniqueId getTask_id() {
      return this.task_id;
    }

    public get_export_status_args setTask_id(com.baidu.palo.thrift.TUniqueId task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((com.baidu.palo.thrift.TUniqueId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_export_status_args)
        return this.equals((get_export_status_args)that);
      return false;
    }

    public boolean equals(get_export_status_args that) {
      if (that == null)
        return false;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task_id = true && (isSetTask_id());
      list.add(present_task_id);
      if (present_task_id)
        list.add(task_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_export_status_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_export_status_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task_id != null) {
        task_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_export_status_argsStandardSchemeFactory implements SchemeFactory {
      public get_export_status_argsStandardScheme getScheme() {
        return new get_export_status_argsStandardScheme();
      }
    }

    private static class get_export_status_argsStandardScheme extends StandardScheme<get_export_status_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_export_status_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task_id = new com.baidu.palo.thrift.TUniqueId();
                struct.task_id.read(iprot);
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_export_status_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          struct.task_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_export_status_argsTupleSchemeFactory implements SchemeFactory {
      public get_export_status_argsTupleScheme getScheme() {
        return new get_export_status_argsTupleScheme();
      }
    }

    private static class get_export_status_argsTupleScheme extends TupleScheme<get_export_status_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_export_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          struct.task_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_export_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = new com.baidu.palo.thrift.TUniqueId();
          struct.task_id.read(iprot);
          struct.setTask_idIsSet(true);
        }
      }
    }

  }

  public static class get_export_status_result implements org.apache.thrift.TBase<get_export_status_result, get_export_status_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_export_status_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_export_status_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_export_status_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_export_status_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TExportStatusResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExportStatusResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_export_status_result.class, metaDataMap);
    }

    public get_export_status_result() {
    }

    public get_export_status_result(
      com.baidu.palo.thrift.TExportStatusResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_export_status_result(get_export_status_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TExportStatusResult(other.success);
      }
    }

    public get_export_status_result deepCopy() {
      return new get_export_status_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TExportStatusResult getSuccess() {
      return this.success;
    }

    public get_export_status_result setSuccess(com.baidu.palo.thrift.TExportStatusResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TExportStatusResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_export_status_result)
        return this.equals((get_export_status_result)that);
      return false;
    }

    public boolean equals(get_export_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_export_status_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_export_status_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_export_status_resultStandardSchemeFactory implements SchemeFactory {
      public get_export_status_resultStandardScheme getScheme() {
        return new get_export_status_resultStandardScheme();
      }
    }

    private static class get_export_status_resultStandardScheme extends StandardScheme<get_export_status_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_export_status_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TExportStatusResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_export_status_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_export_status_resultTupleSchemeFactory implements SchemeFactory {
      public get_export_status_resultTupleScheme getScheme() {
        return new get_export_status_resultTupleScheme();
      }
    }

    private static class get_export_status_resultTupleScheme extends TupleScheme<get_export_status_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_export_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_export_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TExportStatusResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class erase_export_task_args implements org.apache.thrift.TBase<erase_export_task_args, erase_export_task_args._Fields>, java.io.Serializable, Cloneable, Comparable<erase_export_task_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("erase_export_task_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new erase_export_task_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new erase_export_task_argsTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TUniqueId task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(erase_export_task_args.class, metaDataMap);
    }

    public erase_export_task_args() {
    }

    public erase_export_task_args(
      com.baidu.palo.thrift.TUniqueId task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public erase_export_task_args(erase_export_task_args other) {
      if (other.isSetTask_id()) {
        this.task_id = new com.baidu.palo.thrift.TUniqueId(other.task_id);
      }
    }

    public erase_export_task_args deepCopy() {
      return new erase_export_task_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public com.baidu.palo.thrift.TUniqueId getTask_id() {
      return this.task_id;
    }

    public erase_export_task_args setTask_id(com.baidu.palo.thrift.TUniqueId task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((com.baidu.palo.thrift.TUniqueId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof erase_export_task_args)
        return this.equals((erase_export_task_args)that);
      return false;
    }

    public boolean equals(erase_export_task_args that) {
      if (that == null)
        return false;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task_id = true && (isSetTask_id());
      list.add(present_task_id);
      if (present_task_id)
        list.add(task_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(erase_export_task_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("erase_export_task_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task_id != null) {
        task_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class erase_export_task_argsStandardSchemeFactory implements SchemeFactory {
      public erase_export_task_argsStandardScheme getScheme() {
        return new erase_export_task_argsStandardScheme();
      }
    }

    private static class erase_export_task_argsStandardScheme extends StandardScheme<erase_export_task_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, erase_export_task_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task_id = new com.baidu.palo.thrift.TUniqueId();
                struct.task_id.read(iprot);
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, erase_export_task_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          struct.task_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class erase_export_task_argsTupleSchemeFactory implements SchemeFactory {
      public erase_export_task_argsTupleScheme getScheme() {
        return new erase_export_task_argsTupleScheme();
      }
    }

    private static class erase_export_task_argsTupleScheme extends TupleScheme<erase_export_task_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, erase_export_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          struct.task_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, erase_export_task_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = new com.baidu.palo.thrift.TUniqueId();
          struct.task_id.read(iprot);
          struct.setTask_idIsSet(true);
        }
      }
    }

  }

  public static class erase_export_task_result implements org.apache.thrift.TBase<erase_export_task_result, erase_export_task_result._Fields>, java.io.Serializable, Cloneable, Comparable<erase_export_task_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("erase_export_task_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new erase_export_task_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new erase_export_task_resultTupleSchemeFactory());
    }

    public com.baidu.palo.thrift.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(erase_export_task_result.class, metaDataMap);
    }

    public erase_export_task_result() {
    }

    public erase_export_task_result(
      com.baidu.palo.thrift.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public erase_export_task_result(erase_export_task_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.baidu.palo.thrift.TStatus(other.success);
      }
    }

    public erase_export_task_result deepCopy() {
      return new erase_export_task_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.baidu.palo.thrift.TStatus getSuccess() {
      return this.success;
    }

    public erase_export_task_result setSuccess(com.baidu.palo.thrift.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.baidu.palo.thrift.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof erase_export_task_result)
        return this.equals((erase_export_task_result)that);
      return false;
    }

    public boolean equals(erase_export_task_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(erase_export_task_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("erase_export_task_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class erase_export_task_resultStandardSchemeFactory implements SchemeFactory {
      public erase_export_task_resultStandardScheme getScheme() {
        return new erase_export_task_resultStandardScheme();
      }
    }

    private static class erase_export_task_resultStandardScheme extends StandardScheme<erase_export_task_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, erase_export_task_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.baidu.palo.thrift.TStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, erase_export_task_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class erase_export_task_resultTupleSchemeFactory implements SchemeFactory {
      public erase_export_task_resultTupleScheme getScheme() {
        return new erase_export_task_resultTupleScheme();
      }
    }

    private static class erase_export_task_resultTupleScheme extends TupleScheme<erase_export_task_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, erase_export_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, erase_export_task_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.baidu.palo.thrift.TStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
