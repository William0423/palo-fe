/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TFetchResourceResult implements org.apache.thrift.TBase<TFetchResourceResult, TFetchResourceResult._Fields>, java.io.Serializable, Cloneable, Comparable<TFetchResourceResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFetchResourceResult");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceVersion", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_BY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceByUser", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFetchResourceResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFetchResourceResultTupleSchemeFactory());
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TAgentServiceVersion
   */
  public com.baidu.palo.thrift.TAgentServiceVersion protocolVersion; // required
  public long resourceVersion; // required
  public Map<String,TUserResource> resourceByUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.baidu.palo.thrift.TAgentServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocolVersion"),
    RESOURCE_VERSION((short)2, "resourceVersion"),
    RESOURCE_BY_USER((short)3, "resourceByUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // RESOURCE_VERSION
          return RESOURCE_VERSION;
        case 3: // RESOURCE_BY_USER
          return RESOURCE_BY_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOURCEVERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocolVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TAgentServiceVersion.class)));
    tmpMap.put(_Fields.RESOURCE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("resourceVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_BY_USER, new org.apache.thrift.meta_data.FieldMetaData("resourceByUser", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserResource.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFetchResourceResult.class, metaDataMap);
  }

  public TFetchResourceResult() {
  }

  public TFetchResourceResult(
    com.baidu.palo.thrift.TAgentServiceVersion protocolVersion,
    long resourceVersion,
    Map<String,TUserResource> resourceByUser)
  {
    this();
    this.protocolVersion = protocolVersion;
    this.resourceVersion = resourceVersion;
    setResourceVersionIsSet(true);
    this.resourceByUser = resourceByUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFetchResourceResult(TFetchResourceResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocolVersion()) {
      this.protocolVersion = other.protocolVersion;
    }
    this.resourceVersion = other.resourceVersion;
    if (other.isSetResourceByUser()) {
      Map<String,TUserResource> __this__resourceByUser = new HashMap<String,TUserResource>(other.resourceByUser.size());
      for (Map.Entry<String, TUserResource> other_element : other.resourceByUser.entrySet()) {

        String other_element_key = other_element.getKey();
        TUserResource other_element_value = other_element.getValue();

        String __this__resourceByUser_copy_key = other_element_key;

        TUserResource __this__resourceByUser_copy_value = new TUserResource(other_element_value);

        __this__resourceByUser.put(__this__resourceByUser_copy_key, __this__resourceByUser_copy_value);
      }
      this.resourceByUser = __this__resourceByUser;
    }
  }

  public TFetchResourceResult deepCopy() {
    return new TFetchResourceResult(this);
  }

  @Override
  public void clear() {
    this.protocolVersion = null;
    setResourceVersionIsSet(false);
    this.resourceVersion = 0;
    this.resourceByUser = null;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TAgentServiceVersion
   */
  public com.baidu.palo.thrift.TAgentServiceVersion getProtocolVersion() {
    return this.protocolVersion;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TAgentServiceVersion
   */
  public TFetchResourceResult setProtocolVersion(com.baidu.palo.thrift.TAgentServiceVersion protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocolVersion = null;
  }

  /** Returns true if field protocolVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocolVersion != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocolVersion = null;
    }
  }

  public long getResourceVersion() {
    return this.resourceVersion;
  }

  public TFetchResourceResult setResourceVersion(long resourceVersion) {
    this.resourceVersion = resourceVersion;
    setResourceVersionIsSet(true);
    return this;
  }

  public void unsetResourceVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID);
  }

  /** Returns true if field resourceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID);
  }

  public void setResourceVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID, value);
  }

  public int getResourceByUserSize() {
    return (this.resourceByUser == null) ? 0 : this.resourceByUser.size();
  }

  public void putToResourceByUser(String key, TUserResource val) {
    if (this.resourceByUser == null) {
      this.resourceByUser = new HashMap<String,TUserResource>();
    }
    this.resourceByUser.put(key, val);
  }

  public Map<String,TUserResource> getResourceByUser() {
    return this.resourceByUser;
  }

  public TFetchResourceResult setResourceByUser(Map<String,TUserResource> resourceByUser) {
    this.resourceByUser = resourceByUser;
    return this;
  }

  public void unsetResourceByUser() {
    this.resourceByUser = null;
  }

  /** Returns true if field resourceByUser is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceByUser() {
    return this.resourceByUser != null;
  }

  public void setResourceByUserIsSet(boolean value) {
    if (!value) {
      this.resourceByUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((com.baidu.palo.thrift.TAgentServiceVersion)value);
      }
      break;

    case RESOURCE_VERSION:
      if (value == null) {
        unsetResourceVersion();
      } else {
        setResourceVersion((Long)value);
      }
      break;

    case RESOURCE_BY_USER:
      if (value == null) {
        unsetResourceByUser();
      } else {
        setResourceByUser((Map<String,TUserResource>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case RESOURCE_VERSION:
      return getResourceVersion();

    case RESOURCE_BY_USER:
      return getResourceByUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case RESOURCE_VERSION:
      return isSetResourceVersion();
    case RESOURCE_BY_USER:
      return isSetResourceByUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFetchResourceResult)
      return this.equals((TFetchResourceResult)that);
    return false;
  }

  public boolean equals(TFetchResourceResult that) {
    if (that == null)
      return false;

    boolean this_present_protocolVersion = true && this.isSetProtocolVersion();
    boolean that_present_protocolVersion = true && that.isSetProtocolVersion();
    if (this_present_protocolVersion || that_present_protocolVersion) {
      if (!(this_present_protocolVersion && that_present_protocolVersion))
        return false;
      if (!this.protocolVersion.equals(that.protocolVersion))
        return false;
    }

    boolean this_present_resourceVersion = true;
    boolean that_present_resourceVersion = true;
    if (this_present_resourceVersion || that_present_resourceVersion) {
      if (!(this_present_resourceVersion && that_present_resourceVersion))
        return false;
      if (this.resourceVersion != that.resourceVersion)
        return false;
    }

    boolean this_present_resourceByUser = true && this.isSetResourceByUser();
    boolean that_present_resourceByUser = true && that.isSetResourceByUser();
    if (this_present_resourceByUser || that_present_resourceByUser) {
      if (!(this_present_resourceByUser && that_present_resourceByUser))
        return false;
      if (!this.resourceByUser.equals(that.resourceByUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocolVersion = true && (isSetProtocolVersion());
    list.add(present_protocolVersion);
    if (present_protocolVersion)
      list.add(protocolVersion.getValue());

    boolean present_resourceVersion = true;
    list.add(present_resourceVersion);
    if (present_resourceVersion)
      list.add(resourceVersion);

    boolean present_resourceByUser = true && (isSetResourceByUser());
    list.add(present_resourceByUser);
    if (present_resourceByUser)
      list.add(resourceByUser);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFetchResourceResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocolVersion()).compareTo(other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolVersion, other.protocolVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceVersion()).compareTo(other.isSetResourceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceVersion, other.resourceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceByUser()).compareTo(other.isSetResourceByUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceByUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceByUser, other.resourceByUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFetchResourceResult(");
    boolean first = true;

    sb.append("protocolVersion:");
    if (this.protocolVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceVersion:");
    sb.append(this.resourceVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceByUser:");
    if (this.resourceByUser == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceByUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocolVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocolVersion' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'resourceVersion' because it's a primitive and you chose the non-beans generator.
    if (resourceByUser == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceByUser' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFetchResourceResultStandardSchemeFactory implements SchemeFactory {
    public TFetchResourceResultStandardScheme getScheme() {
      return new TFetchResourceResultStandardScheme();
    }
  }

  private static class TFetchResourceResultStandardScheme extends StandardScheme<TFetchResourceResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFetchResourceResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocolVersion = com.baidu.palo.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resourceVersion = iprot.readI64();
              struct.setResourceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_BY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                struct.resourceByUser = new HashMap<String,TUserResource>(2*_map74.size);
                String _key75;
                TUserResource _val76;
                for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                {
                  _key75 = iprot.readString();
                  _val76 = new TUserResource();
                  _val76.read(iprot);
                  struct.resourceByUser.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
              struct.setResourceByUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResourceVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceVersion' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFetchResourceResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocolVersion != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocolVersion.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOURCE_VERSION_FIELD_DESC);
      oprot.writeI64(struct.resourceVersion);
      oprot.writeFieldEnd();
      if (struct.resourceByUser != null) {
        oprot.writeFieldBegin(RESOURCE_BY_USER_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.resourceByUser.size()));
          for (Map.Entry<String, TUserResource> _iter78 : struct.resourceByUser.entrySet())
          {
            oprot.writeString(_iter78.getKey());
            _iter78.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFetchResourceResultTupleSchemeFactory implements SchemeFactory {
    public TFetchResourceResultTupleScheme getScheme() {
      return new TFetchResourceResultTupleScheme();
    }
  }

  private static class TFetchResourceResultTupleScheme extends TupleScheme<TFetchResourceResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFetchResourceResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocolVersion.getValue());
      oprot.writeI64(struct.resourceVersion);
      {
        oprot.writeI32(struct.resourceByUser.size());
        for (Map.Entry<String, TUserResource> _iter79 : struct.resourceByUser.entrySet())
        {
          oprot.writeString(_iter79.getKey());
          _iter79.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFetchResourceResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocolVersion = com.baidu.palo.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
      struct.setProtocolVersionIsSet(true);
      struct.resourceVersion = iprot.readI64();
      struct.setResourceVersionIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.resourceByUser = new HashMap<String,TUserResource>(2*_map80.size);
        String _key81;
        TUserResource _val82;
        for (int _i83 = 0; _i83 < _map80.size; ++_i83)
        {
          _key81 = iprot.readString();
          _val82 = new TUserResource();
          _val82.read(iprot);
          struct.resourceByUser.put(_key81, _val82);
        }
      }
      struct.setResourceByUserIsSet(true);
    }
  }

}

