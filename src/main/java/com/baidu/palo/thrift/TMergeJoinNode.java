/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TMergeJoinNode implements org.apache.thrift.TBase<TMergeJoinNode, TMergeJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<TMergeJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMergeJoinNode");

  private static final org.apache.thrift.protocol.TField CMP_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("cmp_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OTHER_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("other_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMergeJoinNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMergeJoinNodeTupleSchemeFactory());
  }

  public List<TEqJoinCondition> cmp_conjuncts; // required
  public List<com.baidu.palo.thrift.TExpr> other_join_conjuncts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CMP_CONJUNCTS((short)1, "cmp_conjuncts"),
    OTHER_JOIN_CONJUNCTS((short)2, "other_join_conjuncts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CMP_CONJUNCTS
          return CMP_CONJUNCTS;
        case 2: // OTHER_JOIN_CONJUNCTS
          return OTHER_JOIN_CONJUNCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OTHER_JOIN_CONJUNCTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CMP_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("cmp_conjuncts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEqJoinCondition.class))));
    tmpMap.put(_Fields.OTHER_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("other_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMergeJoinNode.class, metaDataMap);
  }

  public TMergeJoinNode() {
  }

  public TMergeJoinNode(
    List<TEqJoinCondition> cmp_conjuncts)
  {
    this();
    this.cmp_conjuncts = cmp_conjuncts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMergeJoinNode(TMergeJoinNode other) {
    if (other.isSetCmp_conjuncts()) {
      List<TEqJoinCondition> __this__cmp_conjuncts = new ArrayList<TEqJoinCondition>(other.cmp_conjuncts.size());
      for (TEqJoinCondition other_element : other.cmp_conjuncts) {
        __this__cmp_conjuncts.add(new TEqJoinCondition(other_element));
      }
      this.cmp_conjuncts = __this__cmp_conjuncts;
    }
    if (other.isSetOther_join_conjuncts()) {
      List<com.baidu.palo.thrift.TExpr> __this__other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(other.other_join_conjuncts.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.other_join_conjuncts) {
        __this__other_join_conjuncts.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.other_join_conjuncts = __this__other_join_conjuncts;
    }
  }

  public TMergeJoinNode deepCopy() {
    return new TMergeJoinNode(this);
  }

  @Override
  public void clear() {
    this.cmp_conjuncts = null;
    this.other_join_conjuncts = null;
  }

  public int getCmp_conjunctsSize() {
    return (this.cmp_conjuncts == null) ? 0 : this.cmp_conjuncts.size();
  }

  public java.util.Iterator<TEqJoinCondition> getCmp_conjunctsIterator() {
    return (this.cmp_conjuncts == null) ? null : this.cmp_conjuncts.iterator();
  }

  public void addToCmp_conjuncts(TEqJoinCondition elem) {
    if (this.cmp_conjuncts == null) {
      this.cmp_conjuncts = new ArrayList<TEqJoinCondition>();
    }
    this.cmp_conjuncts.add(elem);
  }

  public List<TEqJoinCondition> getCmp_conjuncts() {
    return this.cmp_conjuncts;
  }

  public TMergeJoinNode setCmp_conjuncts(List<TEqJoinCondition> cmp_conjuncts) {
    this.cmp_conjuncts = cmp_conjuncts;
    return this;
  }

  public void unsetCmp_conjuncts() {
    this.cmp_conjuncts = null;
  }

  /** Returns true if field cmp_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetCmp_conjuncts() {
    return this.cmp_conjuncts != null;
  }

  public void setCmp_conjunctsIsSet(boolean value) {
    if (!value) {
      this.cmp_conjuncts = null;
    }
  }

  public int getOther_join_conjunctsSize() {
    return (this.other_join_conjuncts == null) ? 0 : this.other_join_conjuncts.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getOther_join_conjunctsIterator() {
    return (this.other_join_conjuncts == null) ? null : this.other_join_conjuncts.iterator();
  }

  public void addToOther_join_conjuncts(com.baidu.palo.thrift.TExpr elem) {
    if (this.other_join_conjuncts == null) {
      this.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.other_join_conjuncts.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getOther_join_conjuncts() {
    return this.other_join_conjuncts;
  }

  public TMergeJoinNode setOther_join_conjuncts(List<com.baidu.palo.thrift.TExpr> other_join_conjuncts) {
    this.other_join_conjuncts = other_join_conjuncts;
    return this;
  }

  public void unsetOther_join_conjuncts() {
    this.other_join_conjuncts = null;
  }

  /** Returns true if field other_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_join_conjuncts() {
    return this.other_join_conjuncts != null;
  }

  public void setOther_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.other_join_conjuncts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CMP_CONJUNCTS:
      if (value == null) {
        unsetCmp_conjuncts();
      } else {
        setCmp_conjuncts((List<TEqJoinCondition>)value);
      }
      break;

    case OTHER_JOIN_CONJUNCTS:
      if (value == null) {
        unsetOther_join_conjuncts();
      } else {
        setOther_join_conjuncts((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CMP_CONJUNCTS:
      return getCmp_conjuncts();

    case OTHER_JOIN_CONJUNCTS:
      return getOther_join_conjuncts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CMP_CONJUNCTS:
      return isSetCmp_conjuncts();
    case OTHER_JOIN_CONJUNCTS:
      return isSetOther_join_conjuncts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMergeJoinNode)
      return this.equals((TMergeJoinNode)that);
    return false;
  }

  public boolean equals(TMergeJoinNode that) {
    if (that == null)
      return false;

    boolean this_present_cmp_conjuncts = true && this.isSetCmp_conjuncts();
    boolean that_present_cmp_conjuncts = true && that.isSetCmp_conjuncts();
    if (this_present_cmp_conjuncts || that_present_cmp_conjuncts) {
      if (!(this_present_cmp_conjuncts && that_present_cmp_conjuncts))
        return false;
      if (!this.cmp_conjuncts.equals(that.cmp_conjuncts))
        return false;
    }

    boolean this_present_other_join_conjuncts = true && this.isSetOther_join_conjuncts();
    boolean that_present_other_join_conjuncts = true && that.isSetOther_join_conjuncts();
    if (this_present_other_join_conjuncts || that_present_other_join_conjuncts) {
      if (!(this_present_other_join_conjuncts && that_present_other_join_conjuncts))
        return false;
      if (!this.other_join_conjuncts.equals(that.other_join_conjuncts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cmp_conjuncts = true && (isSetCmp_conjuncts());
    list.add(present_cmp_conjuncts);
    if (present_cmp_conjuncts)
      list.add(cmp_conjuncts);

    boolean present_other_join_conjuncts = true && (isSetOther_join_conjuncts());
    list.add(present_other_join_conjuncts);
    if (present_other_join_conjuncts)
      list.add(other_join_conjuncts);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMergeJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCmp_conjuncts()).compareTo(other.isSetCmp_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmp_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmp_conjuncts, other.cmp_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther_join_conjuncts()).compareTo(other.isSetOther_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_join_conjuncts, other.other_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMergeJoinNode(");
    boolean first = true;

    sb.append("cmp_conjuncts:");
    if (this.cmp_conjuncts == null) {
      sb.append("null");
    } else {
      sb.append(this.cmp_conjuncts);
    }
    first = false;
    if (isSetOther_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("other_join_conjuncts:");
      if (this.other_join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.other_join_conjuncts);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (cmp_conjuncts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cmp_conjuncts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMergeJoinNodeStandardSchemeFactory implements SchemeFactory {
    public TMergeJoinNodeStandardScheme getScheme() {
      return new TMergeJoinNodeStandardScheme();
    }
  }

  private static class TMergeJoinNodeStandardScheme extends StandardScheme<TMergeJoinNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMergeJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CMP_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.cmp_conjuncts = new ArrayList<TEqJoinCondition>(_list184.size);
                TEqJoinCondition _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = new TEqJoinCondition();
                  _elem185.read(iprot);
                  struct.cmp_conjuncts.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setCmp_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OTHER_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                struct.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(_list187.size);
                com.baidu.palo.thrift.TExpr _elem188;
                for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                {
                  _elem188 = new com.baidu.palo.thrift.TExpr();
                  _elem188.read(iprot);
                  struct.other_join_conjuncts.add(_elem188);
                }
                iprot.readListEnd();
              }
              struct.setOther_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMergeJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cmp_conjuncts != null) {
        oprot.writeFieldBegin(CMP_CONJUNCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cmp_conjuncts.size()));
          for (TEqJoinCondition _iter190 : struct.cmp_conjuncts)
          {
            _iter190.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.other_join_conjuncts != null) {
        if (struct.isSetOther_join_conjuncts()) {
          oprot.writeFieldBegin(OTHER_JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.other_join_conjuncts.size()));
            for (com.baidu.palo.thrift.TExpr _iter191 : struct.other_join_conjuncts)
            {
              _iter191.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMergeJoinNodeTupleSchemeFactory implements SchemeFactory {
    public TMergeJoinNodeTupleScheme getScheme() {
      return new TMergeJoinNodeTupleScheme();
    }
  }

  private static class TMergeJoinNodeTupleScheme extends TupleScheme<TMergeJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMergeJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.cmp_conjuncts.size());
        for (TEqJoinCondition _iter192 : struct.cmp_conjuncts)
        {
          _iter192.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetOther_join_conjuncts()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOther_join_conjuncts()) {
        {
          oprot.writeI32(struct.other_join_conjuncts.size());
          for (com.baidu.palo.thrift.TExpr _iter193 : struct.other_join_conjuncts)
          {
            _iter193.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMergeJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.cmp_conjuncts = new ArrayList<TEqJoinCondition>(_list194.size);
        TEqJoinCondition _elem195;
        for (int _i196 = 0; _i196 < _list194.size; ++_i196)
        {
          _elem195 = new TEqJoinCondition();
          _elem195.read(iprot);
          struct.cmp_conjuncts.add(_elem195);
        }
      }
      struct.setCmp_conjunctsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(_list197.size);
          com.baidu.palo.thrift.TExpr _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = new com.baidu.palo.thrift.TExpr();
            _elem198.read(iprot);
            struct.other_join_conjuncts.add(_elem198);
          }
        }
        struct.setOther_join_conjunctsIsSet(true);
      }
    }
  }

}

