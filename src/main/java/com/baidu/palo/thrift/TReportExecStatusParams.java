/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TReportExecStatusParams implements org.apache.thrift.TBase<TReportExecStatusParams, TReportExecStatusParams._Fields>, java.io.Serializable, Cloneable, Comparable<TReportExecStatusParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportExecStatusParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("done", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_log", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DELTA_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("delta_urls", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LOAD_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_counters", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXPORT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("export_files", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TReportExecStatusParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TReportExecStatusParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  public FrontendServiceVersion protocol_version; // required
  public com.baidu.palo.thrift.TUniqueId query_id; // optional
  public int backend_num; // optional
  public com.baidu.palo.thrift.TUniqueId fragment_instance_id; // optional
  public com.baidu.palo.thrift.TStatus status; // optional
  public boolean done; // optional
  public com.baidu.palo.thrift.TRuntimeProfileTree profile; // optional
  public List<String> error_log; // optional
  public List<String> delta_urls; // optional
  public Map<String,String> load_counters; // optional
  public String tracking_url; // optional
  public List<String> export_files; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FrontendServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    QUERY_ID((short)2, "query_id"),
    BACKEND_NUM((short)3, "backend_num"),
    FRAGMENT_INSTANCE_ID((short)4, "fragment_instance_id"),
    STATUS((short)5, "status"),
    DONE((short)6, "done"),
    PROFILE((short)7, "profile"),
    ERROR_LOG((short)9, "error_log"),
    DELTA_URLS((short)10, "delta_urls"),
    LOAD_COUNTERS((short)11, "load_counters"),
    TRACKING_URL((short)12, "tracking_url"),
    EXPORT_FILES((short)13, "export_files");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // BACKEND_NUM
          return BACKEND_NUM;
        case 4: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DONE
          return DONE;
        case 7: // PROFILE
          return PROFILE;
        case 9: // ERROR_LOG
          return ERROR_LOG;
        case 10: // DELTA_URLS
          return DELTA_URLS;
        case 11: // LOAD_COUNTERS
          return LOAD_COUNTERS;
        case 12: // TRACKING_URL
          return TRACKING_URL;
        case 13: // EXPORT_FILES
          return EXPORT_FILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __DONE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_ID,_Fields.BACKEND_NUM,_Fields.FRAGMENT_INSTANCE_ID,_Fields.STATUS,_Fields.DONE,_Fields.PROFILE,_Fields.ERROR_LOG,_Fields.DELTA_URLS,_Fields.LOAD_COUNTERS,_Fields.TRACKING_URL,_Fields.EXPORT_FILES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendServiceVersion.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
    tmpMap.put(_Fields.DONE, new org.apache.thrift.meta_data.FieldMetaData("done", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TRuntimeProfileTree.class)));
    tmpMap.put(_Fields.ERROR_LOG, new org.apache.thrift.meta_data.FieldMetaData("error_log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELTA_URLS, new org.apache.thrift.meta_data.FieldMetaData("delta_urls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOAD_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("load_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPORT_FILES, new org.apache.thrift.meta_data.FieldMetaData("export_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportExecStatusParams.class, metaDataMap);
  }

  public TReportExecStatusParams() {
  }

  public TReportExecStatusParams(
    FrontendServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportExecStatusParams(TReportExecStatusParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetQuery_id()) {
      this.query_id = new com.baidu.palo.thrift.TUniqueId(other.query_id);
    }
    this.backend_num = other.backend_num;
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetStatus()) {
      this.status = new com.baidu.palo.thrift.TStatus(other.status);
    }
    this.done = other.done;
    if (other.isSetProfile()) {
      this.profile = new com.baidu.palo.thrift.TRuntimeProfileTree(other.profile);
    }
    if (other.isSetError_log()) {
      List<String> __this__error_log = new ArrayList<String>(other.error_log);
      this.error_log = __this__error_log;
    }
    if (other.isSetDelta_urls()) {
      List<String> __this__delta_urls = new ArrayList<String>(other.delta_urls);
      this.delta_urls = __this__delta_urls;
    }
    if (other.isSetLoad_counters()) {
      Map<String,String> __this__load_counters = new HashMap<String,String>(other.load_counters);
      this.load_counters = __this__load_counters;
    }
    if (other.isSetTracking_url()) {
      this.tracking_url = other.tracking_url;
    }
    if (other.isSetExport_files()) {
      List<String> __this__export_files = new ArrayList<String>(other.export_files);
      this.export_files = __this__export_files;
    }
  }

  public TReportExecStatusParams deepCopy() {
    return new TReportExecStatusParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.query_id = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.fragment_instance_id = null;
    this.status = null;
    setDoneIsSet(false);
    this.done = false;
    this.profile = null;
    this.error_log = null;
    this.delta_urls = null;
    this.load_counters = null;
    this.tracking_url = null;
    this.export_files = null;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  public FrontendServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  public TReportExecStatusParams setProtocol_version(FrontendServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public com.baidu.palo.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TReportExecStatusParams setQuery_id(com.baidu.palo.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TReportExecStatusParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  public com.baidu.palo.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TReportExecStatusParams setFragment_instance_id(com.baidu.palo.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public com.baidu.palo.thrift.TStatus getStatus() {
    return this.status;
  }

  public TReportExecStatusParams setStatus(com.baidu.palo.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isDone() {
    return this.done;
  }

  public TReportExecStatusParams setDone(boolean done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  /** Returns true if field done is set (has been assigned a value) and false otherwise */
  public boolean isSetDone() {
    return EncodingUtils.testBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONE_ISSET_ID, value);
  }

  public com.baidu.palo.thrift.TRuntimeProfileTree getProfile() {
    return this.profile;
  }

  public TReportExecStatusParams setProfile(com.baidu.palo.thrift.TRuntimeProfileTree profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public int getError_logSize() {
    return (this.error_log == null) ? 0 : this.error_log.size();
  }

  public java.util.Iterator<String> getError_logIterator() {
    return (this.error_log == null) ? null : this.error_log.iterator();
  }

  public void addToError_log(String elem) {
    if (this.error_log == null) {
      this.error_log = new ArrayList<String>();
    }
    this.error_log.add(elem);
  }

  public List<String> getError_log() {
    return this.error_log;
  }

  public TReportExecStatusParams setError_log(List<String> error_log) {
    this.error_log = error_log;
    return this;
  }

  public void unsetError_log() {
    this.error_log = null;
  }

  /** Returns true if field error_log is set (has been assigned a value) and false otherwise */
  public boolean isSetError_log() {
    return this.error_log != null;
  }

  public void setError_logIsSet(boolean value) {
    if (!value) {
      this.error_log = null;
    }
  }

  public int getDelta_urlsSize() {
    return (this.delta_urls == null) ? 0 : this.delta_urls.size();
  }

  public java.util.Iterator<String> getDelta_urlsIterator() {
    return (this.delta_urls == null) ? null : this.delta_urls.iterator();
  }

  public void addToDelta_urls(String elem) {
    if (this.delta_urls == null) {
      this.delta_urls = new ArrayList<String>();
    }
    this.delta_urls.add(elem);
  }

  public List<String> getDelta_urls() {
    return this.delta_urls;
  }

  public TReportExecStatusParams setDelta_urls(List<String> delta_urls) {
    this.delta_urls = delta_urls;
    return this;
  }

  public void unsetDelta_urls() {
    this.delta_urls = null;
  }

  /** Returns true if field delta_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetDelta_urls() {
    return this.delta_urls != null;
  }

  public void setDelta_urlsIsSet(boolean value) {
    if (!value) {
      this.delta_urls = null;
    }
  }

  public int getLoad_countersSize() {
    return (this.load_counters == null) ? 0 : this.load_counters.size();
  }

  public void putToLoad_counters(String key, String val) {
    if (this.load_counters == null) {
      this.load_counters = new HashMap<String,String>();
    }
    this.load_counters.put(key, val);
  }

  public Map<String,String> getLoad_counters() {
    return this.load_counters;
  }

  public TReportExecStatusParams setLoad_counters(Map<String,String> load_counters) {
    this.load_counters = load_counters;
    return this;
  }

  public void unsetLoad_counters() {
    this.load_counters = null;
  }

  /** Returns true if field load_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_counters() {
    return this.load_counters != null;
  }

  public void setLoad_countersIsSet(boolean value) {
    if (!value) {
      this.load_counters = null;
    }
  }

  public String getTracking_url() {
    return this.tracking_url;
  }

  public TReportExecStatusParams setTracking_url(String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTracking_url() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_url() {
    return this.tracking_url != null;
  }

  public void setTracking_urlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  public int getExport_filesSize() {
    return (this.export_files == null) ? 0 : this.export_files.size();
  }

  public java.util.Iterator<String> getExport_filesIterator() {
    return (this.export_files == null) ? null : this.export_files.iterator();
  }

  public void addToExport_files(String elem) {
    if (this.export_files == null) {
      this.export_files = new ArrayList<String>();
    }
    this.export_files.add(elem);
  }

  public List<String> getExport_files() {
    return this.export_files;
  }

  public TReportExecStatusParams setExport_files(List<String> export_files) {
    this.export_files = export_files;
    return this;
  }

  public void unsetExport_files() {
    this.export_files = null;
  }

  /** Returns true if field export_files is set (has been assigned a value) and false otherwise */
  public boolean isSetExport_files() {
    return this.export_files != null;
  }

  public void setExport_filesIsSet(boolean value) {
    if (!value) {
      this.export_files = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((FrontendServiceVersion)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((Integer)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.baidu.palo.thrift.TStatus)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((com.baidu.palo.thrift.TRuntimeProfileTree)value);
      }
      break;

    case ERROR_LOG:
      if (value == null) {
        unsetError_log();
      } else {
        setError_log((List<String>)value);
      }
      break;

    case DELTA_URLS:
      if (value == null) {
        unsetDelta_urls();
      } else {
        setDelta_urls((List<String>)value);
      }
      break;

    case LOAD_COUNTERS:
      if (value == null) {
        unsetLoad_counters();
      } else {
        setLoad_counters((Map<String,String>)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTracking_url();
      } else {
        setTracking_url((String)value);
      }
      break;

    case EXPORT_FILES:
      if (value == null) {
        unsetExport_files();
      } else {
        setExport_files((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case QUERY_ID:
      return getQuery_id();

    case BACKEND_NUM:
      return getBackend_num();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case STATUS:
      return getStatus();

    case DONE:
      return isDone();

    case PROFILE:
      return getProfile();

    case ERROR_LOG:
      return getError_log();

    case DELTA_URLS:
      return getDelta_urls();

    case LOAD_COUNTERS:
      return getLoad_counters();

    case TRACKING_URL:
      return getTracking_url();

    case EXPORT_FILES:
      return getExport_files();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case QUERY_ID:
      return isSetQuery_id();
    case BACKEND_NUM:
      return isSetBackend_num();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case STATUS:
      return isSetStatus();
    case DONE:
      return isSetDone();
    case PROFILE:
      return isSetProfile();
    case ERROR_LOG:
      return isSetError_log();
    case DELTA_URLS:
      return isSetDelta_urls();
    case LOAD_COUNTERS:
      return isSetLoad_counters();
    case TRACKING_URL:
      return isSetTracking_url();
    case EXPORT_FILES:
      return isSetExport_files();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TReportExecStatusParams)
      return this.equals((TReportExecStatusParams)that);
    return false;
  }

  public boolean equals(TReportExecStatusParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_done = true && this.isSetDone();
    boolean that_present_done = true && that.isSetDone();
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_error_log = true && this.isSetError_log();
    boolean that_present_error_log = true && that.isSetError_log();
    if (this_present_error_log || that_present_error_log) {
      if (!(this_present_error_log && that_present_error_log))
        return false;
      if (!this.error_log.equals(that.error_log))
        return false;
    }

    boolean this_present_delta_urls = true && this.isSetDelta_urls();
    boolean that_present_delta_urls = true && that.isSetDelta_urls();
    if (this_present_delta_urls || that_present_delta_urls) {
      if (!(this_present_delta_urls && that_present_delta_urls))
        return false;
      if (!this.delta_urls.equals(that.delta_urls))
        return false;
    }

    boolean this_present_load_counters = true && this.isSetLoad_counters();
    boolean that_present_load_counters = true && that.isSetLoad_counters();
    if (this_present_load_counters || that_present_load_counters) {
      if (!(this_present_load_counters && that_present_load_counters))
        return false;
      if (!this.load_counters.equals(that.load_counters))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTracking_url();
    boolean that_present_tracking_url = true && that.isSetTracking_url();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    boolean this_present_export_files = true && this.isSetExport_files();
    boolean that_present_export_files = true && that.isSetExport_files();
    if (this_present_export_files || that_present_export_files) {
      if (!(this_present_export_files && that_present_export_files))
        return false;
      if (!this.export_files.equals(that.export_files))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_query_id = true && (isSetQuery_id());
    list.add(present_query_id);
    if (present_query_id)
      list.add(query_id);

    boolean present_backend_num = true && (isSetBackend_num());
    list.add(present_backend_num);
    if (present_backend_num)
      list.add(backend_num);

    boolean present_fragment_instance_id = true && (isSetFragment_instance_id());
    list.add(present_fragment_instance_id);
    if (present_fragment_instance_id)
      list.add(fragment_instance_id);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_done = true && (isSetDone());
    list.add(present_done);
    if (present_done)
      list.add(done);

    boolean present_profile = true && (isSetProfile());
    list.add(present_profile);
    if (present_profile)
      list.add(profile);

    boolean present_error_log = true && (isSetError_log());
    list.add(present_error_log);
    if (present_error_log)
      list.add(error_log);

    boolean present_delta_urls = true && (isSetDelta_urls());
    list.add(present_delta_urls);
    if (present_delta_urls)
      list.add(delta_urls);

    boolean present_load_counters = true && (isSetLoad_counters());
    list.add(present_load_counters);
    if (present_load_counters)
      list.add(load_counters);

    boolean present_tracking_url = true && (isSetTracking_url());
    list.add(present_tracking_url);
    if (present_tracking_url)
      list.add(tracking_url);

    boolean present_export_files = true && (isSetExport_files());
    list.add(present_export_files);
    if (present_export_files)
      list.add(export_files);

    return list.hashCode();
  }

  @Override
  public int compareTo(TReportExecStatusParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend_num()).compareTo(other.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDone()).compareTo(other.isSetDone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.done, other.done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_log()).compareTo(other.isSetError_log());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_log()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_log, other.error_log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelta_urls()).compareTo(other.isSetDelta_urls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelta_urls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta_urls, other.delta_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_counters()).compareTo(other.isSetLoad_counters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_counters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_counters, other.load_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracking_url()).compareTo(other.isSetTracking_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExport_files()).compareTo(other.isSetExport_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExport_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_files, other.export_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TReportExecStatusParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetQuery_id()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetFragment_instance_id()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_id:");
      if (this.fragment_instance_id == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_id);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDone()) {
      if (!first) sb.append(", ");
      sb.append("done:");
      sb.append(this.done);
      first = false;
    }
    if (isSetProfile()) {
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
    }
    if (isSetError_log()) {
      if (!first) sb.append(", ");
      sb.append("error_log:");
      if (this.error_log == null) {
        sb.append("null");
      } else {
        sb.append(this.error_log);
      }
      first = false;
    }
    if (isSetDelta_urls()) {
      if (!first) sb.append(", ");
      sb.append("delta_urls:");
      if (this.delta_urls == null) {
        sb.append("null");
      } else {
        sb.append(this.delta_urls);
      }
      first = false;
    }
    if (isSetLoad_counters()) {
      if (!first) sb.append(", ");
      sb.append("load_counters:");
      if (this.load_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.load_counters);
      }
      first = false;
    }
    if (isSetTracking_url()) {
      if (!first) sb.append(", ");
      sb.append("tracking_url:");
      if (this.tracking_url == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_url);
      }
      first = false;
    }
    if (isSetExport_files()) {
      if (!first) sb.append(", ");
      sb.append("export_files:");
      if (this.export_files == null) {
        sb.append("null");
      } else {
        sb.append(this.export_files);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (status != null) {
      status.validate();
    }
    if (profile != null) {
      profile.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportExecStatusParamsStandardSchemeFactory implements SchemeFactory {
    public TReportExecStatusParamsStandardScheme getScheme() {
      return new TReportExecStatusParamsStandardScheme();
    }
  }

  private static class TReportExecStatusParamsStandardScheme extends StandardScheme<TReportExecStatusParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = com.baidu.palo.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.baidu.palo.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.baidu.palo.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.done = iprot.readBool();
              struct.setDoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new com.baidu.palo.thrift.TRuntimeProfileTree();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.error_log = new ArrayList<String>(_list100.size);
                String _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = iprot.readString();
                  struct.error_log.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setError_logIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELTA_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list103 = iprot.readListBegin();
                struct.delta_urls = new ArrayList<String>(_list103.size);
                String _elem104;
                for (int _i105 = 0; _i105 < _list103.size; ++_i105)
                {
                  _elem104 = iprot.readString();
                  struct.delta_urls.add(_elem104);
                }
                iprot.readListEnd();
              }
              struct.setDelta_urlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAD_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                struct.load_counters = new HashMap<String,String>(2*_map106.size);
                String _key107;
                String _val108;
                for (int _i109 = 0; _i109 < _map106.size; ++_i109)
                {
                  _key107 = iprot.readString();
                  _val108 = iprot.readString();
                  struct.load_counters.put(_key107, _val108);
                }
                iprot.readMapEnd();
              }
              struct.setLoad_countersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTracking_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXPORT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.export_files = new ArrayList<String>(_list110.size);
                String _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = iprot.readString();
                  struct.export_files.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setExport_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        if (struct.isSetQuery_id()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        if (struct.isSetFragment_instance_id()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
          struct.fragment_instance_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDone()) {
        oprot.writeFieldBegin(DONE_FIELD_DESC);
        oprot.writeBool(struct.done);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        if (struct.isSetProfile()) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_log != null) {
        if (struct.isSetError_log()) {
          oprot.writeFieldBegin(ERROR_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_log.size()));
            for (String _iter113 : struct.error_log)
            {
              oprot.writeString(_iter113);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.delta_urls != null) {
        if (struct.isSetDelta_urls()) {
          oprot.writeFieldBegin(DELTA_URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.delta_urls.size()));
            for (String _iter114 : struct.delta_urls)
            {
              oprot.writeString(_iter114);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_counters != null) {
        if (struct.isSetLoad_counters()) {
          oprot.writeFieldBegin(LOAD_COUNTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.load_counters.size()));
            for (Map.Entry<String, String> _iter115 : struct.load_counters.entrySet())
            {
              oprot.writeString(_iter115.getKey());
              oprot.writeString(_iter115.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_url != null) {
        if (struct.isSetTracking_url()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.tracking_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.export_files != null) {
        if (struct.isSetExport_files()) {
          oprot.writeFieldBegin(EXPORT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.export_files.size()));
            for (String _iter116 : struct.export_files)
            {
              oprot.writeString(_iter116);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportExecStatusParamsTupleSchemeFactory implements SchemeFactory {
    public TReportExecStatusParamsTupleScheme getScheme() {
      return new TReportExecStatusParamsTupleScheme();
    }
  }

  private static class TReportExecStatusParamsTupleScheme extends TupleScheme<TReportExecStatusParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetQuery_id()) {
        optionals.set(0);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(1);
      }
      if (struct.isSetFragment_instance_id()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetDone()) {
        optionals.set(4);
      }
      if (struct.isSetProfile()) {
        optionals.set(5);
      }
      if (struct.isSetError_log()) {
        optionals.set(6);
      }
      if (struct.isSetDelta_urls()) {
        optionals.set(7);
      }
      if (struct.isSetLoad_counters()) {
        optionals.set(8);
      }
      if (struct.isSetTracking_url()) {
        optionals.set(9);
      }
      if (struct.isSetExport_files()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetQuery_id()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetFragment_instance_id()) {
        struct.fragment_instance_id.write(oprot);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetDone()) {
        oprot.writeBool(struct.done);
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetError_log()) {
        {
          oprot.writeI32(struct.error_log.size());
          for (String _iter117 : struct.error_log)
          {
            oprot.writeString(_iter117);
          }
        }
      }
      if (struct.isSetDelta_urls()) {
        {
          oprot.writeI32(struct.delta_urls.size());
          for (String _iter118 : struct.delta_urls)
          {
            oprot.writeString(_iter118);
          }
        }
      }
      if (struct.isSetLoad_counters()) {
        {
          oprot.writeI32(struct.load_counters.size());
          for (Map.Entry<String, String> _iter119 : struct.load_counters.entrySet())
          {
            oprot.writeString(_iter119.getKey());
            oprot.writeString(_iter119.getValue());
          }
        }
      }
      if (struct.isSetTracking_url()) {
        oprot.writeString(struct.tracking_url);
      }
      if (struct.isSetExport_files()) {
        {
          oprot.writeI32(struct.export_files.size());
          for (String _iter120 : struct.export_files)
          {
            oprot.writeString(_iter120);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = com.baidu.palo.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.query_id = new com.baidu.palo.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId();
        struct.fragment_instance_id.read(iprot);
        struct.setFragment_instance_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = new com.baidu.palo.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.done = iprot.readBool();
        struct.setDoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.profile = new com.baidu.palo.thrift.TRuntimeProfileTree();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.error_log = new ArrayList<String>(_list121.size);
          String _elem122;
          for (int _i123 = 0; _i123 < _list121.size; ++_i123)
          {
            _elem122 = iprot.readString();
            struct.error_log.add(_elem122);
          }
        }
        struct.setError_logIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.delta_urls = new ArrayList<String>(_list124.size);
          String _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = iprot.readString();
            struct.delta_urls.add(_elem125);
          }
        }
        struct.setDelta_urlsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map127 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.load_counters = new HashMap<String,String>(2*_map127.size);
          String _key128;
          String _val129;
          for (int _i130 = 0; _i130 < _map127.size; ++_i130)
          {
            _key128 = iprot.readString();
            _val129 = iprot.readString();
            struct.load_counters.put(_key128, _val129);
          }
        }
        struct.setLoad_countersIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tracking_url = iprot.readString();
        struct.setTracking_urlIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.export_files = new ArrayList<String>(_list131.size);
          String _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = iprot.readString();
            struct.export_files.add(_elem132);
          }
        }
        struct.setExport_filesIsSet(true);
      }
    }
  }

}

