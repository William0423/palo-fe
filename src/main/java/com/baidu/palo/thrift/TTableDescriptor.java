/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TTableDescriptor implements org.apache.thrift.TBase<TTableDescriptor, TTableDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TTableDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableDescriptor");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("numCols", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_CLUSTERING_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClusteringCols", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MYSQL_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mysqlTable", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField OLAP_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("olapTable", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SCHEMA_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaTable", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField KUDU_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("kuduTable", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField BROKER_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("BrokerTable", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableDescriptorTupleSchemeFactory());
  }

  public long id; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TTableType
   */
  public com.baidu.palo.thrift.TTableType tableType; // required
  public int numCols; // required
  public int numClusteringCols; // required
  public String tableName; // required
  public String dbName; // required
  public TMySQLTable mysqlTable; // optional
  public TOlapTable olapTable; // optional
  public TSchemaTable schemaTable; // optional
  public TKuduTable kuduTable; // optional
  public TBrokerTable BrokerTable; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see com.baidu.palo.thrift.TTableType
     */
    TABLE_TYPE((short)2, "tableType"),
    NUM_COLS((short)3, "numCols"),
    NUM_CLUSTERING_COLS((short)4, "numClusteringCols"),
    TABLE_NAME((short)7, "tableName"),
    DB_NAME((short)8, "dbName"),
    MYSQL_TABLE((short)10, "mysqlTable"),
    OLAP_TABLE((short)11, "olapTable"),
    SCHEMA_TABLE((short)12, "schemaTable"),
    KUDU_TABLE((short)13, "kuduTable"),
    BROKER_TABLE((short)14, "BrokerTable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TABLE_TYPE
          return TABLE_TYPE;
        case 3: // NUM_COLS
          return NUM_COLS;
        case 4: // NUM_CLUSTERING_COLS
          return NUM_CLUSTERING_COLS;
        case 7: // TABLE_NAME
          return TABLE_NAME;
        case 8: // DB_NAME
          return DB_NAME;
        case 10: // MYSQL_TABLE
          return MYSQL_TABLE;
        case 11: // OLAP_TABLE
          return OLAP_TABLE;
        case 12: // SCHEMA_TABLE
          return SCHEMA_TABLE;
        case 13: // KUDU_TABLE
          return KUDU_TABLE;
        case 14: // BROKER_TABLE
          return BROKER_TABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NUMCOLS_ISSET_ID = 1;
  private static final int __NUMCLUSTERINGCOLS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MYSQL_TABLE,_Fields.OLAP_TABLE,_Fields.SCHEMA_TABLE,_Fields.KUDU_TABLE,_Fields.BROKER_TABLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTableId")));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tableType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TTableType.class)));
    tmpMap.put(_Fields.NUM_COLS, new org.apache.thrift.meta_data.FieldMetaData("numCols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_CLUSTERING_COLS, new org.apache.thrift.meta_data.FieldMetaData("numClusteringCols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MYSQL_TABLE, new org.apache.thrift.meta_data.FieldMetaData("mysqlTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMySQLTable.class)));
    tmpMap.put(_Fields.OLAP_TABLE, new org.apache.thrift.meta_data.FieldMetaData("olapTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTable.class)));
    tmpMap.put(_Fields.SCHEMA_TABLE, new org.apache.thrift.meta_data.FieldMetaData("schemaTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchemaTable.class)));
    tmpMap.put(_Fields.KUDU_TABLE, new org.apache.thrift.meta_data.FieldMetaData("kuduTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKuduTable.class)));
    tmpMap.put(_Fields.BROKER_TABLE, new org.apache.thrift.meta_data.FieldMetaData("BrokerTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBrokerTable.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableDescriptor.class, metaDataMap);
  }

  public TTableDescriptor() {
  }

  public TTableDescriptor(
    long id,
    com.baidu.palo.thrift.TTableType tableType,
    int numCols,
    int numClusteringCols,
    String tableName,
    String dbName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.tableType = tableType;
    this.numCols = numCols;
    setNumColsIsSet(true);
    this.numClusteringCols = numClusteringCols;
    setNumClusteringColsIsSet(true);
    this.tableName = tableName;
    this.dbName = dbName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableDescriptor(TTableDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTableType()) {
      this.tableType = other.tableType;
    }
    this.numCols = other.numCols;
    this.numClusteringCols = other.numClusteringCols;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetMysqlTable()) {
      this.mysqlTable = new TMySQLTable(other.mysqlTable);
    }
    if (other.isSetOlapTable()) {
      this.olapTable = new TOlapTable(other.olapTable);
    }
    if (other.isSetSchemaTable()) {
      this.schemaTable = new TSchemaTable(other.schemaTable);
    }
    if (other.isSetKuduTable()) {
      this.kuduTable = new TKuduTable(other.kuduTable);
    }
    if (other.isSetBrokerTable()) {
      this.BrokerTable = new TBrokerTable(other.BrokerTable);
    }
  }

  public TTableDescriptor deepCopy() {
    return new TTableDescriptor(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.tableType = null;
    setNumColsIsSet(false);
    this.numCols = 0;
    setNumClusteringColsIsSet(false);
    this.numClusteringCols = 0;
    this.tableName = null;
    this.dbName = null;
    this.mysqlTable = null;
    this.olapTable = null;
    this.schemaTable = null;
    this.kuduTable = null;
    this.BrokerTable = null;
  }

  public long getId() {
    return this.id;
  }

  public TTableDescriptor setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TTableType
   */
  public com.baidu.palo.thrift.TTableType getTableType() {
    return this.tableType;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TTableType
   */
  public TTableDescriptor setTableType(com.baidu.palo.thrift.TTableType tableType) {
    this.tableType = tableType;
    return this;
  }

  public void unsetTableType() {
    this.tableType = null;
  }

  /** Returns true if field tableType is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.tableType != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.tableType = null;
    }
  }

  public int getNumCols() {
    return this.numCols;
  }

  public TTableDescriptor setNumCols(int numCols) {
    this.numCols = numCols;
    setNumColsIsSet(true);
    return this;
  }

  public void unsetNumCols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMCOLS_ISSET_ID);
  }

  /** Returns true if field numCols is set (has been assigned a value) and false otherwise */
  public boolean isSetNumCols() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMCOLS_ISSET_ID);
  }

  public void setNumColsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMCOLS_ISSET_ID, value);
  }

  public int getNumClusteringCols() {
    return this.numClusteringCols;
  }

  public TTableDescriptor setNumClusteringCols(int numClusteringCols) {
    this.numClusteringCols = numClusteringCols;
    setNumClusteringColsIsSet(true);
    return this;
  }

  public void unsetNumClusteringCols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMCLUSTERINGCOLS_ISSET_ID);
  }

  /** Returns true if field numClusteringCols is set (has been assigned a value) and false otherwise */
  public boolean isSetNumClusteringCols() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMCLUSTERINGCOLS_ISSET_ID);
  }

  public void setNumClusteringColsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMCLUSTERINGCOLS_ISSET_ID, value);
  }

  public String getTableName() {
    return this.tableName;
  }

  public TTableDescriptor setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getDbName() {
    return this.dbName;
  }

  public TTableDescriptor setDbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  public TMySQLTable getMysqlTable() {
    return this.mysqlTable;
  }

  public TTableDescriptor setMysqlTable(TMySQLTable mysqlTable) {
    this.mysqlTable = mysqlTable;
    return this;
  }

  public void unsetMysqlTable() {
    this.mysqlTable = null;
  }

  /** Returns true if field mysqlTable is set (has been assigned a value) and false otherwise */
  public boolean isSetMysqlTable() {
    return this.mysqlTable != null;
  }

  public void setMysqlTableIsSet(boolean value) {
    if (!value) {
      this.mysqlTable = null;
    }
  }

  public TOlapTable getOlapTable() {
    return this.olapTable;
  }

  public TTableDescriptor setOlapTable(TOlapTable olapTable) {
    this.olapTable = olapTable;
    return this;
  }

  public void unsetOlapTable() {
    this.olapTable = null;
  }

  /** Returns true if field olapTable is set (has been assigned a value) and false otherwise */
  public boolean isSetOlapTable() {
    return this.olapTable != null;
  }

  public void setOlapTableIsSet(boolean value) {
    if (!value) {
      this.olapTable = null;
    }
  }

  public TSchemaTable getSchemaTable() {
    return this.schemaTable;
  }

  public TTableDescriptor setSchemaTable(TSchemaTable schemaTable) {
    this.schemaTable = schemaTable;
    return this;
  }

  public void unsetSchemaTable() {
    this.schemaTable = null;
  }

  /** Returns true if field schemaTable is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaTable() {
    return this.schemaTable != null;
  }

  public void setSchemaTableIsSet(boolean value) {
    if (!value) {
      this.schemaTable = null;
    }
  }

  public TKuduTable getKuduTable() {
    return this.kuduTable;
  }

  public TTableDescriptor setKuduTable(TKuduTable kuduTable) {
    this.kuduTable = kuduTable;
    return this;
  }

  public void unsetKuduTable() {
    this.kuduTable = null;
  }

  /** Returns true if field kuduTable is set (has been assigned a value) and false otherwise */
  public boolean isSetKuduTable() {
    return this.kuduTable != null;
  }

  public void setKuduTableIsSet(boolean value) {
    if (!value) {
      this.kuduTable = null;
    }
  }

  public TBrokerTable getBrokerTable() {
    return this.BrokerTable;
  }

  public TTableDescriptor setBrokerTable(TBrokerTable BrokerTable) {
    this.BrokerTable = BrokerTable;
    return this;
  }

  public void unsetBrokerTable() {
    this.BrokerTable = null;
  }

  /** Returns true if field BrokerTable is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerTable() {
    return this.BrokerTable != null;
  }

  public void setBrokerTableIsSet(boolean value) {
    if (!value) {
      this.BrokerTable = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((com.baidu.palo.thrift.TTableType)value);
      }
      break;

    case NUM_COLS:
      if (value == null) {
        unsetNumCols();
      } else {
        setNumCols((Integer)value);
      }
      break;

    case NUM_CLUSTERING_COLS:
      if (value == null) {
        unsetNumClusteringCols();
      } else {
        setNumClusteringCols((Integer)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((String)value);
      }
      break;

    case MYSQL_TABLE:
      if (value == null) {
        unsetMysqlTable();
      } else {
        setMysqlTable((TMySQLTable)value);
      }
      break;

    case OLAP_TABLE:
      if (value == null) {
        unsetOlapTable();
      } else {
        setOlapTable((TOlapTable)value);
      }
      break;

    case SCHEMA_TABLE:
      if (value == null) {
        unsetSchemaTable();
      } else {
        setSchemaTable((TSchemaTable)value);
      }
      break;

    case KUDU_TABLE:
      if (value == null) {
        unsetKuduTable();
      } else {
        setKuduTable((TKuduTable)value);
      }
      break;

    case BROKER_TABLE:
      if (value == null) {
        unsetBrokerTable();
      } else {
        setBrokerTable((TBrokerTable)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TABLE_TYPE:
      return getTableType();

    case NUM_COLS:
      return getNumCols();

    case NUM_CLUSTERING_COLS:
      return getNumClusteringCols();

    case TABLE_NAME:
      return getTableName();

    case DB_NAME:
      return getDbName();

    case MYSQL_TABLE:
      return getMysqlTable();

    case OLAP_TABLE:
      return getOlapTable();

    case SCHEMA_TABLE:
      return getSchemaTable();

    case KUDU_TABLE:
      return getKuduTable();

    case BROKER_TABLE:
      return getBrokerTable();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TABLE_TYPE:
      return isSetTableType();
    case NUM_COLS:
      return isSetNumCols();
    case NUM_CLUSTERING_COLS:
      return isSetNumClusteringCols();
    case TABLE_NAME:
      return isSetTableName();
    case DB_NAME:
      return isSetDbName();
    case MYSQL_TABLE:
      return isSetMysqlTable();
    case OLAP_TABLE:
      return isSetOlapTable();
    case SCHEMA_TABLE:
      return isSetSchemaTable();
    case KUDU_TABLE:
      return isSetKuduTable();
    case BROKER_TABLE:
      return isSetBrokerTable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableDescriptor)
      return this.equals((TTableDescriptor)that);
    return false;
  }

  public boolean equals(TTableDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_tableType = true && this.isSetTableType();
    boolean that_present_tableType = true && that.isSetTableType();
    if (this_present_tableType || that_present_tableType) {
      if (!(this_present_tableType && that_present_tableType))
        return false;
      if (!this.tableType.equals(that.tableType))
        return false;
    }

    boolean this_present_numCols = true;
    boolean that_present_numCols = true;
    if (this_present_numCols || that_present_numCols) {
      if (!(this_present_numCols && that_present_numCols))
        return false;
      if (this.numCols != that.numCols)
        return false;
    }

    boolean this_present_numClusteringCols = true;
    boolean that_present_numClusteringCols = true;
    if (this_present_numClusteringCols || that_present_numClusteringCols) {
      if (!(this_present_numClusteringCols && that_present_numClusteringCols))
        return false;
      if (this.numClusteringCols != that.numClusteringCols)
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_mysqlTable = true && this.isSetMysqlTable();
    boolean that_present_mysqlTable = true && that.isSetMysqlTable();
    if (this_present_mysqlTable || that_present_mysqlTable) {
      if (!(this_present_mysqlTable && that_present_mysqlTable))
        return false;
      if (!this.mysqlTable.equals(that.mysqlTable))
        return false;
    }

    boolean this_present_olapTable = true && this.isSetOlapTable();
    boolean that_present_olapTable = true && that.isSetOlapTable();
    if (this_present_olapTable || that_present_olapTable) {
      if (!(this_present_olapTable && that_present_olapTable))
        return false;
      if (!this.olapTable.equals(that.olapTable))
        return false;
    }

    boolean this_present_schemaTable = true && this.isSetSchemaTable();
    boolean that_present_schemaTable = true && that.isSetSchemaTable();
    if (this_present_schemaTable || that_present_schemaTable) {
      if (!(this_present_schemaTable && that_present_schemaTable))
        return false;
      if (!this.schemaTable.equals(that.schemaTable))
        return false;
    }

    boolean this_present_kuduTable = true && this.isSetKuduTable();
    boolean that_present_kuduTable = true && that.isSetKuduTable();
    if (this_present_kuduTable || that_present_kuduTable) {
      if (!(this_present_kuduTable && that_present_kuduTable))
        return false;
      if (!this.kuduTable.equals(that.kuduTable))
        return false;
    }

    boolean this_present_BrokerTable = true && this.isSetBrokerTable();
    boolean that_present_BrokerTable = true && that.isSetBrokerTable();
    if (this_present_BrokerTable || that_present_BrokerTable) {
      if (!(this_present_BrokerTable && that_present_BrokerTable))
        return false;
      if (!this.BrokerTable.equals(that.BrokerTable))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_tableType = true && (isSetTableType());
    list.add(present_tableType);
    if (present_tableType)
      list.add(tableType.getValue());

    boolean present_numCols = true;
    list.add(present_numCols);
    if (present_numCols)
      list.add(numCols);

    boolean present_numClusteringCols = true;
    list.add(present_numClusteringCols);
    if (present_numClusteringCols)
      list.add(numClusteringCols);

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_dbName = true && (isSetDbName());
    list.add(present_dbName);
    if (present_dbName)
      list.add(dbName);

    boolean present_mysqlTable = true && (isSetMysqlTable());
    list.add(present_mysqlTable);
    if (present_mysqlTable)
      list.add(mysqlTable);

    boolean present_olapTable = true && (isSetOlapTable());
    list.add(present_olapTable);
    if (present_olapTable)
      list.add(olapTable);

    boolean present_schemaTable = true && (isSetSchemaTable());
    list.add(present_schemaTable);
    if (present_schemaTable)
      list.add(schemaTable);

    boolean present_kuduTable = true && (isSetKuduTable());
    list.add(present_kuduTable);
    if (present_kuduTable)
      list.add(kuduTable);

    boolean present_BrokerTable = true && (isSetBrokerTable());
    list.add(present_BrokerTable);
    if (present_BrokerTable)
      list.add(BrokerTable);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTableDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableType()).compareTo(other.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableType, other.tableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumCols()).compareTo(other.isSetNumCols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumCols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCols, other.numCols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumClusteringCols()).compareTo(other.isSetNumClusteringCols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumClusteringCols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClusteringCols, other.numClusteringCols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMysqlTable()).compareTo(other.isSetMysqlTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysqlTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysqlTable, other.mysqlTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOlapTable()).compareTo(other.isSetOlapTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOlapTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.olapTable, other.olapTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchemaTable()).compareTo(other.isSetSchemaTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaTable, other.schemaTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKuduTable()).compareTo(other.isSetKuduTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKuduTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kuduTable, other.kuduTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerTable()).compareTo(other.isSetBrokerTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BrokerTable, other.BrokerTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableDescriptor(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableType:");
    if (this.tableType == null) {
      sb.append("null");
    } else {
      sb.append(this.tableType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numCols:");
    sb.append(this.numCols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numClusteringCols:");
    sb.append(this.numClusteringCols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (isSetMysqlTable()) {
      if (!first) sb.append(", ");
      sb.append("mysqlTable:");
      if (this.mysqlTable == null) {
        sb.append("null");
      } else {
        sb.append(this.mysqlTable);
      }
      first = false;
    }
    if (isSetOlapTable()) {
      if (!first) sb.append(", ");
      sb.append("olapTable:");
      if (this.olapTable == null) {
        sb.append("null");
      } else {
        sb.append(this.olapTable);
      }
      first = false;
    }
    if (isSetSchemaTable()) {
      if (!first) sb.append(", ");
      sb.append("schemaTable:");
      if (this.schemaTable == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaTable);
      }
      first = false;
    }
    if (isSetKuduTable()) {
      if (!first) sb.append(", ");
      sb.append("kuduTable:");
      if (this.kuduTable == null) {
        sb.append("null");
      } else {
        sb.append(this.kuduTable);
      }
      first = false;
    }
    if (isSetBrokerTable()) {
      if (!first) sb.append(", ");
      sb.append("BrokerTable:");
      if (this.BrokerTable == null) {
        sb.append("null");
      } else {
        sb.append(this.BrokerTable);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (tableType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numCols' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numClusteringCols' because it's a primitive and you chose the non-beans generator.
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    if (dbName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (mysqlTable != null) {
      mysqlTable.validate();
    }
    if (olapTable != null) {
      olapTable.validate();
    }
    if (schemaTable != null) {
      schemaTable.validate();
    }
    if (kuduTable != null) {
      kuduTable.validate();
    }
    if (BrokerTable != null) {
      BrokerTable.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableDescriptorStandardSchemeFactory implements SchemeFactory {
    public TTableDescriptorStandardScheme getScheme() {
      return new TTableDescriptorStandardScheme();
    }
  }

  private static class TTableDescriptorStandardScheme extends StandardScheme<TTableDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tableType = com.baidu.palo.thrift.TTableType.findByValue(iprot.readI32());
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numCols = iprot.readI32();
              struct.setNumColsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_CLUSTERING_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numClusteringCols = iprot.readI32();
              struct.setNumClusteringColsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MYSQL_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mysqlTable = new TMySQLTable();
              struct.mysqlTable.read(iprot);
              struct.setMysqlTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OLAP_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.olapTable = new TOlapTable();
              struct.olapTable.read(iprot);
              struct.setOlapTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SCHEMA_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schemaTable = new TSchemaTable();
              struct.schemaTable.read(iprot);
              struct.setSchemaTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // KUDU_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.kuduTable = new TKuduTable();
              struct.kuduTable.read(iprot);
              struct.setKuduTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BROKER_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BrokerTable = new TBrokerTable();
              struct.BrokerTable.read(iprot);
              struct.setBrokerTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumCols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numCols' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumClusteringCols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numClusteringCols' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.tableType != null) {
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.tableType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_COLS_FIELD_DESC);
      oprot.writeI32(struct.numCols);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_CLUSTERING_COLS_FIELD_DESC);
      oprot.writeI32(struct.numClusteringCols);
      oprot.writeFieldEnd();
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.mysqlTable != null) {
        if (struct.isSetMysqlTable()) {
          oprot.writeFieldBegin(MYSQL_TABLE_FIELD_DESC);
          struct.mysqlTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.olapTable != null) {
        if (struct.isSetOlapTable()) {
          oprot.writeFieldBegin(OLAP_TABLE_FIELD_DESC);
          struct.olapTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schemaTable != null) {
        if (struct.isSetSchemaTable()) {
          oprot.writeFieldBegin(SCHEMA_TABLE_FIELD_DESC);
          struct.schemaTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kuduTable != null) {
        if (struct.isSetKuduTable()) {
          oprot.writeFieldBegin(KUDU_TABLE_FIELD_DESC);
          struct.kuduTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.BrokerTable != null) {
        if (struct.isSetBrokerTable()) {
          oprot.writeFieldBegin(BROKER_TABLE_FIELD_DESC);
          struct.BrokerTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableDescriptorTupleSchemeFactory implements SchemeFactory {
    public TTableDescriptorTupleScheme getScheme() {
      return new TTableDescriptorTupleScheme();
    }
  }

  private static class TTableDescriptorTupleScheme extends TupleScheme<TTableDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI32(struct.tableType.getValue());
      oprot.writeI32(struct.numCols);
      oprot.writeI32(struct.numClusteringCols);
      oprot.writeString(struct.tableName);
      oprot.writeString(struct.dbName);
      BitSet optionals = new BitSet();
      if (struct.isSetMysqlTable()) {
        optionals.set(0);
      }
      if (struct.isSetOlapTable()) {
        optionals.set(1);
      }
      if (struct.isSetSchemaTable()) {
        optionals.set(2);
      }
      if (struct.isSetKuduTable()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerTable()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMysqlTable()) {
        struct.mysqlTable.write(oprot);
      }
      if (struct.isSetOlapTable()) {
        struct.olapTable.write(oprot);
      }
      if (struct.isSetSchemaTable()) {
        struct.schemaTable.write(oprot);
      }
      if (struct.isSetKuduTable()) {
        struct.kuduTable.write(oprot);
      }
      if (struct.isSetBrokerTable()) {
        struct.BrokerTable.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.tableType = com.baidu.palo.thrift.TTableType.findByValue(iprot.readI32());
      struct.setTableTypeIsSet(true);
      struct.numCols = iprot.readI32();
      struct.setNumColsIsSet(true);
      struct.numClusteringCols = iprot.readI32();
      struct.setNumClusteringColsIsSet(true);
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.mysqlTable = new TMySQLTable();
        struct.mysqlTable.read(iprot);
        struct.setMysqlTableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.olapTable = new TOlapTable();
        struct.olapTable.read(iprot);
        struct.setOlapTableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schemaTable = new TSchemaTable();
        struct.schemaTable.read(iprot);
        struct.setSchemaTableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.kuduTable = new TKuduTable();
        struct.kuduTable.read(iprot);
        struct.setKuduTableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.BrokerTable = new TBrokerTable();
        struct.BrokerTable.read(iprot);
        struct.setBrokerTableIsSet(true);
      }
    }
  }

}

