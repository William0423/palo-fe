/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TExecStreaming implements org.apache.thrift.TBase<TExecStreaming, TExecStreaming._Fields>, java.io.Serializable, Cloneable, Comparable<TExecStreaming> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecStreaming");

  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("row_tuples", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NULLABLE_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable_tuples", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SPLIT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("split_sink", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecStreamingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecStreamingTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TDescriptorTable desc_tbl; // required
  public List<Integer> row_tuples; // required
  public List<Boolean> nullable_tuples; // required
  public com.baidu.palo.thrift.TDataSplitSink split_sink; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESC_TBL((short)1, "desc_tbl"),
    ROW_TUPLES((short)2, "row_tuples"),
    NULLABLE_TUPLES((short)3, "nullable_tuples"),
    SPLIT_SINK((short)4, "split_sink");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESC_TBL
          return DESC_TBL;
        case 2: // ROW_TUPLES
          return ROW_TUPLES;
        case 3: // NULLABLE_TUPLES
          return NULLABLE_TUPLES;
        case 4: // SPLIT_SINK
          return SPLIT_SINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.NULLABLE_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("nullable_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SPLIT_SINK, new org.apache.thrift.meta_data.FieldMetaData("split_sink", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TDataSplitSink.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecStreaming.class, metaDataMap);
  }

  public TExecStreaming() {
  }

  public TExecStreaming(
    com.baidu.palo.thrift.TDescriptorTable desc_tbl,
    List<Integer> row_tuples,
    List<Boolean> nullable_tuples,
    com.baidu.palo.thrift.TDataSplitSink split_sink)
  {
    this();
    this.desc_tbl = desc_tbl;
    this.row_tuples = row_tuples;
    this.nullable_tuples = nullable_tuples;
    this.split_sink = split_sink;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecStreaming(TExecStreaming other) {
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetRow_tuples()) {
      List<Integer> __this__row_tuples = new ArrayList<Integer>(other.row_tuples.size());
      for (Integer other_element : other.row_tuples) {
        __this__row_tuples.add(other_element);
      }
      this.row_tuples = __this__row_tuples;
    }
    if (other.isSetNullable_tuples()) {
      List<Boolean> __this__nullable_tuples = new ArrayList<Boolean>(other.nullable_tuples);
      this.nullable_tuples = __this__nullable_tuples;
    }
    if (other.isSetSplit_sink()) {
      this.split_sink = new com.baidu.palo.thrift.TDataSplitSink(other.split_sink);
    }
  }

  public TExecStreaming deepCopy() {
    return new TExecStreaming(this);
  }

  @Override
  public void clear() {
    this.desc_tbl = null;
    this.row_tuples = null;
    this.nullable_tuples = null;
    this.split_sink = null;
  }

  public com.baidu.palo.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecStreaming setDesc_tbl(com.baidu.palo.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public int getRow_tuplesSize() {
    return (this.row_tuples == null) ? 0 : this.row_tuples.size();
  }

  public java.util.Iterator<Integer> getRow_tuplesIterator() {
    return (this.row_tuples == null) ? null : this.row_tuples.iterator();
  }

  public void addToRow_tuples(int elem) {
    if (this.row_tuples == null) {
      this.row_tuples = new ArrayList<Integer>();
    }
    this.row_tuples.add(elem);
  }

  public List<Integer> getRow_tuples() {
    return this.row_tuples;
  }

  public TExecStreaming setRow_tuples(List<Integer> row_tuples) {
    this.row_tuples = row_tuples;
    return this;
  }

  public void unsetRow_tuples() {
    this.row_tuples = null;
  }

  /** Returns true if field row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_tuples() {
    return this.row_tuples != null;
  }

  public void setRow_tuplesIsSet(boolean value) {
    if (!value) {
      this.row_tuples = null;
    }
  }

  public int getNullable_tuplesSize() {
    return (this.nullable_tuples == null) ? 0 : this.nullable_tuples.size();
  }

  public java.util.Iterator<Boolean> getNullable_tuplesIterator() {
    return (this.nullable_tuples == null) ? null : this.nullable_tuples.iterator();
  }

  public void addToNullable_tuples(boolean elem) {
    if (this.nullable_tuples == null) {
      this.nullable_tuples = new ArrayList<Boolean>();
    }
    this.nullable_tuples.add(elem);
  }

  public List<Boolean> getNullable_tuples() {
    return this.nullable_tuples;
  }

  public TExecStreaming setNullable_tuples(List<Boolean> nullable_tuples) {
    this.nullable_tuples = nullable_tuples;
    return this;
  }

  public void unsetNullable_tuples() {
    this.nullable_tuples = null;
  }

  /** Returns true if field nullable_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable_tuples() {
    return this.nullable_tuples != null;
  }

  public void setNullable_tuplesIsSet(boolean value) {
    if (!value) {
      this.nullable_tuples = null;
    }
  }

  public com.baidu.palo.thrift.TDataSplitSink getSplit_sink() {
    return this.split_sink;
  }

  public TExecStreaming setSplit_sink(com.baidu.palo.thrift.TDataSplitSink split_sink) {
    this.split_sink = split_sink;
    return this;
  }

  public void unsetSplit_sink() {
    this.split_sink = null;
  }

  /** Returns true if field split_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_sink() {
    return this.split_sink != null;
  }

  public void setSplit_sinkIsSet(boolean value) {
    if (!value) {
      this.split_sink = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.baidu.palo.thrift.TDescriptorTable)value);
      }
      break;

    case ROW_TUPLES:
      if (value == null) {
        unsetRow_tuples();
      } else {
        setRow_tuples((List<Integer>)value);
      }
      break;

    case NULLABLE_TUPLES:
      if (value == null) {
        unsetNullable_tuples();
      } else {
        setNullable_tuples((List<Boolean>)value);
      }
      break;

    case SPLIT_SINK:
      if (value == null) {
        unsetSplit_sink();
      } else {
        setSplit_sink((com.baidu.palo.thrift.TDataSplitSink)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESC_TBL:
      return getDesc_tbl();

    case ROW_TUPLES:
      return getRow_tuples();

    case NULLABLE_TUPLES:
      return getNullable_tuples();

    case SPLIT_SINK:
      return getSplit_sink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESC_TBL:
      return isSetDesc_tbl();
    case ROW_TUPLES:
      return isSetRow_tuples();
    case NULLABLE_TUPLES:
      return isSetNullable_tuples();
    case SPLIT_SINK:
      return isSetSplit_sink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecStreaming)
      return this.equals((TExecStreaming)that);
    return false;
  }

  public boolean equals(TExecStreaming that) {
    if (that == null)
      return false;

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_row_tuples = true && this.isSetRow_tuples();
    boolean that_present_row_tuples = true && that.isSetRow_tuples();
    if (this_present_row_tuples || that_present_row_tuples) {
      if (!(this_present_row_tuples && that_present_row_tuples))
        return false;
      if (!this.row_tuples.equals(that.row_tuples))
        return false;
    }

    boolean this_present_nullable_tuples = true && this.isSetNullable_tuples();
    boolean that_present_nullable_tuples = true && that.isSetNullable_tuples();
    if (this_present_nullable_tuples || that_present_nullable_tuples) {
      if (!(this_present_nullable_tuples && that_present_nullable_tuples))
        return false;
      if (!this.nullable_tuples.equals(that.nullable_tuples))
        return false;
    }

    boolean this_present_split_sink = true && this.isSetSplit_sink();
    boolean that_present_split_sink = true && that.isSetSplit_sink();
    if (this_present_split_sink || that_present_split_sink) {
      if (!(this_present_split_sink && that_present_split_sink))
        return false;
      if (!this.split_sink.equals(that.split_sink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_desc_tbl = true && (isSetDesc_tbl());
    list.add(present_desc_tbl);
    if (present_desc_tbl)
      list.add(desc_tbl);

    boolean present_row_tuples = true && (isSetRow_tuples());
    list.add(present_row_tuples);
    if (present_row_tuples)
      list.add(row_tuples);

    boolean present_nullable_tuples = true && (isSetNullable_tuples());
    list.add(present_nullable_tuples);
    if (present_nullable_tuples)
      list.add(nullable_tuples);

    boolean present_split_sink = true && (isSetSplit_sink());
    list.add(present_split_sink);
    if (present_split_sink)
      list.add(split_sink);

    return list.hashCode();
  }

  @Override
  public int compareTo(TExecStreaming other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDesc_tbl()).compareTo(other.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_tuples()).compareTo(other.isSetRow_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_tuples, other.row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullable_tuples()).compareTo(other.isSetNullable_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable_tuples, other.nullable_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplit_sink()).compareTo(other.isSetSplit_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_sink, other.split_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecStreaming(");
    boolean first = true;

    sb.append("desc_tbl:");
    if (this.desc_tbl == null) {
      sb.append("null");
    } else {
      sb.append(this.desc_tbl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_tuples:");
    if (this.row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.row_tuples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullable_tuples:");
    if (this.nullable_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.nullable_tuples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("split_sink:");
    if (this.split_sink == null) {
      sb.append("null");
    } else {
      sb.append(this.split_sink);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (desc_tbl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'desc_tbl' was not present! Struct: " + toString());
    }
    if (row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_tuples' was not present! Struct: " + toString());
    }
    if (nullable_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullable_tuples' was not present! Struct: " + toString());
    }
    if (split_sink == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'split_sink' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (split_sink != null) {
      split_sink.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecStreamingStandardSchemeFactory implements SchemeFactory {
    public TExecStreamingStandardScheme getScheme() {
      return new TExecStreamingStandardScheme();
    }
  }

  private static class TExecStreamingStandardScheme extends StandardScheme<TExecStreaming> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecStreaming struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.row_tuples = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.row_tuples.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRow_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NULLABLE_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.nullable_tuples = new ArrayList<Boolean>(_list3.size);
                boolean _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readBool();
                  struct.nullable_tuples.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setNullable_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPLIT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.split_sink = new com.baidu.palo.thrift.TDataSplitSink();
              struct.split_sink.read(iprot);
              struct.setSplit_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecStreaming struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.desc_tbl != null) {
        oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
        struct.desc_tbl.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.row_tuples != null) {
        oprot.writeFieldBegin(ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_tuples.size()));
          for (int _iter6 : struct.row_tuples)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nullable_tuples != null) {
        oprot.writeFieldBegin(NULLABLE_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nullable_tuples.size()));
          for (boolean _iter7 : struct.nullable_tuples)
          {
            oprot.writeBool(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.split_sink != null) {
        oprot.writeFieldBegin(SPLIT_SINK_FIELD_DESC);
        struct.split_sink.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecStreamingTupleSchemeFactory implements SchemeFactory {
    public TExecStreamingTupleScheme getScheme() {
      return new TExecStreamingTupleScheme();
    }
  }

  private static class TExecStreamingTupleScheme extends TupleScheme<TExecStreaming> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecStreaming struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.desc_tbl.write(oprot);
      {
        oprot.writeI32(struct.row_tuples.size());
        for (int _iter8 : struct.row_tuples)
        {
          oprot.writeI32(_iter8);
        }
      }
      {
        oprot.writeI32(struct.nullable_tuples.size());
        for (boolean _iter9 : struct.nullable_tuples)
        {
          oprot.writeBool(_iter9);
        }
      }
      struct.split_sink.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecStreaming struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable();
      struct.desc_tbl.read(iprot);
      struct.setDesc_tblIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.row_tuples = new ArrayList<Integer>(_list10.size);
        int _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = iprot.readI32();
          struct.row_tuples.add(_elem11);
        }
      }
      struct.setRow_tuplesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.nullable_tuples = new ArrayList<Boolean>(_list13.size);
        boolean _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readBool();
          struct.nullable_tuples.add(_elem14);
        }
      }
      struct.setNullable_tuplesIsSet(true);
      struct.split_sink = new com.baidu.palo.thrift.TDataSplitSink();
      struct.split_sink.read(iprot);
      struct.setSplit_sinkIsSet(true);
    }
  }

}

