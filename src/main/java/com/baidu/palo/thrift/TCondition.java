/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TCondition implements org.apache.thrift.TBase<TCondition, TCondition._Fields>, java.io.Serializable, Cloneable, Comparable<TCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCondition");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONDITION_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("condition_op", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONDITION_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("condition_values", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TConditionTupleSchemeFactory());
  }

  public String column_name; // required
  public String condition_op; // required
  public List<String> condition_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "column_name"),
    CONDITION_OP((short)2, "condition_op"),
    CONDITION_VALUES((short)3, "condition_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // CONDITION_OP
          return CONDITION_OP;
        case 3: // CONDITION_VALUES
          return CONDITION_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITION_OP, new org.apache.thrift.meta_data.FieldMetaData("condition_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITION_VALUES, new org.apache.thrift.meta_data.FieldMetaData("condition_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCondition.class, metaDataMap);
  }

  public TCondition() {
  }

  public TCondition(
    String column_name,
    String condition_op,
    List<String> condition_values)
  {
    this();
    this.column_name = column_name;
    this.condition_op = condition_op;
    this.condition_values = condition_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCondition(TCondition other) {
    if (other.isSetColumn_name()) {
      this.column_name = other.column_name;
    }
    if (other.isSetCondition_op()) {
      this.condition_op = other.condition_op;
    }
    if (other.isSetCondition_values()) {
      List<String> __this__condition_values = new ArrayList<String>(other.condition_values);
      this.condition_values = __this__condition_values;
    }
  }

  public TCondition deepCopy() {
    return new TCondition(this);
  }

  @Override
  public void clear() {
    this.column_name = null;
    this.condition_op = null;
    this.condition_values = null;
  }

  public String getColumn_name() {
    return this.column_name;
  }

  public TCondition setColumn_name(String column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  public String getCondition_op() {
    return this.condition_op;
  }

  public TCondition setCondition_op(String condition_op) {
    this.condition_op = condition_op;
    return this;
  }

  public void unsetCondition_op() {
    this.condition_op = null;
  }

  /** Returns true if field condition_op is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition_op() {
    return this.condition_op != null;
  }

  public void setCondition_opIsSet(boolean value) {
    if (!value) {
      this.condition_op = null;
    }
  }

  public int getCondition_valuesSize() {
    return (this.condition_values == null) ? 0 : this.condition_values.size();
  }

  public java.util.Iterator<String> getCondition_valuesIterator() {
    return (this.condition_values == null) ? null : this.condition_values.iterator();
  }

  public void addToCondition_values(String elem) {
    if (this.condition_values == null) {
      this.condition_values = new ArrayList<String>();
    }
    this.condition_values.add(elem);
  }

  public List<String> getCondition_values() {
    return this.condition_values;
  }

  public TCondition setCondition_values(List<String> condition_values) {
    this.condition_values = condition_values;
    return this;
  }

  public void unsetCondition_values() {
    this.condition_values = null;
  }

  /** Returns true if field condition_values is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition_values() {
    return this.condition_values != null;
  }

  public void setCondition_valuesIsSet(boolean value) {
    if (!value) {
      this.condition_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((String)value);
      }
      break;

    case CONDITION_OP:
      if (value == null) {
        unsetCondition_op();
      } else {
        setCondition_op((String)value);
      }
      break;

    case CONDITION_VALUES:
      if (value == null) {
        unsetCondition_values();
      } else {
        setCondition_values((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumn_name();

    case CONDITION_OP:
      return getCondition_op();

    case CONDITION_VALUES:
      return getCondition_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumn_name();
    case CONDITION_OP:
      return isSetCondition_op();
    case CONDITION_VALUES:
      return isSetCondition_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCondition)
      return this.equals((TCondition)that);
    return false;
  }

  public boolean equals(TCondition that) {
    if (that == null)
      return false;

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!this.column_name.equals(that.column_name))
        return false;
    }

    boolean this_present_condition_op = true && this.isSetCondition_op();
    boolean that_present_condition_op = true && that.isSetCondition_op();
    if (this_present_condition_op || that_present_condition_op) {
      if (!(this_present_condition_op && that_present_condition_op))
        return false;
      if (!this.condition_op.equals(that.condition_op))
        return false;
    }

    boolean this_present_condition_values = true && this.isSetCondition_values();
    boolean that_present_condition_values = true && that.isSetCondition_values();
    if (this_present_condition_values || that_present_condition_values) {
      if (!(this_present_condition_values && that_present_condition_values))
        return false;
      if (!this.condition_values.equals(that.condition_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_column_name = true && (isSetColumn_name());
    list.add(present_column_name);
    if (present_column_name)
      list.add(column_name);

    boolean present_condition_op = true && (isSetCondition_op());
    list.add(present_condition_op);
    if (present_condition_op)
      list.add(condition_op);

    boolean present_condition_values = true && (isSetCondition_values());
    list.add(present_condition_values);
    if (present_condition_values)
      list.add(condition_values);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(other.isSetColumn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition_op()).compareTo(other.isSetCondition_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition_op, other.condition_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition_values()).compareTo(other.isSetCondition_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition_values, other.condition_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCondition(");
    boolean first = true;

    sb.append("column_name:");
    if (this.column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("condition_op:");
    if (this.condition_op == null) {
      sb.append("null");
    } else {
      sb.append(this.condition_op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("condition_values:");
    if (this.condition_values == null) {
      sb.append("null");
    } else {
      sb.append(this.condition_values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
    }
    if (condition_op == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'condition_op' was not present! Struct: " + toString());
    }
    if (condition_values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'condition_values' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TConditionStandardSchemeFactory implements SchemeFactory {
    public TConditionStandardScheme getScheme() {
      return new TConditionStandardScheme();
    }
  }

  private static class TConditionStandardScheme extends StandardScheme<TCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_name = iprot.readString();
              struct.setColumn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONDITION_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.condition_op = iprot.readString();
              struct.setCondition_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONDITION_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.condition_values = new ArrayList<String>(_list52.size);
                String _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = iprot.readString();
                  struct.condition_values.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setCondition_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_name != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.column_name);
        oprot.writeFieldEnd();
      }
      if (struct.condition_op != null) {
        oprot.writeFieldBegin(CONDITION_OP_FIELD_DESC);
        oprot.writeString(struct.condition_op);
        oprot.writeFieldEnd();
      }
      if (struct.condition_values != null) {
        oprot.writeFieldBegin(CONDITION_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.condition_values.size()));
          for (String _iter55 : struct.condition_values)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TConditionTupleSchemeFactory implements SchemeFactory {
    public TConditionTupleScheme getScheme() {
      return new TConditionTupleScheme();
    }
  }

  private static class TConditionTupleScheme extends TupleScheme<TCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.column_name);
      oprot.writeString(struct.condition_op);
      {
        oprot.writeI32(struct.condition_values.size());
        for (String _iter56 : struct.condition_values)
        {
          oprot.writeString(_iter56);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.column_name = iprot.readString();
      struct.setColumn_nameIsSet(true);
      struct.condition_op = iprot.readString();
      struct.setCondition_opIsSet(true);
      {
        org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.condition_values = new ArrayList<String>(_list57.size);
        String _elem58;
        for (int _i59 = 0; _i59 < _list57.size; ++_i59)
        {
          _elem58 = iprot.readString();
          struct.condition_values.add(_elem58);
        }
      }
      struct.setCondition_valuesIsSet(true);
    }
  }

}

