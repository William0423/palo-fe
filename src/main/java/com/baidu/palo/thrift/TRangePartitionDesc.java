/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TRangePartitionDesc implements org.apache.thrift.TBase<TRangePartitionDesc, TRangePartitionDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TRangePartitionDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRangePartitionDesc");

  private static final org.apache.thrift.protocol.TField COLUMN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("column_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("range_value", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRangePartitionDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRangePartitionDescTupleSchemeFactory());
  }

  public List<String> column_list; // required
  public List<TRangeValue> range_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_LIST((short)1, "column_list"),
    RANGE_VALUE((short)2, "range_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_LIST
          return COLUMN_LIST;
        case 2: // RANGE_VALUE
          return RANGE_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RANGE_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_LIST, new org.apache.thrift.meta_data.FieldMetaData("column_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RANGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("range_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRangeValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRangePartitionDesc.class, metaDataMap);
  }

  public TRangePartitionDesc() {
  }

  public TRangePartitionDesc(
    List<String> column_list)
  {
    this();
    this.column_list = column_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRangePartitionDesc(TRangePartitionDesc other) {
    if (other.isSetColumn_list()) {
      List<String> __this__column_list = new ArrayList<String>(other.column_list);
      this.column_list = __this__column_list;
    }
    if (other.isSetRange_value()) {
      List<TRangeValue> __this__range_value = new ArrayList<TRangeValue>(other.range_value.size());
      for (TRangeValue other_element : other.range_value) {
        __this__range_value.add(new TRangeValue(other_element));
      }
      this.range_value = __this__range_value;
    }
  }

  public TRangePartitionDesc deepCopy() {
    return new TRangePartitionDesc(this);
  }

  @Override
  public void clear() {
    this.column_list = null;
    this.range_value = null;
  }

  public int getColumn_listSize() {
    return (this.column_list == null) ? 0 : this.column_list.size();
  }

  public java.util.Iterator<String> getColumn_listIterator() {
    return (this.column_list == null) ? null : this.column_list.iterator();
  }

  public void addToColumn_list(String elem) {
    if (this.column_list == null) {
      this.column_list = new ArrayList<String>();
    }
    this.column_list.add(elem);
  }

  public List<String> getColumn_list() {
    return this.column_list;
  }

  public TRangePartitionDesc setColumn_list(List<String> column_list) {
    this.column_list = column_list;
    return this;
  }

  public void unsetColumn_list() {
    this.column_list = null;
  }

  /** Returns true if field column_list is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_list() {
    return this.column_list != null;
  }

  public void setColumn_listIsSet(boolean value) {
    if (!value) {
      this.column_list = null;
    }
  }

  public int getRange_valueSize() {
    return (this.range_value == null) ? 0 : this.range_value.size();
  }

  public java.util.Iterator<TRangeValue> getRange_valueIterator() {
    return (this.range_value == null) ? null : this.range_value.iterator();
  }

  public void addToRange_value(TRangeValue elem) {
    if (this.range_value == null) {
      this.range_value = new ArrayList<TRangeValue>();
    }
    this.range_value.add(elem);
  }

  public List<TRangeValue> getRange_value() {
    return this.range_value;
  }

  public TRangePartitionDesc setRange_value(List<TRangeValue> range_value) {
    this.range_value = range_value;
    return this;
  }

  public void unsetRange_value() {
    this.range_value = null;
  }

  /** Returns true if field range_value is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_value() {
    return this.range_value != null;
  }

  public void setRange_valueIsSet(boolean value) {
    if (!value) {
      this.range_value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_LIST:
      if (value == null) {
        unsetColumn_list();
      } else {
        setColumn_list((List<String>)value);
      }
      break;

    case RANGE_VALUE:
      if (value == null) {
        unsetRange_value();
      } else {
        setRange_value((List<TRangeValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_LIST:
      return getColumn_list();

    case RANGE_VALUE:
      return getRange_value();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_LIST:
      return isSetColumn_list();
    case RANGE_VALUE:
      return isSetRange_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRangePartitionDesc)
      return this.equals((TRangePartitionDesc)that);
    return false;
  }

  public boolean equals(TRangePartitionDesc that) {
    if (that == null)
      return false;

    boolean this_present_column_list = true && this.isSetColumn_list();
    boolean that_present_column_list = true && that.isSetColumn_list();
    if (this_present_column_list || that_present_column_list) {
      if (!(this_present_column_list && that_present_column_list))
        return false;
      if (!this.column_list.equals(that.column_list))
        return false;
    }

    boolean this_present_range_value = true && this.isSetRange_value();
    boolean that_present_range_value = true && that.isSetRange_value();
    if (this_present_range_value || that_present_range_value) {
      if (!(this_present_range_value && that_present_range_value))
        return false;
      if (!this.range_value.equals(that.range_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_column_list = true && (isSetColumn_list());
    list.add(present_column_list);
    if (present_column_list)
      list.add(column_list);

    boolean present_range_value = true && (isSetRange_value());
    list.add(present_range_value);
    if (present_range_value)
      list.add(range_value);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRangePartitionDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumn_list()).compareTo(other.isSetColumn_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_list, other.column_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange_value()).compareTo(other.isSetRange_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_value, other.range_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRangePartitionDesc(");
    boolean first = true;

    sb.append("column_list:");
    if (this.column_list == null) {
      sb.append("null");
    } else {
      sb.append(this.column_list);
    }
    first = false;
    if (isSetRange_value()) {
      if (!first) sb.append(", ");
      sb.append("range_value:");
      if (this.range_value == null) {
        sb.append("null");
      } else {
        sb.append(this.range_value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (column_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRangePartitionDescStandardSchemeFactory implements SchemeFactory {
    public TRangePartitionDescStandardScheme getScheme() {
      return new TRangePartitionDescStandardScheme();
    }
  }

  private static class TRangePartitionDescStandardScheme extends StandardScheme<TRangePartitionDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.column_list = new ArrayList<String>(_list16.size);
                String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.column_list.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setColumn_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.range_value = new ArrayList<TRangeValue>(_list19.size);
                TRangeValue _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new TRangeValue();
                  _elem20.read(iprot);
                  struct.range_value.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setRange_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_list != null) {
        oprot.writeFieldBegin(COLUMN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.column_list.size()));
          for (String _iter22 : struct.column_list)
          {
            oprot.writeString(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.range_value != null) {
        if (struct.isSetRange_value()) {
          oprot.writeFieldBegin(RANGE_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.range_value.size()));
            for (TRangeValue _iter23 : struct.range_value)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRangePartitionDescTupleSchemeFactory implements SchemeFactory {
    public TRangePartitionDescTupleScheme getScheme() {
      return new TRangePartitionDescTupleScheme();
    }
  }

  private static class TRangePartitionDescTupleScheme extends TupleScheme<TRangePartitionDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.column_list.size());
        for (String _iter24 : struct.column_list)
        {
          oprot.writeString(_iter24);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRange_value()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRange_value()) {
        {
          oprot.writeI32(struct.range_value.size());
          for (TRangeValue _iter25 : struct.range_value)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.column_list = new ArrayList<String>(_list26.size);
        String _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = iprot.readString();
          struct.column_list.add(_elem27);
        }
      }
      struct.setColumn_listIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.range_value = new ArrayList<TRangeValue>(_list29.size);
          TRangeValue _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TRangeValue();
            _elem30.read(iprot);
            struct.range_value.add(_elem30);
          }
        }
        struct.setRange_valueIsSet(true);
      }
    }
  }

}

