/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TCreateRollupParams implements org.apache.thrift.TBase<TCreateRollupParams, TCreateRollupParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateRollupParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateRollupParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_names", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ROLLUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_desc", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateRollupParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateRollupParamsTupleSchemeFactory());
  }

  public TTableName table_name; // required
  public List<String> column_names; // required
  public String rollup_name; // optional
  public TPartitionDesc partition_desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    COLUMN_NAMES((short)2, "column_names"),
    ROLLUP_NAME((short)3, "rollup_name"),
    PARTITION_DESC((short)4, "partition_desc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // COLUMN_NAMES
          return COLUMN_NAMES;
        case 3: // ROLLUP_NAME
          return ROLLUP_NAME;
        case 4: // PARTITION_DESC
          return PARTITION_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ROLLUP_NAME,_Fields.PARTITION_DESC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableName.class)));
    tmpMap.put(_Fields.COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("column_names", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ROLLUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("rollup_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_DESC, new org.apache.thrift.meta_data.FieldMetaData("partition_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionDesc.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateRollupParams.class, metaDataMap);
  }

  public TCreateRollupParams() {
  }

  public TCreateRollupParams(
    TTableName table_name,
    List<String> column_names)
  {
    this();
    this.table_name = table_name;
    this.column_names = column_names;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateRollupParams(TCreateRollupParams other) {
    if (other.isSetTable_name()) {
      this.table_name = new TTableName(other.table_name);
    }
    if (other.isSetColumn_names()) {
      List<String> __this__column_names = new ArrayList<String>(other.column_names);
      this.column_names = __this__column_names;
    }
    if (other.isSetRollup_name()) {
      this.rollup_name = other.rollup_name;
    }
    if (other.isSetPartition_desc()) {
      this.partition_desc = new TPartitionDesc(other.partition_desc);
    }
  }

  public TCreateRollupParams deepCopy() {
    return new TCreateRollupParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.column_names = null;
    this.rollup_name = null;
    this.partition_desc = null;
  }

  public TTableName getTable_name() {
    return this.table_name;
  }

  public TCreateRollupParams setTable_name(TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getColumn_namesSize() {
    return (this.column_names == null) ? 0 : this.column_names.size();
  }

  public java.util.Iterator<String> getColumn_namesIterator() {
    return (this.column_names == null) ? null : this.column_names.iterator();
  }

  public void addToColumn_names(String elem) {
    if (this.column_names == null) {
      this.column_names = new ArrayList<String>();
    }
    this.column_names.add(elem);
  }

  public List<String> getColumn_names() {
    return this.column_names;
  }

  public TCreateRollupParams setColumn_names(List<String> column_names) {
    this.column_names = column_names;
    return this;
  }

  public void unsetColumn_names() {
    this.column_names = null;
  }

  /** Returns true if field column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_names() {
    return this.column_names != null;
  }

  public void setColumn_namesIsSet(boolean value) {
    if (!value) {
      this.column_names = null;
    }
  }

  public String getRollup_name() {
    return this.rollup_name;
  }

  public TCreateRollupParams setRollup_name(String rollup_name) {
    this.rollup_name = rollup_name;
    return this;
  }

  public void unsetRollup_name() {
    this.rollup_name = null;
  }

  /** Returns true if field rollup_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_name() {
    return this.rollup_name != null;
  }

  public void setRollup_nameIsSet(boolean value) {
    if (!value) {
      this.rollup_name = null;
    }
  }

  public TPartitionDesc getPartition_desc() {
    return this.partition_desc;
  }

  public TCreateRollupParams setPartition_desc(TPartitionDesc partition_desc) {
    this.partition_desc = partition_desc;
    return this;
  }

  public void unsetPartition_desc() {
    this.partition_desc = null;
  }

  /** Returns true if field partition_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_desc() {
    return this.partition_desc != null;
  }

  public void setPartition_descIsSet(boolean value) {
    if (!value) {
      this.partition_desc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((TTableName)value);
      }
      break;

    case COLUMN_NAMES:
      if (value == null) {
        unsetColumn_names();
      } else {
        setColumn_names((List<String>)value);
      }
      break;

    case ROLLUP_NAME:
      if (value == null) {
        unsetRollup_name();
      } else {
        setRollup_name((String)value);
      }
      break;

    case PARTITION_DESC:
      if (value == null) {
        unsetPartition_desc();
      } else {
        setPartition_desc((TPartitionDesc)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case COLUMN_NAMES:
      return getColumn_names();

    case ROLLUP_NAME:
      return getRollup_name();

    case PARTITION_DESC:
      return getPartition_desc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case COLUMN_NAMES:
      return isSetColumn_names();
    case ROLLUP_NAME:
      return isSetRollup_name();
    case PARTITION_DESC:
      return isSetPartition_desc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateRollupParams)
      return this.equals((TCreateRollupParams)that);
    return false;
  }

  public boolean equals(TCreateRollupParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_column_names = true && this.isSetColumn_names();
    boolean that_present_column_names = true && that.isSetColumn_names();
    if (this_present_column_names || that_present_column_names) {
      if (!(this_present_column_names && that_present_column_names))
        return false;
      if (!this.column_names.equals(that.column_names))
        return false;
    }

    boolean this_present_rollup_name = true && this.isSetRollup_name();
    boolean that_present_rollup_name = true && that.isSetRollup_name();
    if (this_present_rollup_name || that_present_rollup_name) {
      if (!(this_present_rollup_name && that_present_rollup_name))
        return false;
      if (!this.rollup_name.equals(that.rollup_name))
        return false;
    }

    boolean this_present_partition_desc = true && this.isSetPartition_desc();
    boolean that_present_partition_desc = true && that.isSetPartition_desc();
    if (this_present_partition_desc || that_present_partition_desc) {
      if (!(this_present_partition_desc && that_present_partition_desc))
        return false;
      if (!this.partition_desc.equals(that.partition_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_column_names = true && (isSetColumn_names());
    list.add(present_column_names);
    if (present_column_names)
      list.add(column_names);

    boolean present_rollup_name = true && (isSetRollup_name());
    list.add(present_rollup_name);
    if (present_rollup_name)
      list.add(rollup_name);

    boolean present_partition_desc = true && (isSetPartition_desc());
    list.add(present_partition_desc);
    if (present_partition_desc)
      list.add(partition_desc);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCreateRollupParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(other.isSetColumn_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_names, other.column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRollup_name()).compareTo(other.isSetRollup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_name, other.rollup_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_desc()).compareTo(other.isSetPartition_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_desc, other.partition_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateRollupParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_names:");
    if (this.column_names == null) {
      sb.append("null");
    } else {
      sb.append(this.column_names);
    }
    first = false;
    if (isSetRollup_name()) {
      if (!first) sb.append(", ");
      sb.append("rollup_name:");
      if (this.rollup_name == null) {
        sb.append("null");
      } else {
        sb.append(this.rollup_name);
      }
      first = false;
    }
    if (isSetPartition_desc()) {
      if (!first) sb.append(", ");
      sb.append("partition_desc:");
      if (this.partition_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    if (column_names == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_names' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (partition_desc != null) {
      partition_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateRollupParamsStandardSchemeFactory implements SchemeFactory {
    public TCreateRollupParamsStandardScheme getScheme() {
      return new TCreateRollupParamsStandardScheme();
    }
  }

  private static class TCreateRollupParamsStandardScheme extends StandardScheme<TCreateRollupParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateRollupParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.column_names = new ArrayList<String>(_list42.size);
                String _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readString();
                  struct.column_names.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setColumn_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLLUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rollup_name = iprot.readString();
              struct.setRollup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition_desc = new TPartitionDesc();
              struct.partition_desc.read(iprot);
              struct.setPartition_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateRollupParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.column_names != null) {
        oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.column_names.size()));
          for (String _iter45 : struct.column_names)
          {
            oprot.writeString(_iter45);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rollup_name != null) {
        if (struct.isSetRollup_name()) {
          oprot.writeFieldBegin(ROLLUP_NAME_FIELD_DESC);
          oprot.writeString(struct.rollup_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_desc != null) {
        if (struct.isSetPartition_desc()) {
          oprot.writeFieldBegin(PARTITION_DESC_FIELD_DESC);
          struct.partition_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateRollupParamsTupleSchemeFactory implements SchemeFactory {
    public TCreateRollupParamsTupleScheme getScheme() {
      return new TCreateRollupParamsTupleScheme();
    }
  }

  private static class TCreateRollupParamsTupleScheme extends TupleScheme<TCreateRollupParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateRollupParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      {
        oprot.writeI32(struct.column_names.size());
        for (String _iter46 : struct.column_names)
        {
          oprot.writeString(_iter46);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRollup_name()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_desc()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRollup_name()) {
        oprot.writeString(struct.rollup_name);
      }
      if (struct.isSetPartition_desc()) {
        struct.partition_desc.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateRollupParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.column_names = new ArrayList<String>(_list47.size);
        String _elem48;
        for (int _i49 = 0; _i49 < _list47.size; ++_i49)
        {
          _elem48 = iprot.readString();
          struct.column_names.add(_elem48);
        }
      }
      struct.setColumn_namesIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.rollup_name = iprot.readString();
        struct.setRollup_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition_desc = new TPartitionDesc();
        struct.partition_desc.read(iprot);
        struct.setPartition_descIsSet(true);
      }
    }
  }

}

