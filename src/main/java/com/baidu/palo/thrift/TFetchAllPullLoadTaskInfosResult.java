/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class TFetchAllPullLoadTaskInfosResult implements org.apache.thrift.TBase<TFetchAllPullLoadTaskInfosResult, TFetchAllPullLoadTaskInfosResult._Fields>, java.io.Serializable, Cloneable, Comparable<TFetchAllPullLoadTaskInfosResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFetchAllPullLoadTaskInfosResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_infos", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFetchAllPullLoadTaskInfosResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFetchAllPullLoadTaskInfosResultTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TStatus status; // required
  public List<TPullLoadTaskInfo> task_infos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    TASK_INFOS((short)2, "task_infos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // TASK_INFOS
          return TASK_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
    tmpMap.put(_Fields.TASK_INFOS, new org.apache.thrift.meta_data.FieldMetaData("task_infos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPullLoadTaskInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFetchAllPullLoadTaskInfosResult.class, metaDataMap);
  }

  public TFetchAllPullLoadTaskInfosResult() {
  }

  public TFetchAllPullLoadTaskInfosResult(
    com.baidu.palo.thrift.TStatus status,
    List<TPullLoadTaskInfo> task_infos)
  {
    this();
    this.status = status;
    this.task_infos = task_infos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFetchAllPullLoadTaskInfosResult(TFetchAllPullLoadTaskInfosResult other) {
    if (other.isSetStatus()) {
      this.status = new com.baidu.palo.thrift.TStatus(other.status);
    }
    if (other.isSetTask_infos()) {
      List<TPullLoadTaskInfo> __this__task_infos = new ArrayList<TPullLoadTaskInfo>(other.task_infos.size());
      for (TPullLoadTaskInfo other_element : other.task_infos) {
        __this__task_infos.add(new TPullLoadTaskInfo(other_element));
      }
      this.task_infos = __this__task_infos;
    }
  }

  public TFetchAllPullLoadTaskInfosResult deepCopy() {
    return new TFetchAllPullLoadTaskInfosResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.task_infos = null;
  }

  public com.baidu.palo.thrift.TStatus getStatus() {
    return this.status;
  }

  public TFetchAllPullLoadTaskInfosResult setStatus(com.baidu.palo.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getTask_infosSize() {
    return (this.task_infos == null) ? 0 : this.task_infos.size();
  }

  public java.util.Iterator<TPullLoadTaskInfo> getTask_infosIterator() {
    return (this.task_infos == null) ? null : this.task_infos.iterator();
  }

  public void addToTask_infos(TPullLoadTaskInfo elem) {
    if (this.task_infos == null) {
      this.task_infos = new ArrayList<TPullLoadTaskInfo>();
    }
    this.task_infos.add(elem);
  }

  public List<TPullLoadTaskInfo> getTask_infos() {
    return this.task_infos;
  }

  public TFetchAllPullLoadTaskInfosResult setTask_infos(List<TPullLoadTaskInfo> task_infos) {
    this.task_infos = task_infos;
    return this;
  }

  public void unsetTask_infos() {
    this.task_infos = null;
  }

  /** Returns true if field task_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_infos() {
    return this.task_infos != null;
  }

  public void setTask_infosIsSet(boolean value) {
    if (!value) {
      this.task_infos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.baidu.palo.thrift.TStatus)value);
      }
      break;

    case TASK_INFOS:
      if (value == null) {
        unsetTask_infos();
      } else {
        setTask_infos((List<TPullLoadTaskInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case TASK_INFOS:
      return getTask_infos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case TASK_INFOS:
      return isSetTask_infos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFetchAllPullLoadTaskInfosResult)
      return this.equals((TFetchAllPullLoadTaskInfosResult)that);
    return false;
  }

  public boolean equals(TFetchAllPullLoadTaskInfosResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_task_infos = true && this.isSetTask_infos();
    boolean that_present_task_infos = true && that.isSetTask_infos();
    if (this_present_task_infos || that_present_task_infos) {
      if (!(this_present_task_infos && that_present_task_infos))
        return false;
      if (!this.task_infos.equals(that.task_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_task_infos = true && (isSetTask_infos());
    list.add(present_task_infos);
    if (present_task_infos)
      list.add(task_infos);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFetchAllPullLoadTaskInfosResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTask_infos()).compareTo(other.isSetTask_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_infos, other.task_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFetchAllPullLoadTaskInfosResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_infos:");
    if (this.task_infos == null) {
      sb.append("null");
    } else {
      sb.append(this.task_infos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (task_infos == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_infos' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFetchAllPullLoadTaskInfosResultStandardSchemeFactory implements SchemeFactory {
    public TFetchAllPullLoadTaskInfosResultStandardScheme getScheme() {
      return new TFetchAllPullLoadTaskInfosResultStandardScheme();
    }
  }

  private static class TFetchAllPullLoadTaskInfosResultStandardScheme extends StandardScheme<TFetchAllPullLoadTaskInfosResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFetchAllPullLoadTaskInfosResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.baidu.palo.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.task_infos = new ArrayList<TPullLoadTaskInfo>(_list48.size);
                TPullLoadTaskInfo _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new TPullLoadTaskInfo();
                  _elem49.read(iprot);
                  struct.task_infos.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setTask_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFetchAllPullLoadTaskInfosResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.task_infos != null) {
        oprot.writeFieldBegin(TASK_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.task_infos.size()));
          for (TPullLoadTaskInfo _iter51 : struct.task_infos)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFetchAllPullLoadTaskInfosResultTupleSchemeFactory implements SchemeFactory {
    public TFetchAllPullLoadTaskInfosResultTupleScheme getScheme() {
      return new TFetchAllPullLoadTaskInfosResultTupleScheme();
    }
  }

  private static class TFetchAllPullLoadTaskInfosResultTupleScheme extends TupleScheme<TFetchAllPullLoadTaskInfosResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFetchAllPullLoadTaskInfosResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.status.write(oprot);
      {
        oprot.writeI32(struct.task_infos.size());
        for (TPullLoadTaskInfo _iter52 : struct.task_infos)
        {
          _iter52.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFetchAllPullLoadTaskInfosResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = new com.baidu.palo.thrift.TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      {
        org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.task_infos = new ArrayList<TPullLoadTaskInfo>(_list53.size);
        TPullLoadTaskInfo _elem54;
        for (int _i55 = 0; _i55 < _list53.size; ++_i55)
        {
          _elem54 = new TPullLoadTaskInfo();
          _elem54.read(iprot);
          struct.task_infos.add(_elem54);
        }
      }
      struct.setTask_infosIsSet(true);
    }
  }

}

