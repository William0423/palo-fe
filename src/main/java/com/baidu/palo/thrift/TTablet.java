/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class TTablet implements org.apache.thrift.TBase<TTablet, TTablet._Fields>, java.io.Serializable, Cloneable, Comparable<TTablet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTablet");

  private static final org.apache.thrift.protocol.TField TABLET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_infos", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTabletStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTabletTupleSchemeFactory());
  }

  public List<TTabletInfo> tablet_infos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_INFOS((short)1, "tablet_infos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_INFOS
          return TABLET_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("tablet_infos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTablet.class, metaDataMap);
  }

  public TTablet() {
  }

  public TTablet(
    List<TTabletInfo> tablet_infos)
  {
    this();
    this.tablet_infos = tablet_infos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTablet(TTablet other) {
    if (other.isSetTablet_infos()) {
      List<TTabletInfo> __this__tablet_infos = new ArrayList<TTabletInfo>(other.tablet_infos.size());
      for (TTabletInfo other_element : other.tablet_infos) {
        __this__tablet_infos.add(new TTabletInfo(other_element));
      }
      this.tablet_infos = __this__tablet_infos;
    }
  }

  public TTablet deepCopy() {
    return new TTablet(this);
  }

  @Override
  public void clear() {
    this.tablet_infos = null;
  }

  public int getTablet_infosSize() {
    return (this.tablet_infos == null) ? 0 : this.tablet_infos.size();
  }

  public java.util.Iterator<TTabletInfo> getTablet_infosIterator() {
    return (this.tablet_infos == null) ? null : this.tablet_infos.iterator();
  }

  public void addToTablet_infos(TTabletInfo elem) {
    if (this.tablet_infos == null) {
      this.tablet_infos = new ArrayList<TTabletInfo>();
    }
    this.tablet_infos.add(elem);
  }

  public List<TTabletInfo> getTablet_infos() {
    return this.tablet_infos;
  }

  public TTablet setTablet_infos(List<TTabletInfo> tablet_infos) {
    this.tablet_infos = tablet_infos;
    return this;
  }

  public void unsetTablet_infos() {
    this.tablet_infos = null;
  }

  /** Returns true if field tablet_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_infos() {
    return this.tablet_infos != null;
  }

  public void setTablet_infosIsSet(boolean value) {
    if (!value) {
      this.tablet_infos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLET_INFOS:
      if (value == null) {
        unsetTablet_infos();
      } else {
        setTablet_infos((List<TTabletInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_INFOS:
      return getTablet_infos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLET_INFOS:
      return isSetTablet_infos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTablet)
      return this.equals((TTablet)that);
    return false;
  }

  public boolean equals(TTablet that) {
    if (that == null)
      return false;

    boolean this_present_tablet_infos = true && this.isSetTablet_infos();
    boolean that_present_tablet_infos = true && that.isSetTablet_infos();
    if (this_present_tablet_infos || that_present_tablet_infos) {
      if (!(this_present_tablet_infos && that_present_tablet_infos))
        return false;
      if (!this.tablet_infos.equals(that.tablet_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tablet_infos = true && (isSetTablet_infos());
    list.add(present_tablet_infos);
    if (present_tablet_infos)
      list.add(tablet_infos);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTablet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTablet_infos()).compareTo(other.isSetTablet_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_infos, other.tablet_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTablet(");
    boolean first = true;

    sb.append("tablet_infos:");
    if (this.tablet_infos == null) {
      sb.append("null");
    } else {
      sb.append(this.tablet_infos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tablet_infos == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_infos' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletStandardSchemeFactory implements SchemeFactory {
    public TTabletStandardScheme getScheme() {
      return new TTabletStandardScheme();
    }
  }

  private static class TTabletStandardScheme extends StandardScheme<TTablet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTablet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.tablet_infos = new ArrayList<TTabletInfo>(_list8.size);
                TTabletInfo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TTabletInfo();
                  _elem9.read(iprot);
                  struct.tablet_infos.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTablet_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTablet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tablet_infos != null) {
        oprot.writeFieldBegin(TABLET_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablet_infos.size()));
          for (TTabletInfo _iter11 : struct.tablet_infos)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletTupleSchemeFactory implements SchemeFactory {
    public TTabletTupleScheme getScheme() {
      return new TTabletTupleScheme();
    }
  }

  private static class TTabletTupleScheme extends TupleScheme<TTablet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTablet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.tablet_infos.size());
        for (TTabletInfo _iter12 : struct.tablet_infos)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTablet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tablet_infos = new ArrayList<TTabletInfo>(_list13.size);
        TTabletInfo _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new TTabletInfo();
          _elem14.read(iprot);
          struct.tablet_infos.add(_elem14);
        }
      }
      struct.setTablet_infosIsSet(true);
    }
  }

}

