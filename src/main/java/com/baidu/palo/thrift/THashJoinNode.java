/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class THashJoinNode implements org.apache.thrift.TBase<THashJoinNode, THashJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<THashJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THashJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EQ_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("eq_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OTHER_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("other_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PUSH_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_push_down", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ADD_PROBE_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("add_probe_filters", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THashJoinNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THashJoinNodeTupleSchemeFactory());
  }

  /**
   * 
   * @see TJoinOp
   */
  public TJoinOp join_op; // required
  public List<TEqJoinCondition> eq_join_conjuncts; // required
  public List<com.baidu.palo.thrift.TExpr> other_join_conjuncts; // optional
  public boolean is_push_down; // optional
  public boolean add_probe_filters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    EQ_JOIN_CONJUNCTS((short)2, "eq_join_conjuncts"),
    OTHER_JOIN_CONJUNCTS((short)3, "other_join_conjuncts"),
    IS_PUSH_DOWN((short)4, "is_push_down"),
    ADD_PROBE_FILTERS((short)5, "add_probe_filters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // EQ_JOIN_CONJUNCTS
          return EQ_JOIN_CONJUNCTS;
        case 3: // OTHER_JOIN_CONJUNCTS
          return OTHER_JOIN_CONJUNCTS;
        case 4: // IS_PUSH_DOWN
          return IS_PUSH_DOWN;
        case 5: // ADD_PROBE_FILTERS
          return ADD_PROBE_FILTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_PUSH_DOWN_ISSET_ID = 0;
  private static final int __ADD_PROBE_FILTERS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OTHER_JOIN_CONJUNCTS,_Fields.IS_PUSH_DOWN,_Fields.ADD_PROBE_FILTERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinOp.class)));
    tmpMap.put(_Fields.EQ_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("eq_join_conjuncts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEqJoinCondition.class))));
    tmpMap.put(_Fields.OTHER_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("other_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_PUSH_DOWN, new org.apache.thrift.meta_data.FieldMetaData("is_push_down", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADD_PROBE_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("add_probe_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THashJoinNode.class, metaDataMap);
  }

  public THashJoinNode() {
  }

  public THashJoinNode(
    TJoinOp join_op,
    List<TEqJoinCondition> eq_join_conjuncts)
  {
    this();
    this.join_op = join_op;
    this.eq_join_conjuncts = eq_join_conjuncts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THashJoinNode(THashJoinNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJoin_op()) {
      this.join_op = other.join_op;
    }
    if (other.isSetEq_join_conjuncts()) {
      List<TEqJoinCondition> __this__eq_join_conjuncts = new ArrayList<TEqJoinCondition>(other.eq_join_conjuncts.size());
      for (TEqJoinCondition other_element : other.eq_join_conjuncts) {
        __this__eq_join_conjuncts.add(new TEqJoinCondition(other_element));
      }
      this.eq_join_conjuncts = __this__eq_join_conjuncts;
    }
    if (other.isSetOther_join_conjuncts()) {
      List<com.baidu.palo.thrift.TExpr> __this__other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(other.other_join_conjuncts.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.other_join_conjuncts) {
        __this__other_join_conjuncts.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.other_join_conjuncts = __this__other_join_conjuncts;
    }
    this.is_push_down = other.is_push_down;
    this.add_probe_filters = other.add_probe_filters;
  }

  public THashJoinNode deepCopy() {
    return new THashJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.eq_join_conjuncts = null;
    this.other_join_conjuncts = null;
    setIs_push_downIsSet(false);
    this.is_push_down = false;
    setAdd_probe_filtersIsSet(false);
    this.add_probe_filters = false;
  }

  /**
   * 
   * @see TJoinOp
   */
  public TJoinOp getJoin_op() {
    return this.join_op;
  }

  /**
   * 
   * @see TJoinOp
   */
  public THashJoinNode setJoin_op(TJoinOp join_op) {
    this.join_op = join_op;
    return this;
  }

  public void unsetJoin_op() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_op() {
    return this.join_op != null;
  }

  public void setJoin_opIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getEq_join_conjunctsSize() {
    return (this.eq_join_conjuncts == null) ? 0 : this.eq_join_conjuncts.size();
  }

  public java.util.Iterator<TEqJoinCondition> getEq_join_conjunctsIterator() {
    return (this.eq_join_conjuncts == null) ? null : this.eq_join_conjuncts.iterator();
  }

  public void addToEq_join_conjuncts(TEqJoinCondition elem) {
    if (this.eq_join_conjuncts == null) {
      this.eq_join_conjuncts = new ArrayList<TEqJoinCondition>();
    }
    this.eq_join_conjuncts.add(elem);
  }

  public List<TEqJoinCondition> getEq_join_conjuncts() {
    return this.eq_join_conjuncts;
  }

  public THashJoinNode setEq_join_conjuncts(List<TEqJoinCondition> eq_join_conjuncts) {
    this.eq_join_conjuncts = eq_join_conjuncts;
    return this;
  }

  public void unsetEq_join_conjuncts() {
    this.eq_join_conjuncts = null;
  }

  /** Returns true if field eq_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetEq_join_conjuncts() {
    return this.eq_join_conjuncts != null;
  }

  public void setEq_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.eq_join_conjuncts = null;
    }
  }

  public int getOther_join_conjunctsSize() {
    return (this.other_join_conjuncts == null) ? 0 : this.other_join_conjuncts.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getOther_join_conjunctsIterator() {
    return (this.other_join_conjuncts == null) ? null : this.other_join_conjuncts.iterator();
  }

  public void addToOther_join_conjuncts(com.baidu.palo.thrift.TExpr elem) {
    if (this.other_join_conjuncts == null) {
      this.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.other_join_conjuncts.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getOther_join_conjuncts() {
    return this.other_join_conjuncts;
  }

  public THashJoinNode setOther_join_conjuncts(List<com.baidu.palo.thrift.TExpr> other_join_conjuncts) {
    this.other_join_conjuncts = other_join_conjuncts;
    return this;
  }

  public void unsetOther_join_conjuncts() {
    this.other_join_conjuncts = null;
  }

  /** Returns true if field other_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_join_conjuncts() {
    return this.other_join_conjuncts != null;
  }

  public void setOther_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.other_join_conjuncts = null;
    }
  }

  public boolean isIs_push_down() {
    return this.is_push_down;
  }

  public THashJoinNode setIs_push_down(boolean is_push_down) {
    this.is_push_down = is_push_down;
    setIs_push_downIsSet(true);
    return this;
  }

  public void unsetIs_push_down() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID);
  }

  /** Returns true if field is_push_down is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_push_down() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID);
  }

  public void setIs_push_downIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID, value);
  }

  public boolean isAdd_probe_filters() {
    return this.add_probe_filters;
  }

  public THashJoinNode setAdd_probe_filters(boolean add_probe_filters) {
    this.add_probe_filters = add_probe_filters;
    setAdd_probe_filtersIsSet(true);
    return this;
  }

  public void unsetAdd_probe_filters() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID);
  }

  /** Returns true if field add_probe_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_probe_filters() {
    return EncodingUtils.testBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID);
  }

  public void setAdd_probe_filtersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoin_op();
      } else {
        setJoin_op((TJoinOp)value);
      }
      break;

    case EQ_JOIN_CONJUNCTS:
      if (value == null) {
        unsetEq_join_conjuncts();
      } else {
        setEq_join_conjuncts((List<TEqJoinCondition>)value);
      }
      break;

    case OTHER_JOIN_CONJUNCTS:
      if (value == null) {
        unsetOther_join_conjuncts();
      } else {
        setOther_join_conjuncts((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    case IS_PUSH_DOWN:
      if (value == null) {
        unsetIs_push_down();
      } else {
        setIs_push_down((Boolean)value);
      }
      break;

    case ADD_PROBE_FILTERS:
      if (value == null) {
        unsetAdd_probe_filters();
      } else {
        setAdd_probe_filters((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoin_op();

    case EQ_JOIN_CONJUNCTS:
      return getEq_join_conjuncts();

    case OTHER_JOIN_CONJUNCTS:
      return getOther_join_conjuncts();

    case IS_PUSH_DOWN:
      return isIs_push_down();

    case ADD_PROBE_FILTERS:
      return isAdd_probe_filters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoin_op();
    case EQ_JOIN_CONJUNCTS:
      return isSetEq_join_conjuncts();
    case OTHER_JOIN_CONJUNCTS:
      return isSetOther_join_conjuncts();
    case IS_PUSH_DOWN:
      return isSetIs_push_down();
    case ADD_PROBE_FILTERS:
      return isSetAdd_probe_filters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THashJoinNode)
      return this.equals((THashJoinNode)that);
    return false;
  }

  public boolean equals(THashJoinNode that) {
    if (that == null)
      return false;

    boolean this_present_join_op = true && this.isSetJoin_op();
    boolean that_present_join_op = true && that.isSetJoin_op();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_eq_join_conjuncts = true && this.isSetEq_join_conjuncts();
    boolean that_present_eq_join_conjuncts = true && that.isSetEq_join_conjuncts();
    if (this_present_eq_join_conjuncts || that_present_eq_join_conjuncts) {
      if (!(this_present_eq_join_conjuncts && that_present_eq_join_conjuncts))
        return false;
      if (!this.eq_join_conjuncts.equals(that.eq_join_conjuncts))
        return false;
    }

    boolean this_present_other_join_conjuncts = true && this.isSetOther_join_conjuncts();
    boolean that_present_other_join_conjuncts = true && that.isSetOther_join_conjuncts();
    if (this_present_other_join_conjuncts || that_present_other_join_conjuncts) {
      if (!(this_present_other_join_conjuncts && that_present_other_join_conjuncts))
        return false;
      if (!this.other_join_conjuncts.equals(that.other_join_conjuncts))
        return false;
    }

    boolean this_present_is_push_down = true && this.isSetIs_push_down();
    boolean that_present_is_push_down = true && that.isSetIs_push_down();
    if (this_present_is_push_down || that_present_is_push_down) {
      if (!(this_present_is_push_down && that_present_is_push_down))
        return false;
      if (this.is_push_down != that.is_push_down)
        return false;
    }

    boolean this_present_add_probe_filters = true && this.isSetAdd_probe_filters();
    boolean that_present_add_probe_filters = true && that.isSetAdd_probe_filters();
    if (this_present_add_probe_filters || that_present_add_probe_filters) {
      if (!(this_present_add_probe_filters && that_present_add_probe_filters))
        return false;
      if (this.add_probe_filters != that.add_probe_filters)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_join_op = true && (isSetJoin_op());
    list.add(present_join_op);
    if (present_join_op)
      list.add(join_op.getValue());

    boolean present_eq_join_conjuncts = true && (isSetEq_join_conjuncts());
    list.add(present_eq_join_conjuncts);
    if (present_eq_join_conjuncts)
      list.add(eq_join_conjuncts);

    boolean present_other_join_conjuncts = true && (isSetOther_join_conjuncts());
    list.add(present_other_join_conjuncts);
    if (present_other_join_conjuncts)
      list.add(other_join_conjuncts);

    boolean present_is_push_down = true && (isSetIs_push_down());
    list.add(present_is_push_down);
    if (present_is_push_down)
      list.add(is_push_down);

    boolean present_add_probe_filters = true && (isSetAdd_probe_filters());
    list.add(present_add_probe_filters);
    if (present_add_probe_filters)
      list.add(add_probe_filters);

    return list.hashCode();
  }

  @Override
  public int compareTo(THashJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJoin_op()).compareTo(other.isSetJoin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEq_join_conjuncts()).compareTo(other.isSetEq_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEq_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eq_join_conjuncts, other.eq_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther_join_conjuncts()).compareTo(other.isSetOther_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_join_conjuncts, other.other_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_push_down()).compareTo(other.isSetIs_push_down());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_push_down()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_push_down, other.is_push_down);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd_probe_filters()).compareTo(other.isSetAdd_probe_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_probe_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_probe_filters, other.add_probe_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THashJoinNode(");
    boolean first = true;

    sb.append("join_op:");
    if (this.join_op == null) {
      sb.append("null");
    } else {
      sb.append(this.join_op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eq_join_conjuncts:");
    if (this.eq_join_conjuncts == null) {
      sb.append("null");
    } else {
      sb.append(this.eq_join_conjuncts);
    }
    first = false;
    if (isSetOther_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("other_join_conjuncts:");
      if (this.other_join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.other_join_conjuncts);
      }
      first = false;
    }
    if (isSetIs_push_down()) {
      if (!first) sb.append(", ");
      sb.append("is_push_down:");
      sb.append(this.is_push_down);
      first = false;
    }
    if (isSetAdd_probe_filters()) {
      if (!first) sb.append(", ");
      sb.append("add_probe_filters:");
      sb.append(this.add_probe_filters);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (join_op == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'join_op' was not present! Struct: " + toString());
    }
    if (eq_join_conjuncts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eq_join_conjuncts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THashJoinNodeStandardSchemeFactory implements SchemeFactory {
    public THashJoinNodeStandardScheme getScheme() {
      return new THashJoinNodeStandardScheme();
    }
  }

  private static class THashJoinNodeStandardScheme extends StandardScheme<THashJoinNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = com.baidu.palo.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EQ_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.eq_join_conjuncts = new ArrayList<TEqJoinCondition>(_list168.size);
                TEqJoinCondition _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = new TEqJoinCondition();
                  _elem169.read(iprot);
                  struct.eq_join_conjuncts.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setEq_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OTHER_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                struct.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(_list171.size);
                com.baidu.palo.thrift.TExpr _elem172;
                for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                {
                  _elem172 = new com.baidu.palo.thrift.TExpr();
                  _elem172.read(iprot);
                  struct.other_join_conjuncts.add(_elem172);
                }
                iprot.readListEnd();
              }
              struct.setOther_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PUSH_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_push_down = iprot.readBool();
              struct.setIs_push_downIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADD_PROBE_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.add_probe_filters = iprot.readBool();
              struct.setAdd_probe_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THashJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
        oprot.writeI32(struct.join_op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.eq_join_conjuncts != null) {
        oprot.writeFieldBegin(EQ_JOIN_CONJUNCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eq_join_conjuncts.size()));
          for (TEqJoinCondition _iter174 : struct.eq_join_conjuncts)
          {
            _iter174.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.other_join_conjuncts != null) {
        if (struct.isSetOther_join_conjuncts()) {
          oprot.writeFieldBegin(OTHER_JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.other_join_conjuncts.size()));
            for (com.baidu.palo.thrift.TExpr _iter175 : struct.other_join_conjuncts)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_push_down()) {
        oprot.writeFieldBegin(IS_PUSH_DOWN_FIELD_DESC);
        oprot.writeBool(struct.is_push_down);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdd_probe_filters()) {
        oprot.writeFieldBegin(ADD_PROBE_FILTERS_FIELD_DESC);
        oprot.writeBool(struct.add_probe_filters);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THashJoinNodeTupleSchemeFactory implements SchemeFactory {
    public THashJoinNodeTupleScheme getScheme() {
      return new THashJoinNodeTupleScheme();
    }
  }

  private static class THashJoinNodeTupleScheme extends TupleScheme<THashJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THashJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.join_op.getValue());
      {
        oprot.writeI32(struct.eq_join_conjuncts.size());
        for (TEqJoinCondition _iter176 : struct.eq_join_conjuncts)
        {
          _iter176.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetOther_join_conjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetIs_push_down()) {
        optionals.set(1);
      }
      if (struct.isSetAdd_probe_filters()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOther_join_conjuncts()) {
        {
          oprot.writeI32(struct.other_join_conjuncts.size());
          for (com.baidu.palo.thrift.TExpr _iter177 : struct.other_join_conjuncts)
          {
            _iter177.write(oprot);
          }
        }
      }
      if (struct.isSetIs_push_down()) {
        oprot.writeBool(struct.is_push_down);
      }
      if (struct.isSetAdd_probe_filters()) {
        oprot.writeBool(struct.add_probe_filters);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THashJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.join_op = com.baidu.palo.thrift.TJoinOp.findByValue(iprot.readI32());
      struct.setJoin_opIsSet(true);
      {
        org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.eq_join_conjuncts = new ArrayList<TEqJoinCondition>(_list178.size);
        TEqJoinCondition _elem179;
        for (int _i180 = 0; _i180 < _list178.size; ++_i180)
        {
          _elem179 = new TEqJoinCondition();
          _elem179.read(iprot);
          struct.eq_join_conjuncts.add(_elem179);
        }
      }
      struct.setEq_join_conjunctsIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.other_join_conjuncts = new ArrayList<com.baidu.palo.thrift.TExpr>(_list181.size);
          com.baidu.palo.thrift.TExpr _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = new com.baidu.palo.thrift.TExpr();
            _elem182.read(iprot);
            struct.other_join_conjuncts.add(_elem182);
          }
        }
        struct.setOther_join_conjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_push_down = iprot.readBool();
        struct.setIs_push_downIsSet(true);
      }
      if (incoming.get(2)) {
        struct.add_probe_filters = iprot.readBool();
        struct.setAdd_probe_filtersIsSet(true);
      }
    }
  }

}

