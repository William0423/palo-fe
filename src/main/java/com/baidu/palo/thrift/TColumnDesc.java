/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TColumnDesc implements org.apache.thrift.TBase<TColumnDesc, TColumnDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnDesc");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("columnLength", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("columnPrecision", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnScale", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnDescTupleSchemeFactory());
  }

  public String columnName; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TPrimitiveType
   */
  public com.baidu.palo.thrift.TPrimitiveType columnType; // required
  public int columnLength; // optional
  public int columnPrecision; // optional
  public int columnScale; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    /**
     * 
     * @see com.baidu.palo.thrift.TPrimitiveType
     */
    COLUMN_TYPE((short)2, "columnType"),
    COLUMN_LENGTH((short)3, "columnLength"),
    COLUMN_PRECISION((short)4, "columnPrecision"),
    COLUMN_SCALE((short)5, "columnScale");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // COLUMN_LENGTH
          return COLUMN_LENGTH;
        case 4: // COLUMN_PRECISION
          return COLUMN_PRECISION;
        case 5: // COLUMN_SCALE
          return COLUMN_SCALE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNLENGTH_ISSET_ID = 0;
  private static final int __COLUMNPRECISION_ISSET_ID = 1;
  private static final int __COLUMNSCALE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_LENGTH,_Fields.COLUMN_PRECISION,_Fields.COLUMN_SCALE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TPrimitiveType.class)));
    tmpMap.put(_Fields.COLUMN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("columnLength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("columnPrecision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_SCALE, new org.apache.thrift.meta_data.FieldMetaData("columnScale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnDesc.class, metaDataMap);
  }

  public TColumnDesc() {
  }

  public TColumnDesc(
    String columnName,
    com.baidu.palo.thrift.TPrimitiveType columnType)
  {
    this();
    this.columnName = columnName;
    this.columnType = columnType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnDesc(TColumnDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetColumnType()) {
      this.columnType = other.columnType;
    }
    this.columnLength = other.columnLength;
    this.columnPrecision = other.columnPrecision;
    this.columnScale = other.columnScale;
  }

  public TColumnDesc deepCopy() {
    return new TColumnDesc(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    this.columnType = null;
    setColumnLengthIsSet(false);
    this.columnLength = 0;
    setColumnPrecisionIsSet(false);
    this.columnPrecision = 0;
    setColumnScaleIsSet(false);
    this.columnScale = 0;
  }

  public String getColumnName() {
    return this.columnName;
  }

  public TColumnDesc setColumnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPrimitiveType
   */
  public com.baidu.palo.thrift.TPrimitiveType getColumnType() {
    return this.columnType;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPrimitiveType
   */
  public TColumnDesc setColumnType(com.baidu.palo.thrift.TPrimitiveType columnType) {
    this.columnType = columnType;
    return this;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  public int getColumnLength() {
    return this.columnLength;
  }

  public TColumnDesc setColumnLength(int columnLength) {
    this.columnLength = columnLength;
    setColumnLengthIsSet(true);
    return this;
  }

  public void unsetColumnLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  /** Returns true if field columnLength is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnLength() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  public void setColumnLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID, value);
  }

  public int getColumnPrecision() {
    return this.columnPrecision;
  }

  public TColumnDesc setColumnPrecision(int columnPrecision) {
    this.columnPrecision = columnPrecision;
    setColumnPrecisionIsSet(true);
    return this;
  }

  public void unsetColumnPrecision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  /** Returns true if field columnPrecision is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnPrecision() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  public void setColumnPrecisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID, value);
  }

  public int getColumnScale() {
    return this.columnScale;
  }

  public TColumnDesc setColumnScale(int columnScale) {
    this.columnScale = columnScale;
    setColumnScaleIsSet(true);
    return this;
  }

  public void unsetColumnScale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  /** Returns true if field columnScale is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnScale() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  public void setColumnScaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((com.baidu.palo.thrift.TPrimitiveType)value);
      }
      break;

    case COLUMN_LENGTH:
      if (value == null) {
        unsetColumnLength();
      } else {
        setColumnLength((Integer)value);
      }
      break;

    case COLUMN_PRECISION:
      if (value == null) {
        unsetColumnPrecision();
      } else {
        setColumnPrecision((Integer)value);
      }
      break;

    case COLUMN_SCALE:
      if (value == null) {
        unsetColumnScale();
      } else {
        setColumnScale((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return getColumnType();

    case COLUMN_LENGTH:
      return getColumnLength();

    case COLUMN_PRECISION:
      return getColumnPrecision();

    case COLUMN_SCALE:
      return getColumnScale();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COLUMN_LENGTH:
      return isSetColumnLength();
    case COLUMN_PRECISION:
      return isSetColumnPrecision();
    case COLUMN_SCALE:
      return isSetColumnScale();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnDesc)
      return this.equals((TColumnDesc)that);
    return false;
  }

  public boolean equals(TColumnDesc that) {
    if (that == null)
      return false;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    boolean this_present_columnLength = true && this.isSetColumnLength();
    boolean that_present_columnLength = true && that.isSetColumnLength();
    if (this_present_columnLength || that_present_columnLength) {
      if (!(this_present_columnLength && that_present_columnLength))
        return false;
      if (this.columnLength != that.columnLength)
        return false;
    }

    boolean this_present_columnPrecision = true && this.isSetColumnPrecision();
    boolean that_present_columnPrecision = true && that.isSetColumnPrecision();
    if (this_present_columnPrecision || that_present_columnPrecision) {
      if (!(this_present_columnPrecision && that_present_columnPrecision))
        return false;
      if (this.columnPrecision != that.columnPrecision)
        return false;
    }

    boolean this_present_columnScale = true && this.isSetColumnScale();
    boolean that_present_columnScale = true && that.isSetColumnScale();
    if (this_present_columnScale || that_present_columnScale) {
      if (!(this_present_columnScale && that_present_columnScale))
        return false;
      if (this.columnScale != that.columnScale)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_columnName = true && (isSetColumnName());
    list.add(present_columnName);
    if (present_columnName)
      list.add(columnName);

    boolean present_columnType = true && (isSetColumnType());
    list.add(present_columnType);
    if (present_columnType)
      list.add(columnType.getValue());

    boolean present_columnLength = true && (isSetColumnLength());
    list.add(present_columnLength);
    if (present_columnLength)
      list.add(columnLength);

    boolean present_columnPrecision = true && (isSetColumnPrecision());
    list.add(present_columnPrecision);
    if (present_columnPrecision)
      list.add(columnPrecision);

    boolean present_columnScale = true && (isSetColumnScale());
    list.add(present_columnScale);
    if (present_columnScale)
      list.add(columnScale);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumnDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnType()).compareTo(other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnLength()).compareTo(other.isSetColumnLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnLength, other.columnLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnPrecision()).compareTo(other.isSetColumnPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnPrecision, other.columnPrecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnScale()).compareTo(other.isSetColumnScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnScale, other.columnScale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumnDesc(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    if (this.columnType == null) {
      sb.append("null");
    } else {
      sb.append(this.columnType);
    }
    first = false;
    if (isSetColumnLength()) {
      if (!first) sb.append(", ");
      sb.append("columnLength:");
      sb.append(this.columnLength);
      first = false;
    }
    if (isSetColumnPrecision()) {
      if (!first) sb.append(", ");
      sb.append("columnPrecision:");
      sb.append(this.columnPrecision);
      first = false;
    }
    if (isSetColumnScale()) {
      if (!first) sb.append(", ");
      sb.append("columnScale:");
      sb.append(this.columnScale);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (columnName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnName' was not present! Struct: " + toString());
    }
    if (columnType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnDescStandardSchemeFactory implements SchemeFactory {
    public TColumnDescStandardScheme getScheme() {
      return new TColumnDescStandardScheme();
    }
  }

  private static class TColumnDescStandardScheme extends StandardScheme<TColumnDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnType = com.baidu.palo.thrift.TPrimitiveType.findByValue(iprot.readI32());
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnLength = iprot.readI32();
              struct.setColumnLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnPrecision = iprot.readI32();
              struct.setColumnPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnScale = iprot.readI32();
              struct.setColumnScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      if (struct.columnType != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.columnType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnLength()) {
        oprot.writeFieldBegin(COLUMN_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.columnLength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeFieldBegin(COLUMN_PRECISION_FIELD_DESC);
        oprot.writeI32(struct.columnPrecision);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnScale()) {
        oprot.writeFieldBegin(COLUMN_SCALE_FIELD_DESC);
        oprot.writeI32(struct.columnScale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnDescTupleSchemeFactory implements SchemeFactory {
    public TColumnDescTupleScheme getScheme() {
      return new TColumnDescTupleScheme();
    }
  }

  private static class TColumnDescTupleScheme extends TupleScheme<TColumnDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.columnName);
      oprot.writeI32(struct.columnType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetColumnLength()) {
        optionals.set(0);
      }
      if (struct.isSetColumnPrecision()) {
        optionals.set(1);
      }
      if (struct.isSetColumnScale()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetColumnLength()) {
        oprot.writeI32(struct.columnLength);
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeI32(struct.columnPrecision);
      }
      if (struct.isSetColumnScale()) {
        oprot.writeI32(struct.columnScale);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.columnName = iprot.readString();
      struct.setColumnNameIsSet(true);
      struct.columnType = com.baidu.palo.thrift.TPrimitiveType.findByValue(iprot.readI32());
      struct.setColumnTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.columnLength = iprot.readI32();
        struct.setColumnLengthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnPrecision = iprot.readI32();
        struct.setColumnPrecisionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnScale = iprot.readI32();
        struct.setColumnScaleIsSet(true);
      }
    }
  }

}

