/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class TClearRemoteFileReq implements org.apache.thrift.TBase<TClearRemoteFileReq, TClearRemoteFileReq._Fields>, java.io.Serializable, Cloneable, Comparable<TClearRemoteFileReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TClearRemoteFileReq");

  private static final org.apache.thrift.protocol.TField REMOTE_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("remote_file_path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REMOTE_SOURCE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("remote_source_properties", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TClearRemoteFileReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TClearRemoteFileReqTupleSchemeFactory());
  }

  public String remote_file_path; // required
  public Map<String,String> remote_source_properties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REMOTE_FILE_PATH((short)1, "remote_file_path"),
    REMOTE_SOURCE_PROPERTIES((short)2, "remote_source_properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REMOTE_FILE_PATH
          return REMOTE_FILE_PATH;
        case 2: // REMOTE_SOURCE_PROPERTIES
          return REMOTE_SOURCE_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REMOTE_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("remote_file_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_SOURCE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("remote_source_properties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TClearRemoteFileReq.class, metaDataMap);
  }

  public TClearRemoteFileReq() {
  }

  public TClearRemoteFileReq(
    String remote_file_path,
    Map<String,String> remote_source_properties)
  {
    this();
    this.remote_file_path = remote_file_path;
    this.remote_source_properties = remote_source_properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TClearRemoteFileReq(TClearRemoteFileReq other) {
    if (other.isSetRemote_file_path()) {
      this.remote_file_path = other.remote_file_path;
    }
    if (other.isSetRemote_source_properties()) {
      Map<String,String> __this__remote_source_properties = new HashMap<String,String>(other.remote_source_properties);
      this.remote_source_properties = __this__remote_source_properties;
    }
  }

  public TClearRemoteFileReq deepCopy() {
    return new TClearRemoteFileReq(this);
  }

  @Override
  public void clear() {
    this.remote_file_path = null;
    this.remote_source_properties = null;
  }

  public String getRemote_file_path() {
    return this.remote_file_path;
  }

  public TClearRemoteFileReq setRemote_file_path(String remote_file_path) {
    this.remote_file_path = remote_file_path;
    return this;
  }

  public void unsetRemote_file_path() {
    this.remote_file_path = null;
  }

  /** Returns true if field remote_file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote_file_path() {
    return this.remote_file_path != null;
  }

  public void setRemote_file_pathIsSet(boolean value) {
    if (!value) {
      this.remote_file_path = null;
    }
  }

  public int getRemote_source_propertiesSize() {
    return (this.remote_source_properties == null) ? 0 : this.remote_source_properties.size();
  }

  public void putToRemote_source_properties(String key, String val) {
    if (this.remote_source_properties == null) {
      this.remote_source_properties = new HashMap<String,String>();
    }
    this.remote_source_properties.put(key, val);
  }

  public Map<String,String> getRemote_source_properties() {
    return this.remote_source_properties;
  }

  public TClearRemoteFileReq setRemote_source_properties(Map<String,String> remote_source_properties) {
    this.remote_source_properties = remote_source_properties;
    return this;
  }

  public void unsetRemote_source_properties() {
    this.remote_source_properties = null;
  }

  /** Returns true if field remote_source_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote_source_properties() {
    return this.remote_source_properties != null;
  }

  public void setRemote_source_propertiesIsSet(boolean value) {
    if (!value) {
      this.remote_source_properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REMOTE_FILE_PATH:
      if (value == null) {
        unsetRemote_file_path();
      } else {
        setRemote_file_path((String)value);
      }
      break;

    case REMOTE_SOURCE_PROPERTIES:
      if (value == null) {
        unsetRemote_source_properties();
      } else {
        setRemote_source_properties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REMOTE_FILE_PATH:
      return getRemote_file_path();

    case REMOTE_SOURCE_PROPERTIES:
      return getRemote_source_properties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REMOTE_FILE_PATH:
      return isSetRemote_file_path();
    case REMOTE_SOURCE_PROPERTIES:
      return isSetRemote_source_properties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TClearRemoteFileReq)
      return this.equals((TClearRemoteFileReq)that);
    return false;
  }

  public boolean equals(TClearRemoteFileReq that) {
    if (that == null)
      return false;

    boolean this_present_remote_file_path = true && this.isSetRemote_file_path();
    boolean that_present_remote_file_path = true && that.isSetRemote_file_path();
    if (this_present_remote_file_path || that_present_remote_file_path) {
      if (!(this_present_remote_file_path && that_present_remote_file_path))
        return false;
      if (!this.remote_file_path.equals(that.remote_file_path))
        return false;
    }

    boolean this_present_remote_source_properties = true && this.isSetRemote_source_properties();
    boolean that_present_remote_source_properties = true && that.isSetRemote_source_properties();
    if (this_present_remote_source_properties || that_present_remote_source_properties) {
      if (!(this_present_remote_source_properties && that_present_remote_source_properties))
        return false;
      if (!this.remote_source_properties.equals(that.remote_source_properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_remote_file_path = true && (isSetRemote_file_path());
    list.add(present_remote_file_path);
    if (present_remote_file_path)
      list.add(remote_file_path);

    boolean present_remote_source_properties = true && (isSetRemote_source_properties());
    list.add(present_remote_source_properties);
    if (present_remote_source_properties)
      list.add(remote_source_properties);

    return list.hashCode();
  }

  @Override
  public int compareTo(TClearRemoteFileReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRemote_file_path()).compareTo(other.isSetRemote_file_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote_file_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote_file_path, other.remote_file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemote_source_properties()).compareTo(other.isSetRemote_source_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote_source_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote_source_properties, other.remote_source_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TClearRemoteFileReq(");
    boolean first = true;

    sb.append("remote_file_path:");
    if (this.remote_file_path == null) {
      sb.append("null");
    } else {
      sb.append(this.remote_file_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remote_source_properties:");
    if (this.remote_source_properties == null) {
      sb.append("null");
    } else {
      sb.append(this.remote_source_properties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (remote_file_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'remote_file_path' was not present! Struct: " + toString());
    }
    if (remote_source_properties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'remote_source_properties' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TClearRemoteFileReqStandardSchemeFactory implements SchemeFactory {
    public TClearRemoteFileReqStandardScheme getScheme() {
      return new TClearRemoteFileReqStandardScheme();
    }
  }

  private static class TClearRemoteFileReqStandardScheme extends StandardScheme<TClearRemoteFileReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TClearRemoteFileReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REMOTE_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remote_file_path = iprot.readString();
              struct.setRemote_file_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REMOTE_SOURCE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.remote_source_properties = new HashMap<String,String>(2*_map44.size);
                String _key45;
                String _val46;
                for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                {
                  _key45 = iprot.readString();
                  _val46 = iprot.readString();
                  struct.remote_source_properties.put(_key45, _val46);
                }
                iprot.readMapEnd();
              }
              struct.setRemote_source_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TClearRemoteFileReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.remote_file_path != null) {
        oprot.writeFieldBegin(REMOTE_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.remote_file_path);
        oprot.writeFieldEnd();
      }
      if (struct.remote_source_properties != null) {
        oprot.writeFieldBegin(REMOTE_SOURCE_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.remote_source_properties.size()));
          for (Map.Entry<String, String> _iter48 : struct.remote_source_properties.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TClearRemoteFileReqTupleSchemeFactory implements SchemeFactory {
    public TClearRemoteFileReqTupleScheme getScheme() {
      return new TClearRemoteFileReqTupleScheme();
    }
  }

  private static class TClearRemoteFileReqTupleScheme extends TupleScheme<TClearRemoteFileReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TClearRemoteFileReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.remote_file_path);
      {
        oprot.writeI32(struct.remote_source_properties.size());
        for (Map.Entry<String, String> _iter49 : struct.remote_source_properties.entrySet())
        {
          oprot.writeString(_iter49.getKey());
          oprot.writeString(_iter49.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TClearRemoteFileReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.remote_file_path = iprot.readString();
      struct.setRemote_file_pathIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.remote_source_properties = new HashMap<String,String>(2*_map50.size);
        String _key51;
        String _val52;
        for (int _i53 = 0; _i53 < _map50.size; ++_i53)
        {
          _key51 = iprot.readString();
          _val52 = iprot.readString();
          struct.remote_source_properties.put(_key51, _val52);
        }
      }
      struct.setRemote_source_propertiesIsSet(true);
    }
  }

}

