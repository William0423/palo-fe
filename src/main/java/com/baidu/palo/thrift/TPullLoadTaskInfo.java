/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class TPullLoadTaskInfo implements org.apache.thrift.TBase<TPullLoadTaskInfo, TPullLoadTaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPullLoadTaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPullLoadTaskInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ETL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("etl_state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("file_map", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TRACKING_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_urls", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPullLoadTaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPullLoadTaskInfoTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TUniqueId id; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TEtlState
   */
  public com.baidu.palo.thrift.TEtlState etl_state; // required
  public Map<String,Long> file_map; // optional
  public Map<String,String> counters; // optional
  public List<String> tracking_urls; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see com.baidu.palo.thrift.TEtlState
     */
    ETL_STATE((short)2, "etl_state"),
    FILE_MAP((short)3, "file_map"),
    COUNTERS((short)4, "counters"),
    TRACKING_URLS((short)5, "tracking_urls");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ETL_STATE
          return ETL_STATE;
        case 3: // FILE_MAP
          return FILE_MAP;
        case 4: // COUNTERS
          return COUNTERS;
        case 5: // TRACKING_URLS
          return TRACKING_URLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FILE_MAP,_Fields.COUNTERS,_Fields.TRACKING_URLS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.ETL_STATE, new org.apache.thrift.meta_data.FieldMetaData("etl_state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TEtlState.class)));
    tmpMap.put(_Fields.FILE_MAP, new org.apache.thrift.meta_data.FieldMetaData("file_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URLS, new org.apache.thrift.meta_data.FieldMetaData("tracking_urls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPullLoadTaskInfo.class, metaDataMap);
  }

  public TPullLoadTaskInfo() {
  }

  public TPullLoadTaskInfo(
    com.baidu.palo.thrift.TUniqueId id,
    com.baidu.palo.thrift.TEtlState etl_state)
  {
    this();
    this.id = id;
    this.etl_state = etl_state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPullLoadTaskInfo(TPullLoadTaskInfo other) {
    if (other.isSetId()) {
      this.id = new com.baidu.palo.thrift.TUniqueId(other.id);
    }
    if (other.isSetEtl_state()) {
      this.etl_state = other.etl_state;
    }
    if (other.isSetFile_map()) {
      Map<String,Long> __this__file_map = new HashMap<String,Long>(other.file_map);
      this.file_map = __this__file_map;
    }
    if (other.isSetCounters()) {
      Map<String,String> __this__counters = new HashMap<String,String>(other.counters);
      this.counters = __this__counters;
    }
    if (other.isSetTracking_urls()) {
      List<String> __this__tracking_urls = new ArrayList<String>(other.tracking_urls);
      this.tracking_urls = __this__tracking_urls;
    }
  }

  public TPullLoadTaskInfo deepCopy() {
    return new TPullLoadTaskInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.etl_state = null;
    this.file_map = null;
    this.counters = null;
    this.tracking_urls = null;
  }

  public com.baidu.palo.thrift.TUniqueId getId() {
    return this.id;
  }

  public TPullLoadTaskInfo setId(com.baidu.palo.thrift.TUniqueId id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TEtlState
   */
  public com.baidu.palo.thrift.TEtlState getEtl_state() {
    return this.etl_state;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TEtlState
   */
  public TPullLoadTaskInfo setEtl_state(com.baidu.palo.thrift.TEtlState etl_state) {
    this.etl_state = etl_state;
    return this;
  }

  public void unsetEtl_state() {
    this.etl_state = null;
  }

  /** Returns true if field etl_state is set (has been assigned a value) and false otherwise */
  public boolean isSetEtl_state() {
    return this.etl_state != null;
  }

  public void setEtl_stateIsSet(boolean value) {
    if (!value) {
      this.etl_state = null;
    }
  }

  public int getFile_mapSize() {
    return (this.file_map == null) ? 0 : this.file_map.size();
  }

  public void putToFile_map(String key, long val) {
    if (this.file_map == null) {
      this.file_map = new HashMap<String,Long>();
    }
    this.file_map.put(key, val);
  }

  public Map<String,Long> getFile_map() {
    return this.file_map;
  }

  public TPullLoadTaskInfo setFile_map(Map<String,Long> file_map) {
    this.file_map = file_map;
    return this;
  }

  public void unsetFile_map() {
    this.file_map = null;
  }

  /** Returns true if field file_map is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_map() {
    return this.file_map != null;
  }

  public void setFile_mapIsSet(boolean value) {
    if (!value) {
      this.file_map = null;
    }
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public void putToCounters(String key, String val) {
    if (this.counters == null) {
      this.counters = new HashMap<String,String>();
    }
    this.counters.put(key, val);
  }

  public Map<String,String> getCounters() {
    return this.counters;
  }

  public TPullLoadTaskInfo setCounters(Map<String,String> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public int getTracking_urlsSize() {
    return (this.tracking_urls == null) ? 0 : this.tracking_urls.size();
  }

  public java.util.Iterator<String> getTracking_urlsIterator() {
    return (this.tracking_urls == null) ? null : this.tracking_urls.iterator();
  }

  public void addToTracking_urls(String elem) {
    if (this.tracking_urls == null) {
      this.tracking_urls = new ArrayList<String>();
    }
    this.tracking_urls.add(elem);
  }

  public List<String> getTracking_urls() {
    return this.tracking_urls;
  }

  public TPullLoadTaskInfo setTracking_urls(List<String> tracking_urls) {
    this.tracking_urls = tracking_urls;
    return this;
  }

  public void unsetTracking_urls() {
    this.tracking_urls = null;
  }

  /** Returns true if field tracking_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_urls() {
    return this.tracking_urls != null;
  }

  public void setTracking_urlsIsSet(boolean value) {
    if (!value) {
      this.tracking_urls = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case ETL_STATE:
      if (value == null) {
        unsetEtl_state();
      } else {
        setEtl_state((com.baidu.palo.thrift.TEtlState)value);
      }
      break;

    case FILE_MAP:
      if (value == null) {
        unsetFile_map();
      } else {
        setFile_map((Map<String,Long>)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((Map<String,String>)value);
      }
      break;

    case TRACKING_URLS:
      if (value == null) {
        unsetTracking_urls();
      } else {
        setTracking_urls((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ETL_STATE:
      return getEtl_state();

    case FILE_MAP:
      return getFile_map();

    case COUNTERS:
      return getCounters();

    case TRACKING_URLS:
      return getTracking_urls();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ETL_STATE:
      return isSetEtl_state();
    case FILE_MAP:
      return isSetFile_map();
    case COUNTERS:
      return isSetCounters();
    case TRACKING_URLS:
      return isSetTracking_urls();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPullLoadTaskInfo)
      return this.equals((TPullLoadTaskInfo)that);
    return false;
  }

  public boolean equals(TPullLoadTaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_etl_state = true && this.isSetEtl_state();
    boolean that_present_etl_state = true && that.isSetEtl_state();
    if (this_present_etl_state || that_present_etl_state) {
      if (!(this_present_etl_state && that_present_etl_state))
        return false;
      if (!this.etl_state.equals(that.etl_state))
        return false;
    }

    boolean this_present_file_map = true && this.isSetFile_map();
    boolean that_present_file_map = true && that.isSetFile_map();
    if (this_present_file_map || that_present_file_map) {
      if (!(this_present_file_map && that_present_file_map))
        return false;
      if (!this.file_map.equals(that.file_map))
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_tracking_urls = true && this.isSetTracking_urls();
    boolean that_present_tracking_urls = true && that.isSetTracking_urls();
    if (this_present_tracking_urls || that_present_tracking_urls) {
      if (!(this_present_tracking_urls && that_present_tracking_urls))
        return false;
      if (!this.tracking_urls.equals(that.tracking_urls))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_etl_state = true && (isSetEtl_state());
    list.add(present_etl_state);
    if (present_etl_state)
      list.add(etl_state.getValue());

    boolean present_file_map = true && (isSetFile_map());
    list.add(present_file_map);
    if (present_file_map)
      list.add(file_map);

    boolean present_counters = true && (isSetCounters());
    list.add(present_counters);
    if (present_counters)
      list.add(counters);

    boolean present_tracking_urls = true && (isSetTracking_urls());
    list.add(present_tracking_urls);
    if (present_tracking_urls)
      list.add(tracking_urls);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPullLoadTaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEtl_state()).compareTo(other.isSetEtl_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEtl_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etl_state, other.etl_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_map()).compareTo(other.isSetFile_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_map, other.file_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounters()).compareTo(other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracking_urls()).compareTo(other.isSetTracking_urls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_urls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_urls, other.tracking_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPullLoadTaskInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("etl_state:");
    if (this.etl_state == null) {
      sb.append("null");
    } else {
      sb.append(this.etl_state);
    }
    first = false;
    if (isSetFile_map()) {
      if (!first) sb.append(", ");
      sb.append("file_map:");
      if (this.file_map == null) {
        sb.append("null");
      } else {
        sb.append(this.file_map);
      }
      first = false;
    }
    if (isSetCounters()) {
      if (!first) sb.append(", ");
      sb.append("counters:");
      if (this.counters == null) {
        sb.append("null");
      } else {
        sb.append(this.counters);
      }
      first = false;
    }
    if (isSetTracking_urls()) {
      if (!first) sb.append(", ");
      sb.append("tracking_urls:");
      if (this.tracking_urls == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_urls);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (etl_state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'etl_state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPullLoadTaskInfoStandardSchemeFactory implements SchemeFactory {
    public TPullLoadTaskInfoStandardScheme getScheme() {
      return new TPullLoadTaskInfoStandardScheme();
    }
  }

  private static class TPullLoadTaskInfoStandardScheme extends StandardScheme<TPullLoadTaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPullLoadTaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new com.baidu.palo.thrift.TUniqueId();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ETL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.etl_state = com.baidu.palo.thrift.TEtlState.findByValue(iprot.readI32());
              struct.setEtl_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.file_map = new HashMap<String,Long>(2*_map20.size);
                String _key21;
                long _val22;
                for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                {
                  _key21 = iprot.readString();
                  _val22 = iprot.readI64();
                  struct.file_map.put(_key21, _val22);
                }
                iprot.readMapEnd();
              }
              struct.setFile_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.counters = new HashMap<String,String>(2*_map24.size);
                String _key25;
                String _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = iprot.readString();
                  struct.counters.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACKING_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.tracking_urls = new ArrayList<String>(_list28.size);
                String _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = iprot.readString();
                  struct.tracking_urls.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setTracking_urlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPullLoadTaskInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.etl_state != null) {
        oprot.writeFieldBegin(ETL_STATE_FIELD_DESC);
        oprot.writeI32(struct.etl_state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.file_map != null) {
        if (struct.isSetFile_map()) {
          oprot.writeFieldBegin(FILE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.file_map.size()));
            for (Map.Entry<String, Long> _iter31 : struct.file_map.entrySet())
            {
              oprot.writeString(_iter31.getKey());
              oprot.writeI64(_iter31.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.counters != null) {
        if (struct.isSetCounters()) {
          oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.counters.size()));
            for (Map.Entry<String, String> _iter32 : struct.counters.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              oprot.writeString(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_urls != null) {
        if (struct.isSetTracking_urls()) {
          oprot.writeFieldBegin(TRACKING_URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tracking_urls.size()));
            for (String _iter33 : struct.tracking_urls)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPullLoadTaskInfoTupleSchemeFactory implements SchemeFactory {
    public TPullLoadTaskInfoTupleScheme getScheme() {
      return new TPullLoadTaskInfoTupleScheme();
    }
  }

  private static class TPullLoadTaskInfoTupleScheme extends TupleScheme<TPullLoadTaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPullLoadTaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.id.write(oprot);
      oprot.writeI32(struct.etl_state.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFile_map()) {
        optionals.set(0);
      }
      if (struct.isSetCounters()) {
        optionals.set(1);
      }
      if (struct.isSetTracking_urls()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFile_map()) {
        {
          oprot.writeI32(struct.file_map.size());
          for (Map.Entry<String, Long> _iter34 : struct.file_map.entrySet())
          {
            oprot.writeString(_iter34.getKey());
            oprot.writeI64(_iter34.getValue());
          }
        }
      }
      if (struct.isSetCounters()) {
        {
          oprot.writeI32(struct.counters.size());
          for (Map.Entry<String, String> _iter35 : struct.counters.entrySet())
          {
            oprot.writeString(_iter35.getKey());
            oprot.writeString(_iter35.getValue());
          }
        }
      }
      if (struct.isSetTracking_urls()) {
        {
          oprot.writeI32(struct.tracking_urls.size());
          for (String _iter36 : struct.tracking_urls)
          {
            oprot.writeString(_iter36);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPullLoadTaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = new com.baidu.palo.thrift.TUniqueId();
      struct.id.read(iprot);
      struct.setIdIsSet(true);
      struct.etl_state = com.baidu.palo.thrift.TEtlState.findByValue(iprot.readI32());
      struct.setEtl_stateIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.file_map = new HashMap<String,Long>(2*_map37.size);
          String _key38;
          long _val39;
          for (int _i40 = 0; _i40 < _map37.size; ++_i40)
          {
            _key38 = iprot.readString();
            _val39 = iprot.readI64();
            struct.file_map.put(_key38, _val39);
          }
        }
        struct.setFile_mapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map41 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.counters = new HashMap<String,String>(2*_map41.size);
          String _key42;
          String _val43;
          for (int _i44 = 0; _i44 < _map41.size; ++_i44)
          {
            _key42 = iprot.readString();
            _val43 = iprot.readString();
            struct.counters.put(_key42, _val43);
          }
        }
        struct.setCountersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tracking_urls = new ArrayList<String>(_list45.size);
          String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.tracking_urls.add(_elem46);
          }
        }
        struct.setTracking_urlsIsSet(true);
      }
    }
  }

}

