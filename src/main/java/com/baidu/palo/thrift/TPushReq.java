/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class TPushReq implements org.apache.thrift.TBase<TPushReq, TPushReq._Fields>, java.io.Serializable, Cloneable, Comparable<TPushReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPushReq");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PUSH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("push_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HTTP_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("http_file_path", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HTTP_FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("http_file_size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DELETE_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_conditions", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField NEED_DECOMPRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("need_decompress", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPushReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPushReqTupleSchemeFactory());
  }

  public long tablet_id; // required
  public int schema_hash; // required
  public long version; // required
  public long version_hash; // required
  public long timeout; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TPushType
   */
  public com.baidu.palo.thrift.TPushType push_type; // required
  public String http_file_path; // optional
  public long http_file_size; // optional
  public List<com.baidu.palo.thrift.TCondition> delete_conditions; // optional
  public boolean need_decompress; // optional
  public long task_id; // optional
  public long job_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    TIMEOUT((short)5, "timeout"),
    /**
     * 
     * @see com.baidu.palo.thrift.TPushType
     */
    PUSH_TYPE((short)6, "push_type"),
    HTTP_FILE_PATH((short)7, "http_file_path"),
    HTTP_FILE_SIZE((short)8, "http_file_size"),
    DELETE_CONDITIONS((short)9, "delete_conditions"),
    NEED_DECOMPRESS((short)10, "need_decompress"),
    TASK_ID((short)11, "task_id"),
    JOB_ID((short)12, "job_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // PUSH_TYPE
          return PUSH_TYPE;
        case 7: // HTTP_FILE_PATH
          return HTTP_FILE_PATH;
        case 8: // HTTP_FILE_SIZE
          return HTTP_FILE_SIZE;
        case 9: // DELETE_CONDITIONS
          return DELETE_CONDITIONS;
        case 10: // NEED_DECOMPRESS
          return NEED_DECOMPRESS;
        case 11: // TASK_ID
          return TASK_ID;
        case 12: // JOB_ID
          return JOB_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __VERSION_HASH_ISSET_ID = 3;
  private static final int __TIMEOUT_ISSET_ID = 4;
  private static final int __HTTP_FILE_SIZE_ISSET_ID = 5;
  private static final int __NEED_DECOMPRESS_ISSET_ID = 6;
  private static final int __TASK_ID_ISSET_ID = 7;
  private static final int __JOB_ID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HTTP_FILE_PATH,_Fields.HTTP_FILE_SIZE,_Fields.DELETE_CONDITIONS,_Fields.NEED_DECOMPRESS,_Fields.TASK_ID,_Fields.JOB_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUSH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("push_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TPushType.class)));
    tmpMap.put(_Fields.HTTP_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("http_file_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HTTP_FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("http_file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETE_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("delete_conditions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TCondition.class))));
    tmpMap.put(_Fields.NEED_DECOMPRESS, new org.apache.thrift.meta_data.FieldMetaData("need_decompress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPushReq.class, metaDataMap);
  }

  public TPushReq() {
  }

  public TPushReq(
    long tablet_id,
    int schema_hash,
    long version,
    long version_hash,
    long timeout,
    com.baidu.palo.thrift.TPushType push_type)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    this.timeout = timeout;
    setTimeoutIsSet(true);
    this.push_type = push_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPushReq(TPushReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.version = other.version;
    this.version_hash = other.version_hash;
    this.timeout = other.timeout;
    if (other.isSetPush_type()) {
      this.push_type = other.push_type;
    }
    if (other.isSetHttp_file_path()) {
      this.http_file_path = other.http_file_path;
    }
    this.http_file_size = other.http_file_size;
    if (other.isSetDelete_conditions()) {
      List<com.baidu.palo.thrift.TCondition> __this__delete_conditions = new ArrayList<com.baidu.palo.thrift.TCondition>(other.delete_conditions.size());
      for (com.baidu.palo.thrift.TCondition other_element : other.delete_conditions) {
        __this__delete_conditions.add(new com.baidu.palo.thrift.TCondition(other_element));
      }
      this.delete_conditions = __this__delete_conditions;
    }
    this.need_decompress = other.need_decompress;
    this.task_id = other.task_id;
    this.job_id = other.job_id;
  }

  public TPushReq deepCopy() {
    return new TPushReq(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    setTimeoutIsSet(false);
    this.timeout = 0;
    this.push_type = null;
    this.http_file_path = null;
    setHttp_file_sizeIsSet(false);
    this.http_file_size = 0;
    this.delete_conditions = null;
    setNeed_decompressIsSet(false);
    this.need_decompress = false;
    setTask_idIsSet(false);
    this.task_id = 0;
    setJob_idIsSet(false);
    this.job_id = 0;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TPushReq setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TPushReq setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TPushReq setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TPushReq setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TPushReq setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPushType
   */
  public com.baidu.palo.thrift.TPushType getPush_type() {
    return this.push_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPushType
   */
  public TPushReq setPush_type(com.baidu.palo.thrift.TPushType push_type) {
    this.push_type = push_type;
    return this;
  }

  public void unsetPush_type() {
    this.push_type = null;
  }

  /** Returns true if field push_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPush_type() {
    return this.push_type != null;
  }

  public void setPush_typeIsSet(boolean value) {
    if (!value) {
      this.push_type = null;
    }
  }

  public String getHttp_file_path() {
    return this.http_file_path;
  }

  public TPushReq setHttp_file_path(String http_file_path) {
    this.http_file_path = http_file_path;
    return this;
  }

  public void unsetHttp_file_path() {
    this.http_file_path = null;
  }

  /** Returns true if field http_file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetHttp_file_path() {
    return this.http_file_path != null;
  }

  public void setHttp_file_pathIsSet(boolean value) {
    if (!value) {
      this.http_file_path = null;
    }
  }

  public long getHttp_file_size() {
    return this.http_file_size;
  }

  public TPushReq setHttp_file_size(long http_file_size) {
    this.http_file_size = http_file_size;
    setHttp_file_sizeIsSet(true);
    return this;
  }

  public void unsetHttp_file_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field http_file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetHttp_file_size() {
    return EncodingUtils.testBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID);
  }

  public void setHttp_file_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID, value);
  }

  public int getDelete_conditionsSize() {
    return (this.delete_conditions == null) ? 0 : this.delete_conditions.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TCondition> getDelete_conditionsIterator() {
    return (this.delete_conditions == null) ? null : this.delete_conditions.iterator();
  }

  public void addToDelete_conditions(com.baidu.palo.thrift.TCondition elem) {
    if (this.delete_conditions == null) {
      this.delete_conditions = new ArrayList<com.baidu.palo.thrift.TCondition>();
    }
    this.delete_conditions.add(elem);
  }

  public List<com.baidu.palo.thrift.TCondition> getDelete_conditions() {
    return this.delete_conditions;
  }

  public TPushReq setDelete_conditions(List<com.baidu.palo.thrift.TCondition> delete_conditions) {
    this.delete_conditions = delete_conditions;
    return this;
  }

  public void unsetDelete_conditions() {
    this.delete_conditions = null;
  }

  /** Returns true if field delete_conditions is set (has been assigned a value) and false otherwise */
  public boolean isSetDelete_conditions() {
    return this.delete_conditions != null;
  }

  public void setDelete_conditionsIsSet(boolean value) {
    if (!value) {
      this.delete_conditions = null;
    }
  }

  public boolean isNeed_decompress() {
    return this.need_decompress;
  }

  public TPushReq setNeed_decompress(boolean need_decompress) {
    this.need_decompress = need_decompress;
    setNeed_decompressIsSet(true);
    return this;
  }

  public void unsetNeed_decompress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID);
  }

  /** Returns true if field need_decompress is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_decompress() {
    return EncodingUtils.testBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID);
  }

  public void setNeed_decompressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID, value);
  }

  public long getTask_id() {
    return this.task_id;
  }

  public TPushReq setTask_id(long task_id) {
    this.task_id = task_id;
    setTask_idIsSet(true);
    return this;
  }

  public void unsetTask_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  public void setTask_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASK_ID_ISSET_ID, value);
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TPushReq setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((Long)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Long)value);
      }
      break;

    case PUSH_TYPE:
      if (value == null) {
        unsetPush_type();
      } else {
        setPush_type((com.baidu.palo.thrift.TPushType)value);
      }
      break;

    case HTTP_FILE_PATH:
      if (value == null) {
        unsetHttp_file_path();
      } else {
        setHttp_file_path((String)value);
      }
      break;

    case HTTP_FILE_SIZE:
      if (value == null) {
        unsetHttp_file_size();
      } else {
        setHttp_file_size((Long)value);
      }
      break;

    case DELETE_CONDITIONS:
      if (value == null) {
        unsetDelete_conditions();
      } else {
        setDelete_conditions((List<com.baidu.palo.thrift.TCondition>)value);
      }
      break;

    case NEED_DECOMPRESS:
      if (value == null) {
        unsetNeed_decompress();
      } else {
        setNeed_decompress((Boolean)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((Long)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case TIMEOUT:
      return getTimeout();

    case PUSH_TYPE:
      return getPush_type();

    case HTTP_FILE_PATH:
      return getHttp_file_path();

    case HTTP_FILE_SIZE:
      return getHttp_file_size();

    case DELETE_CONDITIONS:
      return getDelete_conditions();

    case NEED_DECOMPRESS:
      return isNeed_decompress();

    case TASK_ID:
      return getTask_id();

    case JOB_ID:
      return getJob_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case TIMEOUT:
      return isSetTimeout();
    case PUSH_TYPE:
      return isSetPush_type();
    case HTTP_FILE_PATH:
      return isSetHttp_file_path();
    case HTTP_FILE_SIZE:
      return isSetHttp_file_size();
    case DELETE_CONDITIONS:
      return isSetDelete_conditions();
    case NEED_DECOMPRESS:
      return isSetNeed_decompress();
    case TASK_ID:
      return isSetTask_id();
    case JOB_ID:
      return isSetJob_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPushReq)
      return this.equals((TPushReq)that);
    return false;
  }

  public boolean equals(TPushReq that) {
    if (that == null)
      return false;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true;
    boolean that_present_version_hash = true;
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_push_type = true && this.isSetPush_type();
    boolean that_present_push_type = true && that.isSetPush_type();
    if (this_present_push_type || that_present_push_type) {
      if (!(this_present_push_type && that_present_push_type))
        return false;
      if (!this.push_type.equals(that.push_type))
        return false;
    }

    boolean this_present_http_file_path = true && this.isSetHttp_file_path();
    boolean that_present_http_file_path = true && that.isSetHttp_file_path();
    if (this_present_http_file_path || that_present_http_file_path) {
      if (!(this_present_http_file_path && that_present_http_file_path))
        return false;
      if (!this.http_file_path.equals(that.http_file_path))
        return false;
    }

    boolean this_present_http_file_size = true && this.isSetHttp_file_size();
    boolean that_present_http_file_size = true && that.isSetHttp_file_size();
    if (this_present_http_file_size || that_present_http_file_size) {
      if (!(this_present_http_file_size && that_present_http_file_size))
        return false;
      if (this.http_file_size != that.http_file_size)
        return false;
    }

    boolean this_present_delete_conditions = true && this.isSetDelete_conditions();
    boolean that_present_delete_conditions = true && that.isSetDelete_conditions();
    if (this_present_delete_conditions || that_present_delete_conditions) {
      if (!(this_present_delete_conditions && that_present_delete_conditions))
        return false;
      if (!this.delete_conditions.equals(that.delete_conditions))
        return false;
    }

    boolean this_present_need_decompress = true && this.isSetNeed_decompress();
    boolean that_present_need_decompress = true && that.isSetNeed_decompress();
    if (this_present_need_decompress || that_present_need_decompress) {
      if (!(this_present_need_decompress && that_present_need_decompress))
        return false;
      if (this.need_decompress != that.need_decompress)
        return false;
    }

    boolean this_present_task_id = true && this.isSetTask_id();
    boolean that_present_task_id = true && that.isSetTask_id();
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (this.task_id != that.task_id)
        return false;
    }

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tablet_id = true;
    list.add(present_tablet_id);
    if (present_tablet_id)
      list.add(tablet_id);

    boolean present_schema_hash = true;
    list.add(present_schema_hash);
    if (present_schema_hash)
      list.add(schema_hash);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_version_hash = true;
    list.add(present_version_hash);
    if (present_version_hash)
      list.add(version_hash);

    boolean present_timeout = true;
    list.add(present_timeout);
    if (present_timeout)
      list.add(timeout);

    boolean present_push_type = true && (isSetPush_type());
    list.add(present_push_type);
    if (present_push_type)
      list.add(push_type.getValue());

    boolean present_http_file_path = true && (isSetHttp_file_path());
    list.add(present_http_file_path);
    if (present_http_file_path)
      list.add(http_file_path);

    boolean present_http_file_size = true && (isSetHttp_file_size());
    list.add(present_http_file_size);
    if (present_http_file_size)
      list.add(http_file_size);

    boolean present_delete_conditions = true && (isSetDelete_conditions());
    list.add(present_delete_conditions);
    if (present_delete_conditions)
      list.add(delete_conditions);

    boolean present_need_decompress = true && (isSetNeed_decompress());
    list.add(present_need_decompress);
    if (present_need_decompress)
      list.add(need_decompress);

    boolean present_task_id = true && (isSetTask_id());
    list.add(present_task_id);
    if (present_task_id)
      list.add(task_id);

    boolean present_job_id = true && (isSetJob_id());
    list.add(present_job_id);
    if (present_job_id)
      list.add(job_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPushReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTablet_id()).compareTo(other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_hash()).compareTo(other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_hash()).compareTo(other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPush_type()).compareTo(other.isSetPush_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_type, other.push_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttp_file_path()).compareTo(other.isSetHttp_file_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttp_file_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http_file_path, other.http_file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttp_file_size()).compareTo(other.isSetHttp_file_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttp_file_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http_file_size, other.http_file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelete_conditions()).compareTo(other.isSetDelete_conditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelete_conditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_conditions, other.delete_conditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeed_decompress()).compareTo(other.isSetNeed_decompress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_decompress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_decompress, other.need_decompress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob_id()).compareTo(other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPushReq(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_hash:");
    sb.append(this.version_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("push_type:");
    if (this.push_type == null) {
      sb.append("null");
    } else {
      sb.append(this.push_type);
    }
    first = false;
    if (isSetHttp_file_path()) {
      if (!first) sb.append(", ");
      sb.append("http_file_path:");
      if (this.http_file_path == null) {
        sb.append("null");
      } else {
        sb.append(this.http_file_path);
      }
      first = false;
    }
    if (isSetHttp_file_size()) {
      if (!first) sb.append(", ");
      sb.append("http_file_size:");
      sb.append(this.http_file_size);
      first = false;
    }
    if (isSetDelete_conditions()) {
      if (!first) sb.append(", ");
      sb.append("delete_conditions:");
      if (this.delete_conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_conditions);
      }
      first = false;
    }
    if (isSetNeed_decompress()) {
      if (!first) sb.append(", ");
      sb.append("need_decompress:");
      sb.append(this.need_decompress);
      first = false;
    }
    if (isSetTask_id()) {
      if (!first) sb.append(", ");
      sb.append("task_id:");
      sb.append(this.task_id);
      first = false;
    }
    if (isSetJob_id()) {
      if (!first) sb.append(", ");
      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timeout' because it's a primitive and you chose the non-beans generator.
    if (push_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'push_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPushReqStandardSchemeFactory implements SchemeFactory {
    public TPushReqStandardScheme getScheme() {
      return new TPushReqStandardScheme();
    }
  }

  private static class TPushReqStandardScheme extends StandardScheme<TPushReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPushReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUSH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.push_type = com.baidu.palo.thrift.TPushType.findByValue(iprot.readI32());
              struct.setPush_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HTTP_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.http_file_path = iprot.readString();
              struct.setHttp_file_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HTTP_FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.http_file_size = iprot.readI64();
              struct.setHttp_file_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELETE_CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.delete_conditions = new ArrayList<com.baidu.palo.thrift.TCondition>(_list8.size);
                com.baidu.palo.thrift.TCondition _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new com.baidu.palo.thrift.TCondition();
                  _elem9.read(iprot);
                  struct.delete_conditions.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDelete_conditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEED_DECOMPRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_decompress = iprot.readBool();
              struct.setNeed_decompressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.task_id = iprot.readI64();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimeout()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeout' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPushReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
      oprot.writeI64(struct.version_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI64(struct.timeout);
      oprot.writeFieldEnd();
      if (struct.push_type != null) {
        oprot.writeFieldBegin(PUSH_TYPE_FIELD_DESC);
        oprot.writeI32(struct.push_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.http_file_path != null) {
        if (struct.isSetHttp_file_path()) {
          oprot.writeFieldBegin(HTTP_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.http_file_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHttp_file_size()) {
        oprot.writeFieldBegin(HTTP_FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.http_file_size);
        oprot.writeFieldEnd();
      }
      if (struct.delete_conditions != null) {
        if (struct.isSetDelete_conditions()) {
          oprot.writeFieldBegin(DELETE_CONDITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.delete_conditions.size()));
            for (com.baidu.palo.thrift.TCondition _iter11 : struct.delete_conditions)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeed_decompress()) {
        oprot.writeFieldBegin(NEED_DECOMPRESS_FIELD_DESC);
        oprot.writeBool(struct.need_decompress);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTask_id()) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.task_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJob_id()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.job_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPushReqTupleSchemeFactory implements SchemeFactory {
    public TPushReqTupleScheme getScheme() {
      return new TPushReqTupleScheme();
    }
  }

  private static class TPushReqTupleScheme extends TupleScheme<TPushReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPushReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI64(struct.version);
      oprot.writeI64(struct.version_hash);
      oprot.writeI64(struct.timeout);
      oprot.writeI32(struct.push_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetHttp_file_path()) {
        optionals.set(0);
      }
      if (struct.isSetHttp_file_size()) {
        optionals.set(1);
      }
      if (struct.isSetDelete_conditions()) {
        optionals.set(2);
      }
      if (struct.isSetNeed_decompress()) {
        optionals.set(3);
      }
      if (struct.isSetTask_id()) {
        optionals.set(4);
      }
      if (struct.isSetJob_id()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHttp_file_path()) {
        oprot.writeString(struct.http_file_path);
      }
      if (struct.isSetHttp_file_size()) {
        oprot.writeI64(struct.http_file_size);
      }
      if (struct.isSetDelete_conditions()) {
        {
          oprot.writeI32(struct.delete_conditions.size());
          for (com.baidu.palo.thrift.TCondition _iter12 : struct.delete_conditions)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetNeed_decompress()) {
        oprot.writeBool(struct.need_decompress);
      }
      if (struct.isSetTask_id()) {
        oprot.writeI64(struct.task_id);
      }
      if (struct.isSetJob_id()) {
        oprot.writeI64(struct.job_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPushReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      struct.version_hash = iprot.readI64();
      struct.setVersion_hashIsSet(true);
      struct.timeout = iprot.readI64();
      struct.setTimeoutIsSet(true);
      struct.push_type = com.baidu.palo.thrift.TPushType.findByValue(iprot.readI32());
      struct.setPush_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.http_file_path = iprot.readString();
        struct.setHttp_file_pathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.http_file_size = iprot.readI64();
        struct.setHttp_file_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.delete_conditions = new ArrayList<com.baidu.palo.thrift.TCondition>(_list13.size);
          com.baidu.palo.thrift.TCondition _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new com.baidu.palo.thrift.TCondition();
            _elem14.read(iprot);
            struct.delete_conditions.add(_elem14);
          }
        }
        struct.setDelete_conditionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.need_decompress = iprot.readBool();
        struct.setNeed_decompressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.task_id = iprot.readI64();
        struct.setTask_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.job_id = iprot.readI64();
        struct.setJob_idIsSet(true);
      }
    }
  }

}

