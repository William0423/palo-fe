/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TTabletSchema implements org.apache.thrift.TBase<TTabletSchema, TTabletSchema._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletSchema");

  private static final org.apache.thrift.protocol.TField SHORT_KEY_COLUMN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("short_key_column_count", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField KEYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keys_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_FPP_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter_fpp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTabletSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTabletSchemaTupleSchemeFactory());
  }

  public short short_key_column_count; // required
  public int schema_hash; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TKeysType
   */
  public com.baidu.palo.thrift.TKeysType keys_type; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TStorageType
   */
  public com.baidu.palo.thrift.TStorageType storage_type; // required
  public List<TColumn> columns; // required
  public double bloom_filter_fpp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHORT_KEY_COLUMN_COUNT((short)1, "short_key_column_count"),
    SCHEMA_HASH((short)2, "schema_hash"),
    /**
     * 
     * @see com.baidu.palo.thrift.TKeysType
     */
    KEYS_TYPE((short)3, "keys_type"),
    /**
     * 
     * @see com.baidu.palo.thrift.TStorageType
     */
    STORAGE_TYPE((short)4, "storage_type"),
    COLUMNS((short)5, "columns"),
    BLOOM_FILTER_FPP((short)6, "bloom_filter_fpp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHORT_KEY_COLUMN_COUNT
          return SHORT_KEY_COLUMN_COUNT;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // KEYS_TYPE
          return KEYS_TYPE;
        case 4: // STORAGE_TYPE
          return STORAGE_TYPE;
        case 5: // COLUMNS
          return COLUMNS;
        case 6: // BLOOM_FILTER_FPP
          return BLOOM_FILTER_FPP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHORT_KEY_COLUMN_COUNT_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __BLOOM_FILTER_FPP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BLOOM_FILTER_FPP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHORT_KEY_COLUMN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("short_key_column_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.KEYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keys_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TKeysType.class)));
    tmpMap.put(_Fields.STORAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storage_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TStorageType.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.BLOOM_FILTER_FPP, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter_fpp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletSchema.class, metaDataMap);
  }

  public TTabletSchema() {
  }

  public TTabletSchema(
    short short_key_column_count,
    int schema_hash,
    com.baidu.palo.thrift.TKeysType keys_type,
    com.baidu.palo.thrift.TStorageType storage_type,
    List<TColumn> columns)
  {
    this();
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.keys_type = keys_type;
    this.storage_type = storage_type;
    this.columns = columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletSchema(TTabletSchema other) {
    __isset_bitfield = other.__isset_bitfield;
    this.short_key_column_count = other.short_key_column_count;
    this.schema_hash = other.schema_hash;
    if (other.isSetKeys_type()) {
      this.keys_type = other.keys_type;
    }
    if (other.isSetStorage_type()) {
      this.storage_type = other.storage_type;
    }
    if (other.isSetColumns()) {
      List<TColumn> __this__columns = new ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    this.bloom_filter_fpp = other.bloom_filter_fpp;
  }

  public TTabletSchema deepCopy() {
    return new TTabletSchema(this);
  }

  @Override
  public void clear() {
    setShort_key_column_countIsSet(false);
    this.short_key_column_count = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    this.keys_type = null;
    this.storage_type = null;
    this.columns = null;
    setBloom_filter_fppIsSet(false);
    this.bloom_filter_fpp = 0.0;
  }

  public short getShort_key_column_count() {
    return this.short_key_column_count;
  }

  public TTabletSchema setShort_key_column_count(short short_key_column_count) {
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
    return this;
  }

  public void unsetShort_key_column_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  /** Returns true if field short_key_column_count is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_key_column_count() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  public void setShort_key_column_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TTabletSchema setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TKeysType
   */
  public com.baidu.palo.thrift.TKeysType getKeys_type() {
    return this.keys_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TKeysType
   */
  public TTabletSchema setKeys_type(com.baidu.palo.thrift.TKeysType keys_type) {
    this.keys_type = keys_type;
    return this;
  }

  public void unsetKeys_type() {
    this.keys_type = null;
  }

  /** Returns true if field keys_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys_type() {
    return this.keys_type != null;
  }

  public void setKeys_typeIsSet(boolean value) {
    if (!value) {
      this.keys_type = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TStorageType
   */
  public com.baidu.palo.thrift.TStorageType getStorage_type() {
    return this.storage_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TStorageType
   */
  public TTabletSchema setStorage_type(com.baidu.palo.thrift.TStorageType storage_type) {
    this.storage_type = storage_type;
    return this;
  }

  public void unsetStorage_type() {
    this.storage_type = null;
  }

  /** Returns true if field storage_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_type() {
    return this.storage_type != null;
  }

  public void setStorage_typeIsSet(boolean value) {
    if (!value) {
      this.storage_type = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  public List<TColumn> getColumns() {
    return this.columns;
  }

  public TTabletSchema setColumns(List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public double getBloom_filter_fpp() {
    return this.bloom_filter_fpp;
  }

  public TTabletSchema setBloom_filter_fpp(double bloom_filter_fpp) {
    this.bloom_filter_fpp = bloom_filter_fpp;
    setBloom_filter_fppIsSet(true);
    return this;
  }

  public void unsetBloom_filter_fpp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID);
  }

  /** Returns true if field bloom_filter_fpp is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter_fpp() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID);
  }

  public void setBloom_filter_fppIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      if (value == null) {
        unsetShort_key_column_count();
      } else {
        setShort_key_column_count((Short)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((Integer)value);
      }
      break;

    case KEYS_TYPE:
      if (value == null) {
        unsetKeys_type();
      } else {
        setKeys_type((com.baidu.palo.thrift.TKeysType)value);
      }
      break;

    case STORAGE_TYPE:
      if (value == null) {
        unsetStorage_type();
      } else {
        setStorage_type((com.baidu.palo.thrift.TStorageType)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<TColumn>)value);
      }
      break;

    case BLOOM_FILTER_FPP:
      if (value == null) {
        unsetBloom_filter_fpp();
      } else {
        setBloom_filter_fpp((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      return getShort_key_column_count();

    case SCHEMA_HASH:
      return getSchema_hash();

    case KEYS_TYPE:
      return getKeys_type();

    case STORAGE_TYPE:
      return getStorage_type();

    case COLUMNS:
      return getColumns();

    case BLOOM_FILTER_FPP:
      return getBloom_filter_fpp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      return isSetShort_key_column_count();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case KEYS_TYPE:
      return isSetKeys_type();
    case STORAGE_TYPE:
      return isSetStorage_type();
    case COLUMNS:
      return isSetColumns();
    case BLOOM_FILTER_FPP:
      return isSetBloom_filter_fpp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTabletSchema)
      return this.equals((TTabletSchema)that);
    return false;
  }

  public boolean equals(TTabletSchema that) {
    if (that == null)
      return false;

    boolean this_present_short_key_column_count = true;
    boolean that_present_short_key_column_count = true;
    if (this_present_short_key_column_count || that_present_short_key_column_count) {
      if (!(this_present_short_key_column_count && that_present_short_key_column_count))
        return false;
      if (this.short_key_column_count != that.short_key_column_count)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_keys_type = true && this.isSetKeys_type();
    boolean that_present_keys_type = true && that.isSetKeys_type();
    if (this_present_keys_type || that_present_keys_type) {
      if (!(this_present_keys_type && that_present_keys_type))
        return false;
      if (!this.keys_type.equals(that.keys_type))
        return false;
    }

    boolean this_present_storage_type = true && this.isSetStorage_type();
    boolean that_present_storage_type = true && that.isSetStorage_type();
    if (this_present_storage_type || that_present_storage_type) {
      if (!(this_present_storage_type && that_present_storage_type))
        return false;
      if (!this.storage_type.equals(that.storage_type))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_bloom_filter_fpp = true && this.isSetBloom_filter_fpp();
    boolean that_present_bloom_filter_fpp = true && that.isSetBloom_filter_fpp();
    if (this_present_bloom_filter_fpp || that_present_bloom_filter_fpp) {
      if (!(this_present_bloom_filter_fpp && that_present_bloom_filter_fpp))
        return false;
      if (this.bloom_filter_fpp != that.bloom_filter_fpp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_short_key_column_count = true;
    list.add(present_short_key_column_count);
    if (present_short_key_column_count)
      list.add(short_key_column_count);

    boolean present_schema_hash = true;
    list.add(present_schema_hash);
    if (present_schema_hash)
      list.add(schema_hash);

    boolean present_keys_type = true && (isSetKeys_type());
    list.add(present_keys_type);
    if (present_keys_type)
      list.add(keys_type.getValue());

    boolean present_storage_type = true && (isSetStorage_type());
    list.add(present_storage_type);
    if (present_storage_type)
      list.add(storage_type.getValue());

    boolean present_columns = true && (isSetColumns());
    list.add(present_columns);
    if (present_columns)
      list.add(columns);

    boolean present_bloom_filter_fpp = true && (isSetBloom_filter_fpp());
    list.add(present_bloom_filter_fpp);
    if (present_bloom_filter_fpp)
      list.add(bloom_filter_fpp);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTabletSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShort_key_column_count()).compareTo(other.isSetShort_key_column_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_key_column_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_key_column_count, other.short_key_column_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_hash()).compareTo(other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys_type()).compareTo(other.isSetKeys_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys_type, other.keys_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorage_type()).compareTo(other.isSetStorage_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_type, other.storage_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBloom_filter_fpp()).compareTo(other.isSetBloom_filter_fpp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloom_filter_fpp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter_fpp, other.bloom_filter_fpp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTabletSchema(");
    boolean first = true;

    sb.append("short_key_column_count:");
    sb.append(this.short_key_column_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys_type:");
    if (this.keys_type == null) {
      sb.append("null");
    } else {
      sb.append(this.keys_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storage_type:");
    if (this.storage_type == null) {
      sb.append("null");
    } else {
      sb.append(this.storage_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (isSetBloom_filter_fpp()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter_fpp:");
      sb.append(this.bloom_filter_fpp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'short_key_column_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    if (keys_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keys_type' was not present! Struct: " + toString());
    }
    if (storage_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storage_type' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletSchemaStandardSchemeFactory implements SchemeFactory {
    public TTabletSchemaStandardScheme getScheme() {
      return new TTabletSchemaStandardScheme();
    }
  }

  private static class TTabletSchemaStandardScheme extends StandardScheme<TTabletSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHORT_KEY_COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.short_key_column_count = iprot.readI16();
              struct.setShort_key_column_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keys_type = com.baidu.palo.thrift.TKeysType.findByValue(iprot.readI32());
              struct.setKeys_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_type = com.baidu.palo.thrift.TStorageType.findByValue(iprot.readI32());
              struct.setStorage_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.columns = new ArrayList<TColumn>(_list0.size);
                TColumn _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TColumn();
                  _elem1.read(iprot);
                  struct.columns.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOOM_FILTER_FPP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bloom_filter_fpp = iprot.readDouble();
              struct.setBloom_filter_fppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetShort_key_column_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'short_key_column_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHORT_KEY_COLUMN_COUNT_FIELD_DESC);
      oprot.writeI16(struct.short_key_column_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      if (struct.keys_type != null) {
        oprot.writeFieldBegin(KEYS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.keys_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.storage_type != null) {
        oprot.writeFieldBegin(STORAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.storage_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (TColumn _iter3 : struct.columns)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetBloom_filter_fpp()) {
        oprot.writeFieldBegin(BLOOM_FILTER_FPP_FIELD_DESC);
        oprot.writeDouble(struct.bloom_filter_fpp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletSchemaTupleSchemeFactory implements SchemeFactory {
    public TTabletSchemaTupleScheme getScheme() {
      return new TTabletSchemaTupleScheme();
    }
  }

  private static class TTabletSchemaTupleScheme extends TupleScheme<TTabletSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.short_key_column_count);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI32(struct.keys_type.getValue());
      oprot.writeI32(struct.storage_type.getValue());
      {
        oprot.writeI32(struct.columns.size());
        for (TColumn _iter4 : struct.columns)
        {
          _iter4.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetBloom_filter_fpp()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBloom_filter_fpp()) {
        oprot.writeDouble(struct.bloom_filter_fpp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.short_key_column_count = iprot.readI16();
      struct.setShort_key_column_countIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.keys_type = com.baidu.palo.thrift.TKeysType.findByValue(iprot.readI32());
      struct.setKeys_typeIsSet(true);
      struct.storage_type = com.baidu.palo.thrift.TStorageType.findByValue(iprot.readI32());
      struct.setStorage_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columns = new ArrayList<TColumn>(_list5.size);
        TColumn _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new TColumn();
          _elem6.read(iprot);
          struct.columns.add(_elem6);
        }
      }
      struct.setColumnsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.bloom_filter_fpp = iprot.readDouble();
        struct.setBloom_filter_fppIsSet(true);
      }
    }
  }

}

