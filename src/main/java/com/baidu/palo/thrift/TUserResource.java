/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TUserResource implements org.apache.thrift.TBase<TUserResource, TUserResource._Fields>, java.io.Serializable, Cloneable, Comparable<TUserResource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserResource");

  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SHARE_BY_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("shareByGroup", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserResourceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserResourceTupleSchemeFactory());
  }

  public TResourceGroup resource; // required
  public Map<String,Integer> shareByGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE((short)1, "resource"),
    SHARE_BY_GROUP((short)2, "shareByGroup");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE
          return RESOURCE;
        case 2: // SHARE_BY_GROUP
          return SHARE_BY_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceGroup.class)));
    tmpMap.put(_Fields.SHARE_BY_GROUP, new org.apache.thrift.meta_data.FieldMetaData("shareByGroup", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserResource.class, metaDataMap);
  }

  public TUserResource() {
  }

  public TUserResource(
    TResourceGroup resource,
    Map<String,Integer> shareByGroup)
  {
    this();
    this.resource = resource;
    this.shareByGroup = shareByGroup;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserResource(TUserResource other) {
    if (other.isSetResource()) {
      this.resource = new TResourceGroup(other.resource);
    }
    if (other.isSetShareByGroup()) {
      Map<String,Integer> __this__shareByGroup = new HashMap<String,Integer>(other.shareByGroup);
      this.shareByGroup = __this__shareByGroup;
    }
  }

  public TUserResource deepCopy() {
    return new TUserResource(this);
  }

  @Override
  public void clear() {
    this.resource = null;
    this.shareByGroup = null;
  }

  public TResourceGroup getResource() {
    return this.resource;
  }

  public TUserResource setResource(TResourceGroup resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public int getShareByGroupSize() {
    return (this.shareByGroup == null) ? 0 : this.shareByGroup.size();
  }

  public void putToShareByGroup(String key, int val) {
    if (this.shareByGroup == null) {
      this.shareByGroup = new HashMap<String,Integer>();
    }
    this.shareByGroup.put(key, val);
  }

  public Map<String,Integer> getShareByGroup() {
    return this.shareByGroup;
  }

  public TUserResource setShareByGroup(Map<String,Integer> shareByGroup) {
    this.shareByGroup = shareByGroup;
    return this;
  }

  public void unsetShareByGroup() {
    this.shareByGroup = null;
  }

  /** Returns true if field shareByGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetShareByGroup() {
    return this.shareByGroup != null;
  }

  public void setShareByGroupIsSet(boolean value) {
    if (!value) {
      this.shareByGroup = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((TResourceGroup)value);
      }
      break;

    case SHARE_BY_GROUP:
      if (value == null) {
        unsetShareByGroup();
      } else {
        setShareByGroup((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE:
      return getResource();

    case SHARE_BY_GROUP:
      return getShareByGroup();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE:
      return isSetResource();
    case SHARE_BY_GROUP:
      return isSetShareByGroup();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserResource)
      return this.equals((TUserResource)that);
    return false;
  }

  public boolean equals(TUserResource that) {
    if (that == null)
      return false;

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_shareByGroup = true && this.isSetShareByGroup();
    boolean that_present_shareByGroup = true && that.isSetShareByGroup();
    if (this_present_shareByGroup || that_present_shareByGroup) {
      if (!(this_present_shareByGroup && that_present_shareByGroup))
        return false;
      if (!this.shareByGroup.equals(that.shareByGroup))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resource = true && (isSetResource());
    list.add(present_resource);
    if (present_resource)
      list.add(resource);

    boolean present_shareByGroup = true && (isSetShareByGroup());
    list.add(present_shareByGroup);
    if (present_shareByGroup)
      list.add(shareByGroup);

    return list.hashCode();
  }

  @Override
  public int compareTo(TUserResource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResource()).compareTo(other.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareByGroup()).compareTo(other.isSetShareByGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareByGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareByGroup, other.shareByGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserResource(");
    boolean first = true;

    sb.append("resource:");
    if (this.resource == null) {
      sb.append("null");
    } else {
      sb.append(this.resource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareByGroup:");
    if (this.shareByGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.shareByGroup);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resource' was not present! Struct: " + toString());
    }
    if (shareByGroup == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'shareByGroup' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resource != null) {
      resource.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserResourceStandardSchemeFactory implements SchemeFactory {
    public TUserResourceStandardScheme getScheme() {
      return new TUserResourceStandardScheme();
    }
  }

  private static class TUserResourceStandardScheme extends StandardScheme<TUserResource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource = new TResourceGroup();
              struct.resource.read(iprot);
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHARE_BY_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.shareByGroup = new HashMap<String,Integer>(2*_map64.size);
                String _key65;
                int _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readString();
                  _val66 = iprot.readI32();
                  struct.shareByGroup.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setShareByGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserResource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        struct.resource.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.shareByGroup != null) {
        oprot.writeFieldBegin(SHARE_BY_GROUP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.shareByGroup.size()));
          for (Map.Entry<String, Integer> _iter68 : struct.shareByGroup.entrySet())
          {
            oprot.writeString(_iter68.getKey());
            oprot.writeI32(_iter68.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserResourceTupleSchemeFactory implements SchemeFactory {
    public TUserResourceTupleScheme getScheme() {
      return new TUserResourceTupleScheme();
    }
  }

  private static class TUserResourceTupleScheme extends TupleScheme<TUserResource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserResource struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.resource.write(oprot);
      {
        oprot.writeI32(struct.shareByGroup.size());
        for (Map.Entry<String, Integer> _iter69 : struct.shareByGroup.entrySet())
        {
          oprot.writeString(_iter69.getKey());
          oprot.writeI32(_iter69.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserResource struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.resource = new TResourceGroup();
      struct.resource.read(iprot);
      struct.setResourceIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.shareByGroup = new HashMap<String,Integer>(2*_map70.size);
        String _key71;
        int _val72;
        for (int _i73 = 0; _i73 < _map70.size; ++_i73)
        {
          _key71 = iprot.readString();
          _val72 = iprot.readI32();
          struct.shareByGroup.put(_key71, _val72);
        }
      }
      struct.setShareByGroupIsSet(true);
    }
  }

}

