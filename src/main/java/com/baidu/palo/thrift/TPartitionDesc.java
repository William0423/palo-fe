/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TPartitionDesc implements org.apache.thrift.TBase<TPartitionDesc, TPartitionDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionDesc");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_num", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HASH_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_partition", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RANGE_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("range_partition", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RANDOM_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("random_partition", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartitionDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartitionDescTupleSchemeFactory());
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPartitionType
   */
  public com.baidu.palo.thrift.TPartitionType type; // required
  public int partition_num; // required
  public THashPartitionDesc hash_partition; // optional
  public TRangePartitionDesc range_partition; // optional
  public TRandomPartitionDesc random_partition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.baidu.palo.thrift.TPartitionType
     */
    TYPE((short)1, "type"),
    PARTITION_NUM((short)2, "partition_num"),
    HASH_PARTITION((short)3, "hash_partition"),
    RANGE_PARTITION((short)4, "range_partition"),
    RANDOM_PARTITION((short)5, "random_partition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // PARTITION_NUM
          return PARTITION_NUM;
        case 3: // HASH_PARTITION
          return HASH_PARTITION;
        case 4: // RANGE_PARTITION
          return RANGE_PARTITION;
        case 5: // RANDOM_PARTITION
          return RANDOM_PARTITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_NUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HASH_PARTITION,_Fields.RANGE_PARTITION,_Fields.RANDOM_PARTITION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TPartitionType.class)));
    tmpMap.put(_Fields.PARTITION_NUM, new org.apache.thrift.meta_data.FieldMetaData("partition_num", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HASH_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("hash_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THashPartitionDesc.class)));
    tmpMap.put(_Fields.RANGE_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("range_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRangePartitionDesc.class)));
    tmpMap.put(_Fields.RANDOM_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("random_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRandomPartitionDesc.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionDesc.class, metaDataMap);
  }

  public TPartitionDesc() {
  }

  public TPartitionDesc(
    com.baidu.palo.thrift.TPartitionType type,
    int partition_num)
  {
    this();
    this.type = type;
    this.partition_num = partition_num;
    setPartition_numIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionDesc(TPartitionDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.partition_num = other.partition_num;
    if (other.isSetHash_partition()) {
      this.hash_partition = new THashPartitionDesc(other.hash_partition);
    }
    if (other.isSetRange_partition()) {
      this.range_partition = new TRangePartitionDesc(other.range_partition);
    }
    if (other.isSetRandom_partition()) {
      this.random_partition = new TRandomPartitionDesc(other.random_partition);
    }
  }

  public TPartitionDesc deepCopy() {
    return new TPartitionDesc(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setPartition_numIsSet(false);
    this.partition_num = 0;
    this.hash_partition = null;
    this.range_partition = null;
    this.random_partition = null;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPartitionType
   */
  public com.baidu.palo.thrift.TPartitionType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TPartitionType
   */
  public TPartitionDesc setType(com.baidu.palo.thrift.TPartitionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getPartition_num() {
    return this.partition_num;
  }

  public TPartitionDesc setPartition_num(int partition_num) {
    this.partition_num = partition_num;
    setPartition_numIsSet(true);
    return this;
  }

  public void unsetPartition_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_NUM_ISSET_ID);
  }

  /** Returns true if field partition_num is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_num() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_NUM_ISSET_ID);
  }

  public void setPartition_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_NUM_ISSET_ID, value);
  }

  public THashPartitionDesc getHash_partition() {
    return this.hash_partition;
  }

  public TPartitionDesc setHash_partition(THashPartitionDesc hash_partition) {
    this.hash_partition = hash_partition;
    return this;
  }

  public void unsetHash_partition() {
    this.hash_partition = null;
  }

  /** Returns true if field hash_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_partition() {
    return this.hash_partition != null;
  }

  public void setHash_partitionIsSet(boolean value) {
    if (!value) {
      this.hash_partition = null;
    }
  }

  public TRangePartitionDesc getRange_partition() {
    return this.range_partition;
  }

  public TPartitionDesc setRange_partition(TRangePartitionDesc range_partition) {
    this.range_partition = range_partition;
    return this;
  }

  public void unsetRange_partition() {
    this.range_partition = null;
  }

  /** Returns true if field range_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_partition() {
    return this.range_partition != null;
  }

  public void setRange_partitionIsSet(boolean value) {
    if (!value) {
      this.range_partition = null;
    }
  }

  public TRandomPartitionDesc getRandom_partition() {
    return this.random_partition;
  }

  public TPartitionDesc setRandom_partition(TRandomPartitionDesc random_partition) {
    this.random_partition = random_partition;
    return this;
  }

  public void unsetRandom_partition() {
    this.random_partition = null;
  }

  /** Returns true if field random_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetRandom_partition() {
    return this.random_partition != null;
  }

  public void setRandom_partitionIsSet(boolean value) {
    if (!value) {
      this.random_partition = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.baidu.palo.thrift.TPartitionType)value);
      }
      break;

    case PARTITION_NUM:
      if (value == null) {
        unsetPartition_num();
      } else {
        setPartition_num((Integer)value);
      }
      break;

    case HASH_PARTITION:
      if (value == null) {
        unsetHash_partition();
      } else {
        setHash_partition((THashPartitionDesc)value);
      }
      break;

    case RANGE_PARTITION:
      if (value == null) {
        unsetRange_partition();
      } else {
        setRange_partition((TRangePartitionDesc)value);
      }
      break;

    case RANDOM_PARTITION:
      if (value == null) {
        unsetRandom_partition();
      } else {
        setRandom_partition((TRandomPartitionDesc)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case PARTITION_NUM:
      return getPartition_num();

    case HASH_PARTITION:
      return getHash_partition();

    case RANGE_PARTITION:
      return getRange_partition();

    case RANDOM_PARTITION:
      return getRandom_partition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case PARTITION_NUM:
      return isSetPartition_num();
    case HASH_PARTITION:
      return isSetHash_partition();
    case RANGE_PARTITION:
      return isSetRange_partition();
    case RANDOM_PARTITION:
      return isSetRandom_partition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartitionDesc)
      return this.equals((TPartitionDesc)that);
    return false;
  }

  public boolean equals(TPartitionDesc that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_partition_num = true;
    boolean that_present_partition_num = true;
    if (this_present_partition_num || that_present_partition_num) {
      if (!(this_present_partition_num && that_present_partition_num))
        return false;
      if (this.partition_num != that.partition_num)
        return false;
    }

    boolean this_present_hash_partition = true && this.isSetHash_partition();
    boolean that_present_hash_partition = true && that.isSetHash_partition();
    if (this_present_hash_partition || that_present_hash_partition) {
      if (!(this_present_hash_partition && that_present_hash_partition))
        return false;
      if (!this.hash_partition.equals(that.hash_partition))
        return false;
    }

    boolean this_present_range_partition = true && this.isSetRange_partition();
    boolean that_present_range_partition = true && that.isSetRange_partition();
    if (this_present_range_partition || that_present_range_partition) {
      if (!(this_present_range_partition && that_present_range_partition))
        return false;
      if (!this.range_partition.equals(that.range_partition))
        return false;
    }

    boolean this_present_random_partition = true && this.isSetRandom_partition();
    boolean that_present_random_partition = true && that.isSetRandom_partition();
    if (this_present_random_partition || that_present_random_partition) {
      if (!(this_present_random_partition && that_present_random_partition))
        return false;
      if (!this.random_partition.equals(that.random_partition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_partition_num = true;
    list.add(present_partition_num);
    if (present_partition_num)
      list.add(partition_num);

    boolean present_hash_partition = true && (isSetHash_partition());
    list.add(present_hash_partition);
    if (present_hash_partition)
      list.add(hash_partition);

    boolean present_range_partition = true && (isSetRange_partition());
    list.add(present_range_partition);
    if (present_range_partition)
      list.add(range_partition);

    boolean present_random_partition = true && (isSetRandom_partition());
    list.add(present_random_partition);
    if (present_random_partition)
      list.add(random_partition);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPartitionDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_num()).compareTo(other.isSetPartition_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_num, other.partition_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash_partition()).compareTo(other.isSetHash_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_partition, other.hash_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange_partition()).compareTo(other.isSetRange_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_partition, other.range_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandom_partition()).compareTo(other.isSetRandom_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandom_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.random_partition, other.random_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartitionDesc(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_num:");
    sb.append(this.partition_num);
    first = false;
    if (isSetHash_partition()) {
      if (!first) sb.append(", ");
      sb.append("hash_partition:");
      if (this.hash_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_partition);
      }
      first = false;
    }
    if (isSetRange_partition()) {
      if (!first) sb.append(", ");
      sb.append("range_partition:");
      if (this.range_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.range_partition);
      }
      first = false;
    }
    if (isSetRandom_partition()) {
      if (!first) sb.append(", ");
      sb.append("random_partition:");
      if (this.random_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.random_partition);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'partition_num' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hash_partition != null) {
      hash_partition.validate();
    }
    if (range_partition != null) {
      range_partition.validate();
    }
    if (random_partition != null) {
      random_partition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionDescStandardSchemeFactory implements SchemeFactory {
    public TPartitionDescStandardScheme getScheme() {
      return new TPartitionDescStandardScheme();
    }
  }

  private static class TPartitionDescStandardScheme extends StandardScheme<TPartitionDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.baidu.palo.thrift.TPartitionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_num = iprot.readI32();
              struct.setPartition_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HASH_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_partition = new THashPartitionDesc();
              struct.hash_partition.read(iprot);
              struct.setHash_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANGE_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range_partition = new TRangePartitionDesc();
              struct.range_partition.read(iprot);
              struct.setRange_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RANDOM_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.random_partition = new TRandomPartitionDesc();
              struct.random_partition.read(iprot);
              struct.setRandom_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPartition_num()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_num' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTITION_NUM_FIELD_DESC);
      oprot.writeI32(struct.partition_num);
      oprot.writeFieldEnd();
      if (struct.hash_partition != null) {
        if (struct.isSetHash_partition()) {
          oprot.writeFieldBegin(HASH_PARTITION_FIELD_DESC);
          struct.hash_partition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.range_partition != null) {
        if (struct.isSetRange_partition()) {
          oprot.writeFieldBegin(RANGE_PARTITION_FIELD_DESC);
          struct.range_partition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.random_partition != null) {
        if (struct.isSetRandom_partition()) {
          oprot.writeFieldBegin(RANDOM_PARTITION_FIELD_DESC);
          struct.random_partition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionDescTupleSchemeFactory implements SchemeFactory {
    public TPartitionDescTupleScheme getScheme() {
      return new TPartitionDescTupleScheme();
    }
  }

  private static class TPartitionDescTupleScheme extends TupleScheme<TPartitionDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.partition_num);
      BitSet optionals = new BitSet();
      if (struct.isSetHash_partition()) {
        optionals.set(0);
      }
      if (struct.isSetRange_partition()) {
        optionals.set(1);
      }
      if (struct.isSetRandom_partition()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHash_partition()) {
        struct.hash_partition.write(oprot);
      }
      if (struct.isSetRange_partition()) {
        struct.range_partition.write(oprot);
      }
      if (struct.isSetRandom_partition()) {
        struct.random_partition.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.baidu.palo.thrift.TPartitionType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.partition_num = iprot.readI32();
      struct.setPartition_numIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hash_partition = new THashPartitionDesc();
        struct.hash_partition.read(iprot);
        struct.setHash_partitionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.range_partition = new TRangePartitionDesc();
        struct.range_partition.read(iprot);
        struct.setRange_partitionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.random_partition = new TRandomPartitionDesc();
        struct.random_partition.read(iprot);
        struct.setRandom_partitionIsSet(true);
      }
    }
  }

}

