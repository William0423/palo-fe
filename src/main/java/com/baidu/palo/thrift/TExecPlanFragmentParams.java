/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TExecPlanFragmentParams implements org.apache.thrift.TBase<TExecPlanFragmentParams, TExecPlanFragmentParams._Fields>, java.io.Serializable, Cloneable, Comparable<TExecPlanFragmentParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecPlanFragmentParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COORD_FIELD_DESC = new org.apache.thrift.protocol.TField("coord", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField IS_REPORT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("is_report_success", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_info", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IMPORT_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("import_label", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LOAD_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_job_id", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_ERROR_HUB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("load_error_hub_info", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecPlanFragmentParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecPlanFragmentParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  public PaloInternalServiceVersion protocol_version; // required
  public com.baidu.palo.thrift.TPlanFragment fragment; // optional
  public com.baidu.palo.thrift.TDescriptorTable desc_tbl; // optional
  public TPlanFragmentExecParams params; // optional
  public com.baidu.palo.thrift.TNetworkAddress coord; // optional
  public int backend_num; // optional
  public TQueryGlobals query_globals; // optional
  public TQueryOptions query_options; // optional
  public boolean is_report_success; // optional
  public com.baidu.palo.thrift.TResourceInfo resource_info; // optional
  public String import_label; // optional
  public String db_name; // optional
  public long load_job_id; // optional
  public TLoadErrorHubInfo load_error_hub_info; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PaloInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FRAGMENT((short)2, "fragment"),
    DESC_TBL((short)3, "desc_tbl"),
    PARAMS((short)4, "params"),
    COORD((short)5, "coord"),
    BACKEND_NUM((short)6, "backend_num"),
    QUERY_GLOBALS((short)7, "query_globals"),
    QUERY_OPTIONS((short)8, "query_options"),
    IS_REPORT_SUCCESS((short)9, "is_report_success"),
    RESOURCE_INFO((short)10, "resource_info"),
    IMPORT_LABEL((short)11, "import_label"),
    DB_NAME((short)12, "db_name"),
    LOAD_JOB_ID((short)13, "load_job_id"),
    LOAD_ERROR_HUB_INFO((short)14, "load_error_hub_info");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FRAGMENT
          return FRAGMENT;
        case 3: // DESC_TBL
          return DESC_TBL;
        case 4: // PARAMS
          return PARAMS;
        case 5: // COORD
          return COORD;
        case 6: // BACKEND_NUM
          return BACKEND_NUM;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 8: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 9: // IS_REPORT_SUCCESS
          return IS_REPORT_SUCCESS;
        case 10: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 11: // IMPORT_LABEL
          return IMPORT_LABEL;
        case 12: // DB_NAME
          return DB_NAME;
        case 13: // LOAD_JOB_ID
          return LOAD_JOB_ID;
        case 14: // LOAD_ERROR_HUB_INFO
          return LOAD_ERROR_HUB_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __IS_REPORT_SUCCESS_ISSET_ID = 1;
  private static final int __LOAD_JOB_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FRAGMENT,_Fields.DESC_TBL,_Fields.PARAMS,_Fields.COORD,_Fields.BACKEND_NUM,_Fields.QUERY_GLOBALS,_Fields.QUERY_OPTIONS,_Fields.IS_REPORT_SUCCESS,_Fields.RESOURCE_INFO,_Fields.IMPORT_LABEL,_Fields.DB_NAME,_Fields.LOAD_JOB_ID,_Fields.LOAD_ERROR_HUB_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaloInternalServiceVersion.class)));
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentExecParams.class)));
    tmpMap.put(_Fields.COORD, new org.apache.thrift.meta_data.FieldMetaData("coord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
    tmpMap.put(_Fields.IS_REPORT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("is_report_success", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resource_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.IMPORT_LABEL, new org.apache.thrift.meta_data.FieldMetaData("import_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("load_job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_ERROR_HUB_INFO, new org.apache.thrift.meta_data.FieldMetaData("load_error_hub_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLoadErrorHubInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecPlanFragmentParams.class, metaDataMap);
  }

  public TExecPlanFragmentParams() {
  }

  public TExecPlanFragmentParams(
    PaloInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecPlanFragmentParams(TExecPlanFragmentParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetFragment()) {
      this.fragment = new com.baidu.palo.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetParams()) {
      this.params = new TPlanFragmentExecParams(other.params);
    }
    if (other.isSetCoord()) {
      this.coord = new com.baidu.palo.thrift.TNetworkAddress(other.coord);
    }
    this.backend_num = other.backend_num;
    if (other.isSetQuery_globals()) {
      this.query_globals = new TQueryGlobals(other.query_globals);
    }
    if (other.isSetQuery_options()) {
      this.query_options = new TQueryOptions(other.query_options);
    }
    this.is_report_success = other.is_report_success;
    if (other.isSetResource_info()) {
      this.resource_info = new com.baidu.palo.thrift.TResourceInfo(other.resource_info);
    }
    if (other.isSetImport_label()) {
      this.import_label = other.import_label;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    this.load_job_id = other.load_job_id;
    if (other.isSetLoad_error_hub_info()) {
      this.load_error_hub_info = new TLoadErrorHubInfo(other.load_error_hub_info);
    }
  }

  public TExecPlanFragmentParams deepCopy() {
    return new TExecPlanFragmentParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.fragment = null;
    this.desc_tbl = null;
    this.params = null;
    this.coord = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.query_globals = null;
    this.query_options = null;
    setIs_report_successIsSet(false);
    this.is_report_success = false;
    this.resource_info = null;
    this.import_label = null;
    this.db_name = null;
    setLoad_job_idIsSet(false);
    this.load_job_id = 0;
    this.load_error_hub_info = null;
  }

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  public PaloInternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  public TExecPlanFragmentParams setProtocol_version(PaloInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public com.baidu.palo.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TExecPlanFragmentParams setFragment(com.baidu.palo.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  public com.baidu.palo.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecPlanFragmentParams setDesc_tbl(com.baidu.palo.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public TPlanFragmentExecParams getParams() {
    return this.params;
  }

  public TExecPlanFragmentParams setParams(TPlanFragmentExecParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public com.baidu.palo.thrift.TNetworkAddress getCoord() {
    return this.coord;
  }

  public TExecPlanFragmentParams setCoord(com.baidu.palo.thrift.TNetworkAddress coord) {
    this.coord = coord;
    return this;
  }

  public void unsetCoord() {
    this.coord = null;
  }

  /** Returns true if field coord is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord() {
    return this.coord != null;
  }

  public void setCoordIsSet(boolean value) {
    if (!value) {
      this.coord = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TExecPlanFragmentParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  public TQueryGlobals getQuery_globals() {
    return this.query_globals;
  }

  public TExecPlanFragmentParams setQuery_globals(TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQuery_globals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_globals() {
    return this.query_globals != null;
  }

  public void setQuery_globalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  public TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TExecPlanFragmentParams setQuery_options(TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public boolean isIs_report_success() {
    return this.is_report_success;
  }

  public TExecPlanFragmentParams setIs_report_success(boolean is_report_success) {
    this.is_report_success = is_report_success;
    setIs_report_successIsSet(true);
    return this;
  }

  public void unsetIs_report_success() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID);
  }

  /** Returns true if field is_report_success is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_report_success() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID);
  }

  public void setIs_report_successIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID, value);
  }

  public com.baidu.palo.thrift.TResourceInfo getResource_info() {
    return this.resource_info;
  }

  public TExecPlanFragmentParams setResource_info(com.baidu.palo.thrift.TResourceInfo resource_info) {
    this.resource_info = resource_info;
    return this;
  }

  public void unsetResource_info() {
    this.resource_info = null;
  }

  /** Returns true if field resource_info is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_info() {
    return this.resource_info != null;
  }

  public void setResource_infoIsSet(boolean value) {
    if (!value) {
      this.resource_info = null;
    }
  }

  public String getImport_label() {
    return this.import_label;
  }

  public TExecPlanFragmentParams setImport_label(String import_label) {
    this.import_label = import_label;
    return this;
  }

  public void unsetImport_label() {
    this.import_label = null;
  }

  /** Returns true if field import_label is set (has been assigned a value) and false otherwise */
  public boolean isSetImport_label() {
    return this.import_label != null;
  }

  public void setImport_labelIsSet(boolean value) {
    if (!value) {
      this.import_label = null;
    }
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TExecPlanFragmentParams setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public long getLoad_job_id() {
    return this.load_job_id;
  }

  public TExecPlanFragmentParams setLoad_job_id(long load_job_id) {
    this.load_job_id = load_job_id;
    setLoad_job_idIsSet(true);
    return this;
  }

  public void unsetLoad_job_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  /** Returns true if field load_job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_job_id() {
    return EncodingUtils.testBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  public void setLoad_job_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID, value);
  }

  public TLoadErrorHubInfo getLoad_error_hub_info() {
    return this.load_error_hub_info;
  }

  public TExecPlanFragmentParams setLoad_error_hub_info(TLoadErrorHubInfo load_error_hub_info) {
    this.load_error_hub_info = load_error_hub_info;
    return this;
  }

  public void unsetLoad_error_hub_info() {
    this.load_error_hub_info = null;
  }

  /** Returns true if field load_error_hub_info is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_error_hub_info() {
    return this.load_error_hub_info != null;
  }

  public void setLoad_error_hub_infoIsSet(boolean value) {
    if (!value) {
      this.load_error_hub_info = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((PaloInternalServiceVersion)value);
      }
      break;

    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((com.baidu.palo.thrift.TPlanFragment)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.baidu.palo.thrift.TDescriptorTable)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TPlanFragmentExecParams)value);
      }
      break;

    case COORD:
      if (value == null) {
        unsetCoord();
      } else {
        setCoord((com.baidu.palo.thrift.TNetworkAddress)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((Integer)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQuery_globals();
      } else {
        setQuery_globals((TQueryGlobals)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((TQueryOptions)value);
      }
      break;

    case IS_REPORT_SUCCESS:
      if (value == null) {
        unsetIs_report_success();
      } else {
        setIs_report_success((Boolean)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResource_info();
      } else {
        setResource_info((com.baidu.palo.thrift.TResourceInfo)value);
      }
      break;

    case IMPORT_LABEL:
      if (value == null) {
        unsetImport_label();
      } else {
        setImport_label((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case LOAD_JOB_ID:
      if (value == null) {
        unsetLoad_job_id();
      } else {
        setLoad_job_id((Long)value);
      }
      break;

    case LOAD_ERROR_HUB_INFO:
      if (value == null) {
        unsetLoad_error_hub_info();
      } else {
        setLoad_error_hub_info((TLoadErrorHubInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case FRAGMENT:
      return getFragment();

    case DESC_TBL:
      return getDesc_tbl();

    case PARAMS:
      return getParams();

    case COORD:
      return getCoord();

    case BACKEND_NUM:
      return getBackend_num();

    case QUERY_GLOBALS:
      return getQuery_globals();

    case QUERY_OPTIONS:
      return getQuery_options();

    case IS_REPORT_SUCCESS:
      return isIs_report_success();

    case RESOURCE_INFO:
      return getResource_info();

    case IMPORT_LABEL:
      return getImport_label();

    case DB_NAME:
      return getDb_name();

    case LOAD_JOB_ID:
      return getLoad_job_id();

    case LOAD_ERROR_HUB_INFO:
      return getLoad_error_hub_info();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case FRAGMENT:
      return isSetFragment();
    case DESC_TBL:
      return isSetDesc_tbl();
    case PARAMS:
      return isSetParams();
    case COORD:
      return isSetCoord();
    case BACKEND_NUM:
      return isSetBackend_num();
    case QUERY_GLOBALS:
      return isSetQuery_globals();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case IS_REPORT_SUCCESS:
      return isSetIs_report_success();
    case RESOURCE_INFO:
      return isSetResource_info();
    case IMPORT_LABEL:
      return isSetImport_label();
    case DB_NAME:
      return isSetDb_name();
    case LOAD_JOB_ID:
      return isSetLoad_job_id();
    case LOAD_ERROR_HUB_INFO:
      return isSetLoad_error_hub_info();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecPlanFragmentParams)
      return this.equals((TExecPlanFragmentParams)that);
    return false;
  }

  public boolean equals(TExecPlanFragmentParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_coord = true && this.isSetCoord();
    boolean that_present_coord = true && that.isSetCoord();
    if (this_present_coord || that_present_coord) {
      if (!(this_present_coord && that_present_coord))
        return false;
      if (!this.coord.equals(that.coord))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQuery_globals();
    boolean that_present_query_globals = true && that.isSetQuery_globals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_is_report_success = true && this.isSetIs_report_success();
    boolean that_present_is_report_success = true && that.isSetIs_report_success();
    if (this_present_is_report_success || that_present_is_report_success) {
      if (!(this_present_is_report_success && that_present_is_report_success))
        return false;
      if (this.is_report_success != that.is_report_success)
        return false;
    }

    boolean this_present_resource_info = true && this.isSetResource_info();
    boolean that_present_resource_info = true && that.isSetResource_info();
    if (this_present_resource_info || that_present_resource_info) {
      if (!(this_present_resource_info && that_present_resource_info))
        return false;
      if (!this.resource_info.equals(that.resource_info))
        return false;
    }

    boolean this_present_import_label = true && this.isSetImport_label();
    boolean that_present_import_label = true && that.isSetImport_label();
    if (this_present_import_label || that_present_import_label) {
      if (!(this_present_import_label && that_present_import_label))
        return false;
      if (!this.import_label.equals(that.import_label))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_load_job_id = true && this.isSetLoad_job_id();
    boolean that_present_load_job_id = true && that.isSetLoad_job_id();
    if (this_present_load_job_id || that_present_load_job_id) {
      if (!(this_present_load_job_id && that_present_load_job_id))
        return false;
      if (this.load_job_id != that.load_job_id)
        return false;
    }

    boolean this_present_load_error_hub_info = true && this.isSetLoad_error_hub_info();
    boolean that_present_load_error_hub_info = true && that.isSetLoad_error_hub_info();
    if (this_present_load_error_hub_info || that_present_load_error_hub_info) {
      if (!(this_present_load_error_hub_info && that_present_load_error_hub_info))
        return false;
      if (!this.load_error_hub_info.equals(that.load_error_hub_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_fragment = true && (isSetFragment());
    list.add(present_fragment);
    if (present_fragment)
      list.add(fragment);

    boolean present_desc_tbl = true && (isSetDesc_tbl());
    list.add(present_desc_tbl);
    if (present_desc_tbl)
      list.add(desc_tbl);

    boolean present_params = true && (isSetParams());
    list.add(present_params);
    if (present_params)
      list.add(params);

    boolean present_coord = true && (isSetCoord());
    list.add(present_coord);
    if (present_coord)
      list.add(coord);

    boolean present_backend_num = true && (isSetBackend_num());
    list.add(present_backend_num);
    if (present_backend_num)
      list.add(backend_num);

    boolean present_query_globals = true && (isSetQuery_globals());
    list.add(present_query_globals);
    if (present_query_globals)
      list.add(query_globals);

    boolean present_query_options = true && (isSetQuery_options());
    list.add(present_query_options);
    if (present_query_options)
      list.add(query_options);

    boolean present_is_report_success = true && (isSetIs_report_success());
    list.add(present_is_report_success);
    if (present_is_report_success)
      list.add(is_report_success);

    boolean present_resource_info = true && (isSetResource_info());
    list.add(present_resource_info);
    if (present_resource_info)
      list.add(resource_info);

    boolean present_import_label = true && (isSetImport_label());
    list.add(present_import_label);
    if (present_import_label)
      list.add(import_label);

    boolean present_db_name = true && (isSetDb_name());
    list.add(present_db_name);
    if (present_db_name)
      list.add(db_name);

    boolean present_load_job_id = true && (isSetLoad_job_id());
    list.add(present_load_job_id);
    if (present_load_job_id)
      list.add(load_job_id);

    boolean present_load_error_hub_info = true && (isSetLoad_error_hub_info());
    list.add(present_load_error_hub_info);
    if (present_load_error_hub_info)
      list.add(load_error_hub_info);

    return list.hashCode();
  }

  @Override
  public int compareTo(TExecPlanFragmentParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment()).compareTo(other.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, other.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc_tbl()).compareTo(other.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoord()).compareTo(other.isSetCoord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord, other.coord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend_num()).compareTo(other.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_globals()).compareTo(other.isSetQuery_globals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_globals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, other.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_options()).compareTo(other.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_report_success()).compareTo(other.isSetIs_report_success());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_report_success()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_report_success, other.is_report_success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_info()).compareTo(other.isSetResource_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_info, other.resource_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImport_label()).compareTo(other.isSetImport_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImport_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.import_label, other.import_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_job_id()).compareTo(other.isSetLoad_job_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_job_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_job_id, other.load_job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_error_hub_info()).compareTo(other.isSetLoad_error_hub_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_error_hub_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_error_hub_info, other.load_error_hub_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecPlanFragmentParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFragment()) {
      if (!first) sb.append(", ");
      sb.append("fragment:");
      if (this.fragment == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment);
      }
      first = false;
    }
    if (isSetDesc_tbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetCoord()) {
      if (!first) sb.append(", ");
      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetQuery_globals()) {
      if (!first) sb.append(", ");
      sb.append("query_globals:");
      if (this.query_globals == null) {
        sb.append("null");
      } else {
        sb.append(this.query_globals);
      }
      first = false;
    }
    if (isSetQuery_options()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetIs_report_success()) {
      if (!first) sb.append(", ");
      sb.append("is_report_success:");
      sb.append(this.is_report_success);
      first = false;
    }
    if (isSetResource_info()) {
      if (!first) sb.append(", ");
      sb.append("resource_info:");
      if (this.resource_info == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_info);
      }
      first = false;
    }
    if (isSetImport_label()) {
      if (!first) sb.append(", ");
      sb.append("import_label:");
      if (this.import_label == null) {
        sb.append("null");
      } else {
        sb.append(this.import_label);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetLoad_job_id()) {
      if (!first) sb.append(", ");
      sb.append("load_job_id:");
      sb.append(this.load_job_id);
      first = false;
    }
    if (isSetLoad_error_hub_info()) {
      if (!first) sb.append(", ");
      sb.append("load_error_hub_info:");
      if (this.load_error_hub_info == null) {
        sb.append("null");
      } else {
        sb.append(this.load_error_hub_info);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (coord != null) {
      coord.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (resource_info != null) {
      resource_info.validate();
    }
    if (load_error_hub_info != null) {
      load_error_hub_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecPlanFragmentParamsStandardSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsStandardScheme getScheme() {
      return new TExecPlanFragmentParamsStandardScheme();
    }
  }

  private static class TExecPlanFragmentParamsStandardScheme extends StandardScheme<TExecPlanFragmentParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = com.baidu.palo.thrift.PaloInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new com.baidu.palo.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TPlanFragmentExecParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord = new com.baidu.palo.thrift.TNetworkAddress();
              struct.coord.read(iprot);
              struct.setCoordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQuery_globalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_REPORT_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_report_success = iprot.readBool();
              struct.setIs_report_successIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_info = new com.baidu.palo.thrift.TResourceInfo();
              struct.resource_info.read(iprot);
              struct.setResource_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMPORT_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.import_label = iprot.readString();
              struct.setImport_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAD_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_job_id = iprot.readI64();
              struct.setLoad_job_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_ERROR_HUB_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_error_hub_info = new TLoadErrorHubInfo();
              struct.load_error_hub_info.read(iprot);
              struct.setLoad_error_hub_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fragment != null) {
        if (struct.isSetFragment()) {
          oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
          struct.fragment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coord != null) {
        if (struct.isSetCoord()) {
          oprot.writeFieldBegin(COORD_FIELD_DESC);
          struct.coord.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.query_globals != null) {
        if (struct.isSetQuery_globals()) {
          oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
          struct.query_globals.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_options != null) {
        if (struct.isSetQuery_options()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_report_success()) {
        oprot.writeFieldBegin(IS_REPORT_SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.is_report_success);
        oprot.writeFieldEnd();
      }
      if (struct.resource_info != null) {
        if (struct.isSetResource_info()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resource_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.import_label != null) {
        if (struct.isSetImport_label()) {
          oprot.writeFieldBegin(IMPORT_LABEL_FIELD_DESC);
          oprot.writeString(struct.import_label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoad_job_id()) {
        oprot.writeFieldBegin(LOAD_JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.load_job_id);
        oprot.writeFieldEnd();
      }
      if (struct.load_error_hub_info != null) {
        if (struct.isSetLoad_error_hub_info()) {
          oprot.writeFieldBegin(LOAD_ERROR_HUB_INFO_FIELD_DESC);
          struct.load_error_hub_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecPlanFragmentParamsTupleSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsTupleScheme getScheme() {
      return new TExecPlanFragmentParamsTupleScheme();
    }
  }

  private static class TExecPlanFragmentParamsTupleScheme extends TupleScheme<TExecPlanFragmentParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFragment()) {
        optionals.set(0);
      }
      if (struct.isSetDesc_tbl()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetCoord()) {
        optionals.set(3);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_globals()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_options()) {
        optionals.set(6);
      }
      if (struct.isSetIs_report_success()) {
        optionals.set(7);
      }
      if (struct.isSetResource_info()) {
        optionals.set(8);
      }
      if (struct.isSetImport_label()) {
        optionals.set(9);
      }
      if (struct.isSetDb_name()) {
        optionals.set(10);
      }
      if (struct.isSetLoad_job_id()) {
        optionals.set(11);
      }
      if (struct.isSetLoad_error_hub_info()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetFragment()) {
        struct.fragment.write(oprot);
      }
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetCoord()) {
        struct.coord.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetQuery_globals()) {
        struct.query_globals.write(oprot);
      }
      if (struct.isSetQuery_options()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetIs_report_success()) {
        oprot.writeBool(struct.is_report_success);
      }
      if (struct.isSetResource_info()) {
        struct.resource_info.write(oprot);
      }
      if (struct.isSetImport_label()) {
        oprot.writeString(struct.import_label);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetLoad_job_id()) {
        oprot.writeI64(struct.load_job_id);
      }
      if (struct.isSetLoad_error_hub_info()) {
        struct.load_error_hub_info.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = com.baidu.palo.thrift.PaloInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.fragment = new com.baidu.palo.thrift.TPlanFragment();
        struct.fragment.read(iprot);
        struct.setFragmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc_tbl = new com.baidu.palo.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new TPlanFragmentExecParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coord = new com.baidu.palo.thrift.TNetworkAddress();
        struct.coord.read(iprot);
        struct.setCoordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_globals = new TQueryGlobals();
        struct.query_globals.read(iprot);
        struct.setQuery_globalsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_options = new TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQuery_optionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_report_success = iprot.readBool();
        struct.setIs_report_successIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resource_info = new com.baidu.palo.thrift.TResourceInfo();
        struct.resource_info.read(iprot);
        struct.setResource_infoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.import_label = iprot.readString();
        struct.setImport_labelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.load_job_id = iprot.readI64();
        struct.setLoad_job_idIsSet(true);
      }
      if (incoming.get(12)) {
        struct.load_error_hub_info = new TLoadErrorHubInfo();
        struct.load_error_hub_info.read(iprot);
        struct.setLoad_error_hub_infoIsSet(true);
      }
    }
  }

}

