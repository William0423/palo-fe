/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TPartitionRange implements org.apache.thrift.TBase<TPartitionRange, TPartitionRange._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionRange");

  private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField INCLUDE_START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("include_start_key", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("include_end_key", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartitionRangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartitionRangeTupleSchemeFactory());
  }

  public TPartitionKey start_key; // required
  public TPartitionKey end_key; // required
  public boolean include_start_key; // required
  public boolean include_end_key; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_KEY((short)1, "start_key"),
    END_KEY((short)2, "end_key"),
    INCLUDE_START_KEY((short)3, "include_start_key"),
    INCLUDE_END_KEY((short)4, "include_end_key");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_KEY
          return START_KEY;
        case 2: // END_KEY
          return END_KEY;
        case 3: // INCLUDE_START_KEY
          return INCLUDE_START_KEY;
        case 4: // INCLUDE_END_KEY
          return INCLUDE_END_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDE_START_KEY_ISSET_ID = 0;
  private static final int __INCLUDE_END_KEY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionKey.class)));
    tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionKey.class)));
    tmpMap.put(_Fields.INCLUDE_START_KEY, new org.apache.thrift.meta_data.FieldMetaData("include_start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_END_KEY, new org.apache.thrift.meta_data.FieldMetaData("include_end_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionRange.class, metaDataMap);
  }

  public TPartitionRange() {
  }

  public TPartitionRange(
    TPartitionKey start_key,
    TPartitionKey end_key,
    boolean include_start_key,
    boolean include_end_key)
  {
    this();
    this.start_key = start_key;
    this.end_key = end_key;
    this.include_start_key = include_start_key;
    setInclude_start_keyIsSet(true);
    this.include_end_key = include_end_key;
    setInclude_end_keyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionRange(TPartitionRange other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStart_key()) {
      this.start_key = new TPartitionKey(other.start_key);
    }
    if (other.isSetEnd_key()) {
      this.end_key = new TPartitionKey(other.end_key);
    }
    this.include_start_key = other.include_start_key;
    this.include_end_key = other.include_end_key;
  }

  public TPartitionRange deepCopy() {
    return new TPartitionRange(this);
  }

  @Override
  public void clear() {
    this.start_key = null;
    this.end_key = null;
    setInclude_start_keyIsSet(false);
    this.include_start_key = false;
    setInclude_end_keyIsSet(false);
    this.include_end_key = false;
  }

  public TPartitionKey getStart_key() {
    return this.start_key;
  }

  public TPartitionRange setStart_key(TPartitionKey start_key) {
    this.start_key = start_key;
    return this;
  }

  public void unsetStart_key() {
    this.start_key = null;
  }

  /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_key() {
    return this.start_key != null;
  }

  public void setStart_keyIsSet(boolean value) {
    if (!value) {
      this.start_key = null;
    }
  }

  public TPartitionKey getEnd_key() {
    return this.end_key;
  }

  public TPartitionRange setEnd_key(TPartitionKey end_key) {
    this.end_key = end_key;
    return this;
  }

  public void unsetEnd_key() {
    this.end_key = null;
  }

  /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_key() {
    return this.end_key != null;
  }

  public void setEnd_keyIsSet(boolean value) {
    if (!value) {
      this.end_key = null;
    }
  }

  public boolean isInclude_start_key() {
    return this.include_start_key;
  }

  public TPartitionRange setInclude_start_key(boolean include_start_key) {
    this.include_start_key = include_start_key;
    setInclude_start_keyIsSet(true);
    return this;
  }

  public void unsetInclude_start_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDE_START_KEY_ISSET_ID);
  }

  /** Returns true if field include_start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetInclude_start_key() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDE_START_KEY_ISSET_ID);
  }

  public void setInclude_start_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDE_START_KEY_ISSET_ID, value);
  }

  public boolean isInclude_end_key() {
    return this.include_end_key;
  }

  public TPartitionRange setInclude_end_key(boolean include_end_key) {
    this.include_end_key = include_end_key;
    setInclude_end_keyIsSet(true);
    return this;
  }

  public void unsetInclude_end_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDE_END_KEY_ISSET_ID);
  }

  /** Returns true if field include_end_key is set (has been assigned a value) and false otherwise */
  public boolean isSetInclude_end_key() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDE_END_KEY_ISSET_ID);
  }

  public void setInclude_end_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDE_END_KEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_KEY:
      if (value == null) {
        unsetStart_key();
      } else {
        setStart_key((TPartitionKey)value);
      }
      break;

    case END_KEY:
      if (value == null) {
        unsetEnd_key();
      } else {
        setEnd_key((TPartitionKey)value);
      }
      break;

    case INCLUDE_START_KEY:
      if (value == null) {
        unsetInclude_start_key();
      } else {
        setInclude_start_key((Boolean)value);
      }
      break;

    case INCLUDE_END_KEY:
      if (value == null) {
        unsetInclude_end_key();
      } else {
        setInclude_end_key((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_KEY:
      return getStart_key();

    case END_KEY:
      return getEnd_key();

    case INCLUDE_START_KEY:
      return isInclude_start_key();

    case INCLUDE_END_KEY:
      return isInclude_end_key();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_KEY:
      return isSetStart_key();
    case END_KEY:
      return isSetEnd_key();
    case INCLUDE_START_KEY:
      return isSetInclude_start_key();
    case INCLUDE_END_KEY:
      return isSetInclude_end_key();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartitionRange)
      return this.equals((TPartitionRange)that);
    return false;
  }

  public boolean equals(TPartitionRange that) {
    if (that == null)
      return false;

    boolean this_present_start_key = true && this.isSetStart_key();
    boolean that_present_start_key = true && that.isSetStart_key();
    if (this_present_start_key || that_present_start_key) {
      if (!(this_present_start_key && that_present_start_key))
        return false;
      if (!this.start_key.equals(that.start_key))
        return false;
    }

    boolean this_present_end_key = true && this.isSetEnd_key();
    boolean that_present_end_key = true && that.isSetEnd_key();
    if (this_present_end_key || that_present_end_key) {
      if (!(this_present_end_key && that_present_end_key))
        return false;
      if (!this.end_key.equals(that.end_key))
        return false;
    }

    boolean this_present_include_start_key = true;
    boolean that_present_include_start_key = true;
    if (this_present_include_start_key || that_present_include_start_key) {
      if (!(this_present_include_start_key && that_present_include_start_key))
        return false;
      if (this.include_start_key != that.include_start_key)
        return false;
    }

    boolean this_present_include_end_key = true;
    boolean that_present_include_end_key = true;
    if (this_present_include_end_key || that_present_include_end_key) {
      if (!(this_present_include_end_key && that_present_include_end_key))
        return false;
      if (this.include_end_key != that.include_end_key)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_start_key = true && (isSetStart_key());
    list.add(present_start_key);
    if (present_start_key)
      list.add(start_key);

    boolean present_end_key = true && (isSetEnd_key());
    list.add(present_end_key);
    if (present_end_key)
      list.add(end_key);

    boolean present_include_start_key = true;
    list.add(present_include_start_key);
    if (present_include_start_key)
      list.add(include_start_key);

    boolean present_include_end_key = true;
    list.add(present_include_end_key);
    if (present_include_end_key)
      list.add(include_end_key);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPartitionRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(other.isSetEnd_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclude_start_key()).compareTo(other.isSetInclude_start_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclude_start_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.include_start_key, other.include_start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInclude_end_key()).compareTo(other.isSetInclude_end_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInclude_end_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.include_end_key, other.include_end_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartitionRange(");
    boolean first = true;

    sb.append("start_key:");
    if (this.start_key == null) {
      sb.append("null");
    } else {
      sb.append(this.start_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_key:");
    if (this.end_key == null) {
      sb.append("null");
    } else {
      sb.append(this.end_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("include_start_key:");
    sb.append(this.include_start_key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("include_end_key:");
    sb.append(this.include_end_key);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (start_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
    }
    if (end_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_key' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'include_start_key' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'include_end_key' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (start_key != null) {
      start_key.validate();
    }
    if (end_key != null) {
      end_key.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionRangeStandardSchemeFactory implements SchemeFactory {
    public TPartitionRangeStandardScheme getScheme() {
      return new TPartitionRangeStandardScheme();
    }
  }

  private static class TPartitionRangeStandardScheme extends StandardScheme<TPartitionRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start_key = new TPartitionKey();
              struct.start_key.read(iprot);
              struct.setStart_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.end_key = new TPartitionKey();
              struct.end_key.read(iprot);
              struct.setEnd_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCLUDE_START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.include_start_key = iprot.readBool();
              struct.setInclude_start_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.include_end_key = iprot.readBool();
              struct.setInclude_end_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetInclude_start_key()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'include_start_key' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInclude_end_key()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'include_end_key' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.start_key != null) {
        oprot.writeFieldBegin(START_KEY_FIELD_DESC);
        struct.start_key.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.end_key != null) {
        oprot.writeFieldBegin(END_KEY_FIELD_DESC);
        struct.end_key.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCLUDE_START_KEY_FIELD_DESC);
      oprot.writeBool(struct.include_start_key);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_END_KEY_FIELD_DESC);
      oprot.writeBool(struct.include_end_key);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionRangeTupleSchemeFactory implements SchemeFactory {
    public TPartitionRangeTupleScheme getScheme() {
      return new TPartitionRangeTupleScheme();
    }
  }

  private static class TPartitionRangeTupleScheme extends TupleScheme<TPartitionRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionRange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.start_key.write(oprot);
      struct.end_key.write(oprot);
      oprot.writeBool(struct.include_start_key);
      oprot.writeBool(struct.include_end_key);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionRange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.start_key = new TPartitionKey();
      struct.start_key.read(iprot);
      struct.setStart_keyIsSet(true);
      struct.end_key = new TPartitionKey();
      struct.end_key.read(iprot);
      struct.setEnd_keyIsSet(true);
      struct.include_start_key = iprot.readBool();
      struct.setInclude_start_keyIsSet(true);
      struct.include_end_key = iprot.readBool();
      struct.setInclude_end_keyIsSet(true);
    }
  }

}

