/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TFinishTaskRequest implements org.apache.thrift.TBase<TFinishTaskRequest, TFinishTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TFinishTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFinishTaskRequest");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_status", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField REPORT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("report_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FINISH_TABLET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_tablet_infos", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_checksum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("request_version", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("request_version_hash", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_path", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFinishTaskRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFinishTaskRequestTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TBackend backend; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TTaskType
   */
  public com.baidu.palo.thrift.TTaskType task_type; // required
  public long signature; // required
  public com.baidu.palo.thrift.TStatus task_status; // required
  public long report_version; // optional
  public List<TTabletInfo> finish_tablet_infos; // optional
  public long tablet_checksum; // optional
  public long request_version; // optional
  public long request_version_hash; // optional
  public String snapshot_path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    /**
     * 
     * @see com.baidu.palo.thrift.TTaskType
     */
    TASK_TYPE((short)2, "task_type"),
    SIGNATURE((short)3, "signature"),
    TASK_STATUS((short)4, "task_status"),
    REPORT_VERSION((short)5, "report_version"),
    FINISH_TABLET_INFOS((short)6, "finish_tablet_infos"),
    TABLET_CHECKSUM((short)7, "tablet_checksum"),
    REQUEST_VERSION((short)8, "request_version"),
    REQUEST_VERSION_HASH((short)9, "request_version_hash"),
    SNAPSHOT_PATH((short)10, "snapshot_path");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // TASK_STATUS
          return TASK_STATUS;
        case 5: // REPORT_VERSION
          return REPORT_VERSION;
        case 6: // FINISH_TABLET_INFOS
          return FINISH_TABLET_INFOS;
        case 7: // TABLET_CHECKSUM
          return TABLET_CHECKSUM;
        case 8: // REQUEST_VERSION
          return REQUEST_VERSION;
        case 9: // REQUEST_VERSION_HASH
          return REQUEST_VERSION_HASH;
        case 10: // SNAPSHOT_PATH
          return SNAPSHOT_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIGNATURE_ISSET_ID = 0;
  private static final int __REPORT_VERSION_ISSET_ID = 1;
  private static final int __TABLET_CHECKSUM_ISSET_ID = 2;
  private static final int __REQUEST_VERSION_ISSET_ID = 3;
  private static final int __REQUEST_VERSION_HASH_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPORT_VERSION,_Fields.FINISH_TABLET_INFOS,_Fields.TABLET_CHECKSUM,_Fields.REQUEST_VERSION,_Fields.REQUEST_VERSION_HASH,_Fields.SNAPSHOT_PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TBackend.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TTaskType.class)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("task_status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TStatus.class)));
    tmpMap.put(_Fields.REPORT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("report_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TABLET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("finish_tablet_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletInfo.class))));
    tmpMap.put(_Fields.TABLET_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("tablet_checksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("request_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("request_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SNAPSHOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("snapshot_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFinishTaskRequest.class, metaDataMap);
  }

  public TFinishTaskRequest() {
  }

  public TFinishTaskRequest(
    com.baidu.palo.thrift.TBackend backend,
    com.baidu.palo.thrift.TTaskType task_type,
    long signature,
    com.baidu.palo.thrift.TStatus task_status)
  {
    this();
    this.backend = backend;
    this.task_type = task_type;
    this.signature = signature;
    setSignatureIsSet(true);
    this.task_status = task_status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFinishTaskRequest(TFinishTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new com.baidu.palo.thrift.TBackend(other.backend);
    }
    if (other.isSetTask_type()) {
      this.task_type = other.task_type;
    }
    this.signature = other.signature;
    if (other.isSetTask_status()) {
      this.task_status = new com.baidu.palo.thrift.TStatus(other.task_status);
    }
    this.report_version = other.report_version;
    if (other.isSetFinish_tablet_infos()) {
      List<TTabletInfo> __this__finish_tablet_infos = new ArrayList<TTabletInfo>(other.finish_tablet_infos.size());
      for (TTabletInfo other_element : other.finish_tablet_infos) {
        __this__finish_tablet_infos.add(new TTabletInfo(other_element));
      }
      this.finish_tablet_infos = __this__finish_tablet_infos;
    }
    this.tablet_checksum = other.tablet_checksum;
    this.request_version = other.request_version;
    this.request_version_hash = other.request_version_hash;
    if (other.isSetSnapshot_path()) {
      this.snapshot_path = other.snapshot_path;
    }
  }

  public TFinishTaskRequest deepCopy() {
    return new TFinishTaskRequest(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    this.task_type = null;
    setSignatureIsSet(false);
    this.signature = 0;
    this.task_status = null;
    setReport_versionIsSet(false);
    this.report_version = 0;
    this.finish_tablet_infos = null;
    setTablet_checksumIsSet(false);
    this.tablet_checksum = 0;
    setRequest_versionIsSet(false);
    this.request_version = 0;
    setRequest_version_hashIsSet(false);
    this.request_version_hash = 0;
    this.snapshot_path = null;
  }

  public com.baidu.palo.thrift.TBackend getBackend() {
    return this.backend;
  }

  public TFinishTaskRequest setBackend(com.baidu.palo.thrift.TBackend backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TTaskType
   */
  public com.baidu.palo.thrift.TTaskType getTask_type() {
    return this.task_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TTaskType
   */
  public TFinishTaskRequest setTask_type(com.baidu.palo.thrift.TTaskType task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTask_type() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_type() {
    return this.task_type != null;
  }

  public void setTask_typeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public long getSignature() {
    return this.signature;
  }

  public TFinishTaskRequest setSignature(long signature) {
    this.signature = signature;
    setSignatureIsSet(true);
    return this;
  }

  public void unsetSignature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  public void setSignatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNATURE_ISSET_ID, value);
  }

  public com.baidu.palo.thrift.TStatus getTask_status() {
    return this.task_status;
  }

  public TFinishTaskRequest setTask_status(com.baidu.palo.thrift.TStatus task_status) {
    this.task_status = task_status;
    return this;
  }

  public void unsetTask_status() {
    this.task_status = null;
  }

  /** Returns true if field task_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_status() {
    return this.task_status != null;
  }

  public void setTask_statusIsSet(boolean value) {
    if (!value) {
      this.task_status = null;
    }
  }

  public long getReport_version() {
    return this.report_version;
  }

  public TFinishTaskRequest setReport_version(long report_version) {
    this.report_version = report_version;
    setReport_versionIsSet(true);
    return this;
  }

  public void unsetReport_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  /** Returns true if field report_version is set (has been assigned a value) and false otherwise */
  public boolean isSetReport_version() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  public void setReport_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID, value);
  }

  public int getFinish_tablet_infosSize() {
    return (this.finish_tablet_infos == null) ? 0 : this.finish_tablet_infos.size();
  }

  public java.util.Iterator<TTabletInfo> getFinish_tablet_infosIterator() {
    return (this.finish_tablet_infos == null) ? null : this.finish_tablet_infos.iterator();
  }

  public void addToFinish_tablet_infos(TTabletInfo elem) {
    if (this.finish_tablet_infos == null) {
      this.finish_tablet_infos = new ArrayList<TTabletInfo>();
    }
    this.finish_tablet_infos.add(elem);
  }

  public List<TTabletInfo> getFinish_tablet_infos() {
    return this.finish_tablet_infos;
  }

  public TFinishTaskRequest setFinish_tablet_infos(List<TTabletInfo> finish_tablet_infos) {
    this.finish_tablet_infos = finish_tablet_infos;
    return this;
  }

  public void unsetFinish_tablet_infos() {
    this.finish_tablet_infos = null;
  }

  /** Returns true if field finish_tablet_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_tablet_infos() {
    return this.finish_tablet_infos != null;
  }

  public void setFinish_tablet_infosIsSet(boolean value) {
    if (!value) {
      this.finish_tablet_infos = null;
    }
  }

  public long getTablet_checksum() {
    return this.tablet_checksum;
  }

  public TFinishTaskRequest setTablet_checksum(long tablet_checksum) {
    this.tablet_checksum = tablet_checksum;
    setTablet_checksumIsSet(true);
    return this;
  }

  public void unsetTablet_checksum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID);
  }

  /** Returns true if field tablet_checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_checksum() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID);
  }

  public void setTablet_checksumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID, value);
  }

  public long getRequest_version() {
    return this.request_version;
  }

  public TFinishTaskRequest setRequest_version(long request_version) {
    this.request_version = request_version;
    setRequest_versionIsSet(true);
    return this;
  }

  public void unsetRequest_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID);
  }

  /** Returns true if field request_version is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_version() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID);
  }

  public void setRequest_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID, value);
  }

  public long getRequest_version_hash() {
    return this.request_version_hash;
  }

  public TFinishTaskRequest setRequest_version_hash(long request_version_hash) {
    this.request_version_hash = request_version_hash;
    setRequest_version_hashIsSet(true);
    return this;
  }

  public void unsetRequest_version_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field request_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_version_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID);
  }

  public void setRequest_version_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID, value);
  }

  public String getSnapshot_path() {
    return this.snapshot_path;
  }

  public TFinishTaskRequest setSnapshot_path(String snapshot_path) {
    this.snapshot_path = snapshot_path;
    return this;
  }

  public void unsetSnapshot_path() {
    this.snapshot_path = null;
  }

  /** Returns true if field snapshot_path is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_path() {
    return this.snapshot_path != null;
  }

  public void setSnapshot_pathIsSet(boolean value) {
    if (!value) {
      this.snapshot_path = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((com.baidu.palo.thrift.TBackend)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTask_type();
      } else {
        setTask_type((com.baidu.palo.thrift.TTaskType)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((Long)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTask_status();
      } else {
        setTask_status((com.baidu.palo.thrift.TStatus)value);
      }
      break;

    case REPORT_VERSION:
      if (value == null) {
        unsetReport_version();
      } else {
        setReport_version((Long)value);
      }
      break;

    case FINISH_TABLET_INFOS:
      if (value == null) {
        unsetFinish_tablet_infos();
      } else {
        setFinish_tablet_infos((List<TTabletInfo>)value);
      }
      break;

    case TABLET_CHECKSUM:
      if (value == null) {
        unsetTablet_checksum();
      } else {
        setTablet_checksum((Long)value);
      }
      break;

    case REQUEST_VERSION:
      if (value == null) {
        unsetRequest_version();
      } else {
        setRequest_version((Long)value);
      }
      break;

    case REQUEST_VERSION_HASH:
      if (value == null) {
        unsetRequest_version_hash();
      } else {
        setRequest_version_hash((Long)value);
      }
      break;

    case SNAPSHOT_PATH:
      if (value == null) {
        unsetSnapshot_path();
      } else {
        setSnapshot_path((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case TASK_TYPE:
      return getTask_type();

    case SIGNATURE:
      return getSignature();

    case TASK_STATUS:
      return getTask_status();

    case REPORT_VERSION:
      return getReport_version();

    case FINISH_TABLET_INFOS:
      return getFinish_tablet_infos();

    case TABLET_CHECKSUM:
      return getTablet_checksum();

    case REQUEST_VERSION:
      return getRequest_version();

    case REQUEST_VERSION_HASH:
      return getRequest_version_hash();

    case SNAPSHOT_PATH:
      return getSnapshot_path();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case TASK_TYPE:
      return isSetTask_type();
    case SIGNATURE:
      return isSetSignature();
    case TASK_STATUS:
      return isSetTask_status();
    case REPORT_VERSION:
      return isSetReport_version();
    case FINISH_TABLET_INFOS:
      return isSetFinish_tablet_infos();
    case TABLET_CHECKSUM:
      return isSetTablet_checksum();
    case REQUEST_VERSION:
      return isSetRequest_version();
    case REQUEST_VERSION_HASH:
      return isSetRequest_version_hash();
    case SNAPSHOT_PATH:
      return isSetSnapshot_path();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFinishTaskRequest)
      return this.equals((TFinishTaskRequest)that);
    return false;
  }

  public boolean equals(TFinishTaskRequest that) {
    if (that == null)
      return false;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTask_type();
    boolean that_present_task_type = true && that.isSetTask_type();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_signature = true;
    boolean that_present_signature = true;
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (this.signature != that.signature)
        return false;
    }

    boolean this_present_task_status = true && this.isSetTask_status();
    boolean that_present_task_status = true && that.isSetTask_status();
    if (this_present_task_status || that_present_task_status) {
      if (!(this_present_task_status && that_present_task_status))
        return false;
      if (!this.task_status.equals(that.task_status))
        return false;
    }

    boolean this_present_report_version = true && this.isSetReport_version();
    boolean that_present_report_version = true && that.isSetReport_version();
    if (this_present_report_version || that_present_report_version) {
      if (!(this_present_report_version && that_present_report_version))
        return false;
      if (this.report_version != that.report_version)
        return false;
    }

    boolean this_present_finish_tablet_infos = true && this.isSetFinish_tablet_infos();
    boolean that_present_finish_tablet_infos = true && that.isSetFinish_tablet_infos();
    if (this_present_finish_tablet_infos || that_present_finish_tablet_infos) {
      if (!(this_present_finish_tablet_infos && that_present_finish_tablet_infos))
        return false;
      if (!this.finish_tablet_infos.equals(that.finish_tablet_infos))
        return false;
    }

    boolean this_present_tablet_checksum = true && this.isSetTablet_checksum();
    boolean that_present_tablet_checksum = true && that.isSetTablet_checksum();
    if (this_present_tablet_checksum || that_present_tablet_checksum) {
      if (!(this_present_tablet_checksum && that_present_tablet_checksum))
        return false;
      if (this.tablet_checksum != that.tablet_checksum)
        return false;
    }

    boolean this_present_request_version = true && this.isSetRequest_version();
    boolean that_present_request_version = true && that.isSetRequest_version();
    if (this_present_request_version || that_present_request_version) {
      if (!(this_present_request_version && that_present_request_version))
        return false;
      if (this.request_version != that.request_version)
        return false;
    }

    boolean this_present_request_version_hash = true && this.isSetRequest_version_hash();
    boolean that_present_request_version_hash = true && that.isSetRequest_version_hash();
    if (this_present_request_version_hash || that_present_request_version_hash) {
      if (!(this_present_request_version_hash && that_present_request_version_hash))
        return false;
      if (this.request_version_hash != that.request_version_hash)
        return false;
    }

    boolean this_present_snapshot_path = true && this.isSetSnapshot_path();
    boolean that_present_snapshot_path = true && that.isSetSnapshot_path();
    if (this_present_snapshot_path || that_present_snapshot_path) {
      if (!(this_present_snapshot_path && that_present_snapshot_path))
        return false;
      if (!this.snapshot_path.equals(that.snapshot_path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_backend = true && (isSetBackend());
    list.add(present_backend);
    if (present_backend)
      list.add(backend);

    boolean present_task_type = true && (isSetTask_type());
    list.add(present_task_type);
    if (present_task_type)
      list.add(task_type.getValue());

    boolean present_signature = true;
    list.add(present_signature);
    if (present_signature)
      list.add(signature);

    boolean present_task_status = true && (isSetTask_status());
    list.add(present_task_status);
    if (present_task_status)
      list.add(task_status);

    boolean present_report_version = true && (isSetReport_version());
    list.add(present_report_version);
    if (present_report_version)
      list.add(report_version);

    boolean present_finish_tablet_infos = true && (isSetFinish_tablet_infos());
    list.add(present_finish_tablet_infos);
    if (present_finish_tablet_infos)
      list.add(finish_tablet_infos);

    boolean present_tablet_checksum = true && (isSetTablet_checksum());
    list.add(present_tablet_checksum);
    if (present_tablet_checksum)
      list.add(tablet_checksum);

    boolean present_request_version = true && (isSetRequest_version());
    list.add(present_request_version);
    if (present_request_version)
      list.add(request_version);

    boolean present_request_version_hash = true && (isSetRequest_version_hash());
    list.add(present_request_version_hash);
    if (present_request_version_hash)
      list.add(request_version_hash);

    boolean present_snapshot_path = true && (isSetSnapshot_path());
    list.add(present_snapshot_path);
    if (present_snapshot_path)
      list.add(snapshot_path);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFinishTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBackend()).compareTo(other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTask_type()).compareTo(other.isSetTask_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTask_status()).compareTo(other.isSetTask_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_status, other.task_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReport_version()).compareTo(other.isSetReport_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_version, other.report_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinish_tablet_infos()).compareTo(other.isSetFinish_tablet_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_tablet_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_tablet_infos, other.finish_tablet_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTablet_checksum()).compareTo(other.isSetTablet_checksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_checksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_checksum, other.tablet_checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_version()).compareTo(other.isSetRequest_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_version, other.request_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_version_hash()).compareTo(other.isSetRequest_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_version_hash, other.request_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshot_path()).compareTo(other.isSetSnapshot_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_path, other.snapshot_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFinishTaskRequest(");
    boolean first = true;

    sb.append("backend:");
    if (this.backend == null) {
      sb.append("null");
    } else {
      sb.append(this.backend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_type:");
    if (this.task_type == null) {
      sb.append("null");
    } else {
      sb.append(this.task_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    sb.append(this.signature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_status:");
    if (this.task_status == null) {
      sb.append("null");
    } else {
      sb.append(this.task_status);
    }
    first = false;
    if (isSetReport_version()) {
      if (!first) sb.append(", ");
      sb.append("report_version:");
      sb.append(this.report_version);
      first = false;
    }
    if (isSetFinish_tablet_infos()) {
      if (!first) sb.append(", ");
      sb.append("finish_tablet_infos:");
      if (this.finish_tablet_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.finish_tablet_infos);
      }
      first = false;
    }
    if (isSetTablet_checksum()) {
      if (!first) sb.append(", ");
      sb.append("tablet_checksum:");
      sb.append(this.tablet_checksum);
      first = false;
    }
    if (isSetRequest_version()) {
      if (!first) sb.append(", ");
      sb.append("request_version:");
      sb.append(this.request_version);
      first = false;
    }
    if (isSetRequest_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("request_version_hash:");
      sb.append(this.request_version_hash);
      first = false;
    }
    if (isSetSnapshot_path()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_path:");
      if (this.snapshot_path == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (backend == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'backend' was not present! Struct: " + toString());
    }
    if (task_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'signature' because it's a primitive and you chose the non-beans generator.
    if (task_status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
    if (task_status != null) {
      task_status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFinishTaskRequestStandardSchemeFactory implements SchemeFactory {
    public TFinishTaskRequestStandardScheme getScheme() {
      return new TFinishTaskRequestStandardScheme();
    }
  }

  private static class TFinishTaskRequestStandardScheme extends StandardScheme<TFinishTaskRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new com.baidu.palo.thrift.TBackend();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_type = com.baidu.palo.thrift.TTaskType.findByValue(iprot.readI32());
              struct.setTask_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signature = iprot.readI64();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.task_status = new com.baidu.palo.thrift.TStatus();
              struct.task_status.read(iprot);
              struct.setTask_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPORT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.report_version = iprot.readI64();
              struct.setReport_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINISH_TABLET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.finish_tablet_infos = new ArrayList<TTabletInfo>(_list0.size);
                TTabletInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TTabletInfo();
                  _elem1.read(iprot);
                  struct.finish_tablet_infos.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFinish_tablet_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_checksum = iprot.readI64();
              struct.setTablet_checksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_version = iprot.readI64();
              struct.setRequest_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_version_hash = iprot.readI64();
              struct.setRequest_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SNAPSHOT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshot_path = iprot.readString();
              struct.setSnapshot_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSignature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        oprot.writeFieldBegin(BACKEND_FIELD_DESC);
        struct.backend.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.task_type != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.task_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
      oprot.writeI64(struct.signature);
      oprot.writeFieldEnd();
      if (struct.task_status != null) {
        oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
        struct.task_status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReport_version()) {
        oprot.writeFieldBegin(REPORT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.report_version);
        oprot.writeFieldEnd();
      }
      if (struct.finish_tablet_infos != null) {
        if (struct.isSetFinish_tablet_infos()) {
          oprot.writeFieldBegin(FINISH_TABLET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finish_tablet_infos.size()));
            for (TTabletInfo _iter3 : struct.finish_tablet_infos)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTablet_checksum()) {
        oprot.writeFieldBegin(TABLET_CHECKSUM_FIELD_DESC);
        oprot.writeI64(struct.tablet_checksum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest_version()) {
        oprot.writeFieldBegin(REQUEST_VERSION_FIELD_DESC);
        oprot.writeI64(struct.request_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest_version_hash()) {
        oprot.writeFieldBegin(REQUEST_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.request_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.snapshot_path != null) {
        if (struct.isSetSnapshot_path()) {
          oprot.writeFieldBegin(SNAPSHOT_PATH_FIELD_DESC);
          oprot.writeString(struct.snapshot_path);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFinishTaskRequestTupleSchemeFactory implements SchemeFactory {
    public TFinishTaskRequestTupleScheme getScheme() {
      return new TFinishTaskRequestTupleScheme();
    }
  }

  private static class TFinishTaskRequestTupleScheme extends TupleScheme<TFinishTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.backend.write(oprot);
      oprot.writeI32(struct.task_type.getValue());
      oprot.writeI64(struct.signature);
      struct.task_status.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetReport_version()) {
        optionals.set(0);
      }
      if (struct.isSetFinish_tablet_infos()) {
        optionals.set(1);
      }
      if (struct.isSetTablet_checksum()) {
        optionals.set(2);
      }
      if (struct.isSetRequest_version()) {
        optionals.set(3);
      }
      if (struct.isSetRequest_version_hash()) {
        optionals.set(4);
      }
      if (struct.isSetSnapshot_path()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetReport_version()) {
        oprot.writeI64(struct.report_version);
      }
      if (struct.isSetFinish_tablet_infos()) {
        {
          oprot.writeI32(struct.finish_tablet_infos.size());
          for (TTabletInfo _iter4 : struct.finish_tablet_infos)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_checksum()) {
        oprot.writeI64(struct.tablet_checksum);
      }
      if (struct.isSetRequest_version()) {
        oprot.writeI64(struct.request_version);
      }
      if (struct.isSetRequest_version_hash()) {
        oprot.writeI64(struct.request_version_hash);
      }
      if (struct.isSetSnapshot_path()) {
        oprot.writeString(struct.snapshot_path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.backend = new com.baidu.palo.thrift.TBackend();
      struct.backend.read(iprot);
      struct.setBackendIsSet(true);
      struct.task_type = com.baidu.palo.thrift.TTaskType.findByValue(iprot.readI32());
      struct.setTask_typeIsSet(true);
      struct.signature = iprot.readI64();
      struct.setSignatureIsSet(true);
      struct.task_status = new com.baidu.palo.thrift.TStatus();
      struct.task_status.read(iprot);
      struct.setTask_statusIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.report_version = iprot.readI64();
        struct.setReport_versionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.finish_tablet_infos = new ArrayList<TTabletInfo>(_list5.size);
          TTabletInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TTabletInfo();
            _elem6.read(iprot);
            struct.finish_tablet_infos.add(_elem6);
          }
        }
        struct.setFinish_tablet_infosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tablet_checksum = iprot.readI64();
        struct.setTablet_checksumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.request_version = iprot.readI64();
        struct.setRequest_versionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.request_version_hash = iprot.readI64();
        struct.setRequest_version_hashIsSet(true);
      }
      if (incoming.get(5)) {
        struct.snapshot_path = iprot.readString();
        struct.setSnapshot_pathIsSet(true);
      }
    }
  }

}

