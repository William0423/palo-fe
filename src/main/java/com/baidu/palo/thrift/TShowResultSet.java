/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class TShowResultSet implements org.apache.thrift.TBase<TShowResultSet, TShowResultSet._Fields>, java.io.Serializable, Cloneable, Comparable<TShowResultSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowResultSet");

  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultRows", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShowResultSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShowResultSetTupleSchemeFactory());
  }

  public TShowResultSetMetaData metaData; // required
  public List<List<String>> resultRows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META_DATA((short)1, "metaData"),
    RESULT_ROWS((short)2, "resultRows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META_DATA
          return META_DATA;
        case 2: // RESULT_ROWS
          return RESULT_ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowResultSetMetaData.class)));
    tmpMap.put(_Fields.RESULT_ROWS, new org.apache.thrift.meta_data.FieldMetaData("resultRows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowResultSet.class, metaDataMap);
  }

  public TShowResultSet() {
  }

  public TShowResultSet(
    TShowResultSetMetaData metaData,
    List<List<String>> resultRows)
  {
    this();
    this.metaData = metaData;
    this.resultRows = resultRows;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowResultSet(TShowResultSet other) {
    if (other.isSetMetaData()) {
      this.metaData = new TShowResultSetMetaData(other.metaData);
    }
    if (other.isSetResultRows()) {
      List<List<String>> __this__resultRows = new ArrayList<List<String>>(other.resultRows.size());
      for (List<String> other_element : other.resultRows) {
        List<String> __this__resultRows_copy = new ArrayList<String>(other_element);
        __this__resultRows.add(__this__resultRows_copy);
      }
      this.resultRows = __this__resultRows;
    }
  }

  public TShowResultSet deepCopy() {
    return new TShowResultSet(this);
  }

  @Override
  public void clear() {
    this.metaData = null;
    this.resultRows = null;
  }

  public TShowResultSetMetaData getMetaData() {
    return this.metaData;
  }

  public TShowResultSet setMetaData(TShowResultSetMetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  public int getResultRowsSize() {
    return (this.resultRows == null) ? 0 : this.resultRows.size();
  }

  public java.util.Iterator<List<String>> getResultRowsIterator() {
    return (this.resultRows == null) ? null : this.resultRows.iterator();
  }

  public void addToResultRows(List<String> elem) {
    if (this.resultRows == null) {
      this.resultRows = new ArrayList<List<String>>();
    }
    this.resultRows.add(elem);
  }

  public List<List<String>> getResultRows() {
    return this.resultRows;
  }

  public TShowResultSet setResultRows(List<List<String>> resultRows) {
    this.resultRows = resultRows;
    return this;
  }

  public void unsetResultRows() {
    this.resultRows = null;
  }

  /** Returns true if field resultRows is set (has been assigned a value) and false otherwise */
  public boolean isSetResultRows() {
    return this.resultRows != null;
  }

  public void setResultRowsIsSet(boolean value) {
    if (!value) {
      this.resultRows = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((TShowResultSetMetaData)value);
      }
      break;

    case RESULT_ROWS:
      if (value == null) {
        unsetResultRows();
      } else {
        setResultRows((List<List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case META_DATA:
      return getMetaData();

    case RESULT_ROWS:
      return getResultRows();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case META_DATA:
      return isSetMetaData();
    case RESULT_ROWS:
      return isSetResultRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShowResultSet)
      return this.equals((TShowResultSet)that);
    return false;
  }

  public boolean equals(TShowResultSet that) {
    if (that == null)
      return false;

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    boolean this_present_resultRows = true && this.isSetResultRows();
    boolean that_present_resultRows = true && that.isSetResultRows();
    if (this_present_resultRows || that_present_resultRows) {
      if (!(this_present_resultRows && that_present_resultRows))
        return false;
      if (!this.resultRows.equals(that.resultRows))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_metaData = true && (isSetMetaData());
    list.add(present_metaData);
    if (present_metaData)
      list.add(metaData);

    boolean present_resultRows = true && (isSetResultRows());
    list.add(present_resultRows);
    if (present_resultRows)
      list.add(resultRows);

    return list.hashCode();
  }

  @Override
  public int compareTo(TShowResultSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultRows()).compareTo(other.isSetResultRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultRows, other.resultRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShowResultSet(");
    boolean first = true;

    sb.append("metaData:");
    if (this.metaData == null) {
      sb.append("null");
    } else {
      sb.append(this.metaData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultRows:");
    if (this.resultRows == null) {
      sb.append("null");
    } else {
      sb.append(this.resultRows);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (metaData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metaData' was not present! Struct: " + toString());
    }
    if (resultRows == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultRows' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (metaData != null) {
      metaData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowResultSetStandardSchemeFactory implements SchemeFactory {
    public TShowResultSetStandardScheme getScheme() {
      return new TShowResultSetStandardScheme();
    }
  }

  private static class TShowResultSetStandardScheme extends StandardScheme<TShowResultSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowResultSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaData = new TShowResultSetMetaData();
              struct.metaData.read(iprot);
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.resultRows = new ArrayList<List<String>>(_list160.size);
                List<String> _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  {
                    org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                    _elem161 = new ArrayList<String>(_list163.size);
                    String _elem164;
                    for (int _i165 = 0; _i165 < _list163.size; ++_i165)
                    {
                      _elem164 = iprot.readString();
                      _elem161.add(_elem164);
                    }
                    iprot.readListEnd();
                  }
                  struct.resultRows.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setResultRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowResultSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metaData != null) {
        oprot.writeFieldBegin(META_DATA_FIELD_DESC);
        struct.metaData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.resultRows != null) {
        oprot.writeFieldBegin(RESULT_ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.resultRows.size()));
          for (List<String> _iter166 : struct.resultRows)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter166.size()));
              for (String _iter167 : _iter166)
              {
                oprot.writeString(_iter167);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowResultSetTupleSchemeFactory implements SchemeFactory {
    public TShowResultSetTupleScheme getScheme() {
      return new TShowResultSetTupleScheme();
    }
  }

  private static class TShowResultSetTupleScheme extends TupleScheme<TShowResultSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowResultSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.metaData.write(oprot);
      {
        oprot.writeI32(struct.resultRows.size());
        for (List<String> _iter168 : struct.resultRows)
        {
          {
            oprot.writeI32(_iter168.size());
            for (String _iter169 : _iter168)
            {
              oprot.writeString(_iter169);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowResultSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.metaData = new TShowResultSetMetaData();
      struct.metaData.read(iprot);
      struct.setMetaDataIsSet(true);
      {
        org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.resultRows = new ArrayList<List<String>>(_list170.size);
        List<String> _elem171;
        for (int _i172 = 0; _i172 < _list170.size; ++_i172)
        {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _elem171 = new ArrayList<String>(_list173.size);
            String _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = iprot.readString();
              _elem171.add(_elem174);
            }
          }
          struct.resultRows.add(_elem171);
        }
      }
      struct.setResultRowsIsSet(true);
    }
  }

}

