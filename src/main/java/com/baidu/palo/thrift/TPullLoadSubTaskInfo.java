/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TPullLoadSubTaskInfo implements org.apache.thrift.TBase<TPullLoadSubTaskInfo, TPullLoadSubTaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPullLoadSubTaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPullLoadSubTaskInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sub_task_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("file_map", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPullLoadSubTaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPullLoadSubTaskInfoTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TUniqueId id; // required
  public int sub_task_id; // required
  public Map<String,Long> file_map; // required
  public Map<String,String> counters; // required
  public String tracking_url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SUB_TASK_ID((short)2, "sub_task_id"),
    FILE_MAP((short)3, "file_map"),
    COUNTERS((short)4, "counters"),
    TRACKING_URL((short)5, "tracking_url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SUB_TASK_ID
          return SUB_TASK_ID;
        case 3: // FILE_MAP
          return FILE_MAP;
        case 4: // COUNTERS
          return COUNTERS;
        case 5: // TRACKING_URL
          return TRACKING_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUB_TASK_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRACKING_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.SUB_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("sub_task_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_MAP, new org.apache.thrift.meta_data.FieldMetaData("file_map", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPullLoadSubTaskInfo.class, metaDataMap);
  }

  public TPullLoadSubTaskInfo() {
  }

  public TPullLoadSubTaskInfo(
    com.baidu.palo.thrift.TUniqueId id,
    int sub_task_id,
    Map<String,Long> file_map,
    Map<String,String> counters)
  {
    this();
    this.id = id;
    this.sub_task_id = sub_task_id;
    setSub_task_idIsSet(true);
    this.file_map = file_map;
    this.counters = counters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPullLoadSubTaskInfo(TPullLoadSubTaskInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = new com.baidu.palo.thrift.TUniqueId(other.id);
    }
    this.sub_task_id = other.sub_task_id;
    if (other.isSetFile_map()) {
      Map<String,Long> __this__file_map = new HashMap<String,Long>(other.file_map);
      this.file_map = __this__file_map;
    }
    if (other.isSetCounters()) {
      Map<String,String> __this__counters = new HashMap<String,String>(other.counters);
      this.counters = __this__counters;
    }
    if (other.isSetTracking_url()) {
      this.tracking_url = other.tracking_url;
    }
  }

  public TPullLoadSubTaskInfo deepCopy() {
    return new TPullLoadSubTaskInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setSub_task_idIsSet(false);
    this.sub_task_id = 0;
    this.file_map = null;
    this.counters = null;
    this.tracking_url = null;
  }

  public com.baidu.palo.thrift.TUniqueId getId() {
    return this.id;
  }

  public TPullLoadSubTaskInfo setId(com.baidu.palo.thrift.TUniqueId id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getSub_task_id() {
    return this.sub_task_id;
  }

  public TPullLoadSubTaskInfo setSub_task_id(int sub_task_id) {
    this.sub_task_id = sub_task_id;
    setSub_task_idIsSet(true);
    return this;
  }

  public void unsetSub_task_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUB_TASK_ID_ISSET_ID);
  }

  /** Returns true if field sub_task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSub_task_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SUB_TASK_ID_ISSET_ID);
  }

  public void setSub_task_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUB_TASK_ID_ISSET_ID, value);
  }

  public int getFile_mapSize() {
    return (this.file_map == null) ? 0 : this.file_map.size();
  }

  public void putToFile_map(String key, long val) {
    if (this.file_map == null) {
      this.file_map = new HashMap<String,Long>();
    }
    this.file_map.put(key, val);
  }

  public Map<String,Long> getFile_map() {
    return this.file_map;
  }

  public TPullLoadSubTaskInfo setFile_map(Map<String,Long> file_map) {
    this.file_map = file_map;
    return this;
  }

  public void unsetFile_map() {
    this.file_map = null;
  }

  /** Returns true if field file_map is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_map() {
    return this.file_map != null;
  }

  public void setFile_mapIsSet(boolean value) {
    if (!value) {
      this.file_map = null;
    }
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public void putToCounters(String key, String val) {
    if (this.counters == null) {
      this.counters = new HashMap<String,String>();
    }
    this.counters.put(key, val);
  }

  public Map<String,String> getCounters() {
    return this.counters;
  }

  public TPullLoadSubTaskInfo setCounters(Map<String,String> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public String getTracking_url() {
    return this.tracking_url;
  }

  public TPullLoadSubTaskInfo setTracking_url(String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTracking_url() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_url() {
    return this.tracking_url != null;
  }

  public void setTracking_urlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case SUB_TASK_ID:
      if (value == null) {
        unsetSub_task_id();
      } else {
        setSub_task_id((Integer)value);
      }
      break;

    case FILE_MAP:
      if (value == null) {
        unsetFile_map();
      } else {
        setFile_map((Map<String,Long>)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((Map<String,String>)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTracking_url();
      } else {
        setTracking_url((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SUB_TASK_ID:
      return getSub_task_id();

    case FILE_MAP:
      return getFile_map();

    case COUNTERS:
      return getCounters();

    case TRACKING_URL:
      return getTracking_url();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SUB_TASK_ID:
      return isSetSub_task_id();
    case FILE_MAP:
      return isSetFile_map();
    case COUNTERS:
      return isSetCounters();
    case TRACKING_URL:
      return isSetTracking_url();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPullLoadSubTaskInfo)
      return this.equals((TPullLoadSubTaskInfo)that);
    return false;
  }

  public boolean equals(TPullLoadSubTaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_sub_task_id = true;
    boolean that_present_sub_task_id = true;
    if (this_present_sub_task_id || that_present_sub_task_id) {
      if (!(this_present_sub_task_id && that_present_sub_task_id))
        return false;
      if (this.sub_task_id != that.sub_task_id)
        return false;
    }

    boolean this_present_file_map = true && this.isSetFile_map();
    boolean that_present_file_map = true && that.isSetFile_map();
    if (this_present_file_map || that_present_file_map) {
      if (!(this_present_file_map && that_present_file_map))
        return false;
      if (!this.file_map.equals(that.file_map))
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTracking_url();
    boolean that_present_tracking_url = true && that.isSetTracking_url();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_sub_task_id = true;
    list.add(present_sub_task_id);
    if (present_sub_task_id)
      list.add(sub_task_id);

    boolean present_file_map = true && (isSetFile_map());
    list.add(present_file_map);
    if (present_file_map)
      list.add(file_map);

    boolean present_counters = true && (isSetCounters());
    list.add(present_counters);
    if (present_counters)
      list.add(counters);

    boolean present_tracking_url = true && (isSetTracking_url());
    list.add(present_tracking_url);
    if (present_tracking_url)
      list.add(tracking_url);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPullLoadSubTaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSub_task_id()).compareTo(other.isSetSub_task_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub_task_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub_task_id, other.sub_task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_map()).compareTo(other.isSetFile_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_map, other.file_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounters()).compareTo(other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracking_url()).compareTo(other.isSetTracking_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPullLoadSubTaskInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sub_task_id:");
    sb.append(this.sub_task_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_map:");
    if (this.file_map == null) {
      sb.append("null");
    } else {
      sb.append(this.file_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("counters:");
    if (this.counters == null) {
      sb.append("null");
    } else {
      sb.append(this.counters);
    }
    first = false;
    if (isSetTracking_url()) {
      if (!first) sb.append(", ");
      sb.append("tracking_url:");
      if (this.tracking_url == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sub_task_id' because it's a primitive and you chose the non-beans generator.
    if (file_map == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_map' was not present! Struct: " + toString());
    }
    if (counters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'counters' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPullLoadSubTaskInfoStandardSchemeFactory implements SchemeFactory {
    public TPullLoadSubTaskInfoStandardScheme getScheme() {
      return new TPullLoadSubTaskInfoStandardScheme();
    }
  }

  private static class TPullLoadSubTaskInfoStandardScheme extends StandardScheme<TPullLoadSubTaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPullLoadSubTaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new com.baidu.palo.thrift.TUniqueId();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sub_task_id = iprot.readI32();
              struct.setSub_task_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.file_map = new HashMap<String,Long>(2*_map0.size);
                String _key1;
                long _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readI64();
                  struct.file_map.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setFile_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.counters = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.counters.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTracking_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSub_task_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sub_task_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPullLoadSubTaskInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.sub_task_id);
      oprot.writeFieldEnd();
      if (struct.file_map != null) {
        oprot.writeFieldBegin(FILE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.file_map.size()));
          for (Map.Entry<String, Long> _iter8 : struct.file_map.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeI64(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.counters != null) {
        oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.counters.size()));
          for (Map.Entry<String, String> _iter9 : struct.counters.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tracking_url != null) {
        if (struct.isSetTracking_url()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.tracking_url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPullLoadSubTaskInfoTupleSchemeFactory implements SchemeFactory {
    public TPullLoadSubTaskInfoTupleScheme getScheme() {
      return new TPullLoadSubTaskInfoTupleScheme();
    }
  }

  private static class TPullLoadSubTaskInfoTupleScheme extends TupleScheme<TPullLoadSubTaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPullLoadSubTaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.id.write(oprot);
      oprot.writeI32(struct.sub_task_id);
      {
        oprot.writeI32(struct.file_map.size());
        for (Map.Entry<String, Long> _iter10 : struct.file_map.entrySet())
        {
          oprot.writeString(_iter10.getKey());
          oprot.writeI64(_iter10.getValue());
        }
      }
      {
        oprot.writeI32(struct.counters.size());
        for (Map.Entry<String, String> _iter11 : struct.counters.entrySet())
        {
          oprot.writeString(_iter11.getKey());
          oprot.writeString(_iter11.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetTracking_url()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTracking_url()) {
        oprot.writeString(struct.tracking_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPullLoadSubTaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = new com.baidu.palo.thrift.TUniqueId();
      struct.id.read(iprot);
      struct.setIdIsSet(true);
      struct.sub_task_id = iprot.readI32();
      struct.setSub_task_idIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.file_map = new HashMap<String,Long>(2*_map12.size);
        String _key13;
        long _val14;
        for (int _i15 = 0; _i15 < _map12.size; ++_i15)
        {
          _key13 = iprot.readString();
          _val14 = iprot.readI64();
          struct.file_map.put(_key13, _val14);
        }
      }
      struct.setFile_mapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.counters = new HashMap<String,String>(2*_map16.size);
        String _key17;
        String _val18;
        for (int _i19 = 0; _i19 < _map16.size; ++_i19)
        {
          _key17 = iprot.readString();
          _val18 = iprot.readString();
          struct.counters.put(_key17, _val18);
        }
      }
      struct.setCountersIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.tracking_url = iprot.readString();
        struct.setTracking_urlIsSet(true);
      }
    }
  }

}

