/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TFetchRequest implements org.apache.thrift.TBase<TFetchRequest, TFetchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TFetchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFetchRequest");

  private static final org.apache.thrift.protocol.TField USE_COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("use_compression", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField END_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_range", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField AGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregation", org.apache.thrift.protocol.TType.BOOL, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFetchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFetchRequestTupleSchemeFactory());
  }

  public boolean use_compression; // required
  public int num_rows; // optional
  public int schema_hash; // required
  public long tablet_id; // required
  public int version; // required
  public long version_hash; // required
  public List<String> field; // required
  public String user; // optional
  public String output; // optional
  public String range; // optional
  public List<TFetchStartKey> start_key; // required
  public List<TFetchEndKey> end_key; // required
  public List<TCondition> where; // required
  public String end_range; // optional
  public boolean aggregation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USE_COMPRESSION((short)1, "use_compression"),
    NUM_ROWS((short)2, "num_rows"),
    SCHEMA_HASH((short)3, "schema_hash"),
    TABLET_ID((short)4, "tablet_id"),
    VERSION((short)5, "version"),
    VERSION_HASH((short)6, "version_hash"),
    FIELD((short)7, "field"),
    USER((short)8, "user"),
    OUTPUT((short)9, "output"),
    RANGE((short)10, "range"),
    START_KEY((short)11, "start_key"),
    END_KEY((short)12, "end_key"),
    WHERE((short)13, "where"),
    END_RANGE((short)14, "end_range"),
    AGGREGATION((short)15, "aggregation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USE_COMPRESSION
          return USE_COMPRESSION;
        case 2: // NUM_ROWS
          return NUM_ROWS;
        case 3: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 4: // TABLET_ID
          return TABLET_ID;
        case 5: // VERSION
          return VERSION;
        case 6: // VERSION_HASH
          return VERSION_HASH;
        case 7: // FIELD
          return FIELD;
        case 8: // USER
          return USER;
        case 9: // OUTPUT
          return OUTPUT;
        case 10: // RANGE
          return RANGE;
        case 11: // START_KEY
          return START_KEY;
        case 12: // END_KEY
          return END_KEY;
        case 13: // WHERE
          return WHERE;
        case 14: // END_RANGE
          return END_RANGE;
        case 15: // AGGREGATION
          return AGGREGATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USE_COMPRESSION_ISSET_ID = 0;
  private static final int __NUM_ROWS_ISSET_ID = 1;
  private static final int __SCHEMA_HASH_ISSET_ID = 2;
  private static final int __TABLET_ID_ISSET_ID = 3;
  private static final int __VERSION_ISSET_ID = 4;
  private static final int __VERSION_HASH_ISSET_ID = 5;
  private static final int __AGGREGATION_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM_ROWS,_Fields.USER,_Fields.OUTPUT,_Fields.RANGE,_Fields.END_RANGE,_Fields.AGGREGATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USE_COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("use_compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchStartKey.class))));
    tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchEndKey.class))));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCondition.class))));
    tmpMap.put(_Fields.END_RANGE, new org.apache.thrift.meta_data.FieldMetaData("end_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("aggregation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFetchRequest.class, metaDataMap);
  }

  public TFetchRequest() {
  }

  public TFetchRequest(
    boolean use_compression,
    int schema_hash,
    long tablet_id,
    int version,
    long version_hash,
    List<String> field,
    List<TFetchStartKey> start_key,
    List<TFetchEndKey> end_key,
    List<TCondition> where)
  {
    this();
    this.use_compression = use_compression;
    setUse_compressionIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    this.field = field;
    this.start_key = start_key;
    this.end_key = end_key;
    this.where = where;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFetchRequest(TFetchRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.use_compression = other.use_compression;
    this.num_rows = other.num_rows;
    this.schema_hash = other.schema_hash;
    this.tablet_id = other.tablet_id;
    this.version = other.version;
    this.version_hash = other.version_hash;
    if (other.isSetField()) {
      List<String> __this__field = new ArrayList<String>(other.field);
      this.field = __this__field;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetOutput()) {
      this.output = other.output;
    }
    if (other.isSetRange()) {
      this.range = other.range;
    }
    if (other.isSetStart_key()) {
      List<TFetchStartKey> __this__start_key = new ArrayList<TFetchStartKey>(other.start_key.size());
      for (TFetchStartKey other_element : other.start_key) {
        __this__start_key.add(new TFetchStartKey(other_element));
      }
      this.start_key = __this__start_key;
    }
    if (other.isSetEnd_key()) {
      List<TFetchEndKey> __this__end_key = new ArrayList<TFetchEndKey>(other.end_key.size());
      for (TFetchEndKey other_element : other.end_key) {
        __this__end_key.add(new TFetchEndKey(other_element));
      }
      this.end_key = __this__end_key;
    }
    if (other.isSetWhere()) {
      List<TCondition> __this__where = new ArrayList<TCondition>(other.where.size());
      for (TCondition other_element : other.where) {
        __this__where.add(new TCondition(other_element));
      }
      this.where = __this__where;
    }
    if (other.isSetEnd_range()) {
      this.end_range = other.end_range;
    }
    this.aggregation = other.aggregation;
  }

  public TFetchRequest deepCopy() {
    return new TFetchRequest(this);
  }

  @Override
  public void clear() {
    setUse_compressionIsSet(false);
    this.use_compression = false;
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    this.field = null;
    this.user = null;
    this.output = null;
    this.range = null;
    this.start_key = null;
    this.end_key = null;
    this.where = null;
    this.end_range = null;
    setAggregationIsSet(false);
    this.aggregation = false;
  }

  public boolean isUse_compression() {
    return this.use_compression;
  }

  public TFetchRequest setUse_compression(boolean use_compression) {
    this.use_compression = use_compression;
    setUse_compressionIsSet(true);
    return this;
  }

  public void unsetUse_compression() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_COMPRESSION_ISSET_ID);
  }

  /** Returns true if field use_compression is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_compression() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_COMPRESSION_ISSET_ID);
  }

  public void setUse_compressionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_COMPRESSION_ISSET_ID, value);
  }

  public int getNum_rows() {
    return this.num_rows;
  }

  public TFetchRequest setNum_rows(int num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    return this;
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TFetchRequest setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TFetchRequest setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public TFetchRequest setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TFetchRequest setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public int getFieldSize() {
    return (this.field == null) ? 0 : this.field.size();
  }

  public java.util.Iterator<String> getFieldIterator() {
    return (this.field == null) ? null : this.field.iterator();
  }

  public void addToField(String elem) {
    if (this.field == null) {
      this.field = new ArrayList<String>();
    }
    this.field.add(elem);
  }

  public List<String> getField() {
    return this.field;
  }

  public TFetchRequest setField(List<String> field) {
    this.field = field;
    return this;
  }

  public void unsetField() {
    this.field = null;
  }

  /** Returns true if field field is set (has been assigned a value) and false otherwise */
  public boolean isSetField() {
    return this.field != null;
  }

  public void setFieldIsSet(boolean value) {
    if (!value) {
      this.field = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public TFetchRequest setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getOutput() {
    return this.output;
  }

  public TFetchRequest setOutput(String output) {
    this.output = output;
    return this;
  }

  public void unsetOutput() {
    this.output = null;
  }

  /** Returns true if field output is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput() {
    return this.output != null;
  }

  public void setOutputIsSet(boolean value) {
    if (!value) {
      this.output = null;
    }
  }

  public String getRange() {
    return this.range;
  }

  public TFetchRequest setRange(String range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  public int getStart_keySize() {
    return (this.start_key == null) ? 0 : this.start_key.size();
  }

  public java.util.Iterator<TFetchStartKey> getStart_keyIterator() {
    return (this.start_key == null) ? null : this.start_key.iterator();
  }

  public void addToStart_key(TFetchStartKey elem) {
    if (this.start_key == null) {
      this.start_key = new ArrayList<TFetchStartKey>();
    }
    this.start_key.add(elem);
  }

  public List<TFetchStartKey> getStart_key() {
    return this.start_key;
  }

  public TFetchRequest setStart_key(List<TFetchStartKey> start_key) {
    this.start_key = start_key;
    return this;
  }

  public void unsetStart_key() {
    this.start_key = null;
  }

  /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_key() {
    return this.start_key != null;
  }

  public void setStart_keyIsSet(boolean value) {
    if (!value) {
      this.start_key = null;
    }
  }

  public int getEnd_keySize() {
    return (this.end_key == null) ? 0 : this.end_key.size();
  }

  public java.util.Iterator<TFetchEndKey> getEnd_keyIterator() {
    return (this.end_key == null) ? null : this.end_key.iterator();
  }

  public void addToEnd_key(TFetchEndKey elem) {
    if (this.end_key == null) {
      this.end_key = new ArrayList<TFetchEndKey>();
    }
    this.end_key.add(elem);
  }

  public List<TFetchEndKey> getEnd_key() {
    return this.end_key;
  }

  public TFetchRequest setEnd_key(List<TFetchEndKey> end_key) {
    this.end_key = end_key;
    return this;
  }

  public void unsetEnd_key() {
    this.end_key = null;
  }

  /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_key() {
    return this.end_key != null;
  }

  public void setEnd_keyIsSet(boolean value) {
    if (!value) {
      this.end_key = null;
    }
  }

  public int getWhereSize() {
    return (this.where == null) ? 0 : this.where.size();
  }

  public java.util.Iterator<TCondition> getWhereIterator() {
    return (this.where == null) ? null : this.where.iterator();
  }

  public void addToWhere(TCondition elem) {
    if (this.where == null) {
      this.where = new ArrayList<TCondition>();
    }
    this.where.add(elem);
  }

  public List<TCondition> getWhere() {
    return this.where;
  }

  public TFetchRequest setWhere(List<TCondition> where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public String getEnd_range() {
    return this.end_range;
  }

  public TFetchRequest setEnd_range(String end_range) {
    this.end_range = end_range;
    return this;
  }

  public void unsetEnd_range() {
    this.end_range = null;
  }

  /** Returns true if field end_range is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_range() {
    return this.end_range != null;
  }

  public void setEnd_rangeIsSet(boolean value) {
    if (!value) {
      this.end_range = null;
    }
  }

  public boolean isAggregation() {
    return this.aggregation;
  }

  public TFetchRequest setAggregation(boolean aggregation) {
    this.aggregation = aggregation;
    setAggregationIsSet(true);
    return this;
  }

  public void unsetAggregation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATION_ISSET_ID);
  }

  /** Returns true if field aggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregation() {
    return EncodingUtils.testBit(__isset_bitfield, __AGGREGATION_ISSET_ID);
  }

  public void setAggregationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USE_COMPRESSION:
      if (value == null) {
        unsetUse_compression();
      } else {
        setUse_compression((Boolean)value);
      }
      break;

    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Integer)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((Integer)value);
      }
      break;

    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((Long)value);
      }
      break;

    case FIELD:
      if (value == null) {
        unsetField();
      } else {
        setField((List<String>)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case OUTPUT:
      if (value == null) {
        unsetOutput();
      } else {
        setOutput((String)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((String)value);
      }
      break;

    case START_KEY:
      if (value == null) {
        unsetStart_key();
      } else {
        setStart_key((List<TFetchStartKey>)value);
      }
      break;

    case END_KEY:
      if (value == null) {
        unsetEnd_key();
      } else {
        setEnd_key((List<TFetchEndKey>)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((List<TCondition>)value);
      }
      break;

    case END_RANGE:
      if (value == null) {
        unsetEnd_range();
      } else {
        setEnd_range((String)value);
      }
      break;

    case AGGREGATION:
      if (value == null) {
        unsetAggregation();
      } else {
        setAggregation((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USE_COMPRESSION:
      return isUse_compression();

    case NUM_ROWS:
      return getNum_rows();

    case SCHEMA_HASH:
      return getSchema_hash();

    case TABLET_ID:
      return getTablet_id();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case FIELD:
      return getField();

    case USER:
      return getUser();

    case OUTPUT:
      return getOutput();

    case RANGE:
      return getRange();

    case START_KEY:
      return getStart_key();

    case END_KEY:
      return getEnd_key();

    case WHERE:
      return getWhere();

    case END_RANGE:
      return getEnd_range();

    case AGGREGATION:
      return isAggregation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USE_COMPRESSION:
      return isSetUse_compression();
    case NUM_ROWS:
      return isSetNum_rows();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case TABLET_ID:
      return isSetTablet_id();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case FIELD:
      return isSetField();
    case USER:
      return isSetUser();
    case OUTPUT:
      return isSetOutput();
    case RANGE:
      return isSetRange();
    case START_KEY:
      return isSetStart_key();
    case END_KEY:
      return isSetEnd_key();
    case WHERE:
      return isSetWhere();
    case END_RANGE:
      return isSetEnd_range();
    case AGGREGATION:
      return isSetAggregation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFetchRequest)
      return this.equals((TFetchRequest)that);
    return false;
  }

  public boolean equals(TFetchRequest that) {
    if (that == null)
      return false;

    boolean this_present_use_compression = true;
    boolean that_present_use_compression = true;
    if (this_present_use_compression || that_present_use_compression) {
      if (!(this_present_use_compression && that_present_use_compression))
        return false;
      if (this.use_compression != that.use_compression)
        return false;
    }

    boolean this_present_num_rows = true && this.isSetNum_rows();
    boolean that_present_num_rows = true && that.isSetNum_rows();
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true;
    boolean that_present_version_hash = true;
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_field = true && this.isSetField();
    boolean that_present_field = true && that.isSetField();
    if (this_present_field || that_present_field) {
      if (!(this_present_field && that_present_field))
        return false;
      if (!this.field.equals(that.field))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_output = true && this.isSetOutput();
    boolean that_present_output = true && that.isSetOutput();
    if (this_present_output || that_present_output) {
      if (!(this_present_output && that_present_output))
        return false;
      if (!this.output.equals(that.output))
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    boolean this_present_start_key = true && this.isSetStart_key();
    boolean that_present_start_key = true && that.isSetStart_key();
    if (this_present_start_key || that_present_start_key) {
      if (!(this_present_start_key && that_present_start_key))
        return false;
      if (!this.start_key.equals(that.start_key))
        return false;
    }

    boolean this_present_end_key = true && this.isSetEnd_key();
    boolean that_present_end_key = true && that.isSetEnd_key();
    if (this_present_end_key || that_present_end_key) {
      if (!(this_present_end_key && that_present_end_key))
        return false;
      if (!this.end_key.equals(that.end_key))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_end_range = true && this.isSetEnd_range();
    boolean that_present_end_range = true && that.isSetEnd_range();
    if (this_present_end_range || that_present_end_range) {
      if (!(this_present_end_range && that_present_end_range))
        return false;
      if (!this.end_range.equals(that.end_range))
        return false;
    }

    boolean this_present_aggregation = true && this.isSetAggregation();
    boolean that_present_aggregation = true && that.isSetAggregation();
    if (this_present_aggregation || that_present_aggregation) {
      if (!(this_present_aggregation && that_present_aggregation))
        return false;
      if (this.aggregation != that.aggregation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_use_compression = true;
    list.add(present_use_compression);
    if (present_use_compression)
      list.add(use_compression);

    boolean present_num_rows = true && (isSetNum_rows());
    list.add(present_num_rows);
    if (present_num_rows)
      list.add(num_rows);

    boolean present_schema_hash = true;
    list.add(present_schema_hash);
    if (present_schema_hash)
      list.add(schema_hash);

    boolean present_tablet_id = true;
    list.add(present_tablet_id);
    if (present_tablet_id)
      list.add(tablet_id);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_version_hash = true;
    list.add(present_version_hash);
    if (present_version_hash)
      list.add(version_hash);

    boolean present_field = true && (isSetField());
    list.add(present_field);
    if (present_field)
      list.add(field);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_output = true && (isSetOutput());
    list.add(present_output);
    if (present_output)
      list.add(output);

    boolean present_range = true && (isSetRange());
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_start_key = true && (isSetStart_key());
    list.add(present_start_key);
    if (present_start_key)
      list.add(start_key);

    boolean present_end_key = true && (isSetEnd_key());
    list.add(present_end_key);
    if (present_end_key)
      list.add(end_key);

    boolean present_where = true && (isSetWhere());
    list.add(present_where);
    if (present_where)
      list.add(where);

    boolean present_end_range = true && (isSetEnd_range());
    list.add(present_end_range);
    if (present_end_range)
      list.add(end_range);

    boolean present_aggregation = true && (isSetAggregation());
    list.add(present_aggregation);
    if (present_aggregation)
      list.add(aggregation);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFetchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUse_compression()).compareTo(other.isSetUse_compression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_compression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_compression, other.use_compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_hash()).compareTo(other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTablet_id()).compareTo(other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_hash()).compareTo(other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput()).compareTo(other.isSetOutput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, other.output);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(other.isSetEnd_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_range()).compareTo(other.isSetEnd_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_range, other.end_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregation()).compareTo(other.isSetAggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregation, other.aggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFetchRequest(");
    boolean first = true;

    sb.append("use_compression:");
    sb.append(this.use_compression);
    first = false;
    if (isSetNum_rows()) {
      if (!first) sb.append(", ");
      sb.append("num_rows:");
      sb.append(this.num_rows);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_hash:");
    sb.append(this.version_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field:");
    if (this.field == null) {
      sb.append("null");
    } else {
      sb.append(this.field);
    }
    first = false;
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetOutput()) {
      if (!first) sb.append(", ");
      sb.append("output:");
      if (this.output == null) {
        sb.append("null");
      } else {
        sb.append(this.output);
      }
      first = false;
    }
    if (isSetRange()) {
      if (!first) sb.append(", ");
      sb.append("range:");
      if (this.range == null) {
        sb.append("null");
      } else {
        sb.append(this.range);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("start_key:");
    if (this.start_key == null) {
      sb.append("null");
    } else {
      sb.append(this.start_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_key:");
    if (this.end_key == null) {
      sb.append("null");
    } else {
      sb.append(this.end_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (isSetEnd_range()) {
      if (!first) sb.append(", ");
      sb.append("end_range:");
      if (this.end_range == null) {
        sb.append("null");
      } else {
        sb.append(this.end_range);
      }
      first = false;
    }
    if (isSetAggregation()) {
      if (!first) sb.append(", ");
      sb.append("aggregation:");
      sb.append(this.aggregation);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'use_compression' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version_hash' because it's a primitive and you chose the non-beans generator.
    if (field == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'field' was not present! Struct: " + toString());
    }
    if (start_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
    }
    if (end_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_key' was not present! Struct: " + toString());
    }
    if (where == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'where' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFetchRequestStandardSchemeFactory implements SchemeFactory {
    public TFetchRequestStandardScheme getScheme() {
      return new TFetchRequestStandardScheme();
    }
  }

  private static class TFetchRequestStandardScheme extends StandardScheme<TFetchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFetchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USE_COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_compression = iprot.readBool();
              struct.setUse_compressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_rows = iprot.readI32();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.field = new ArrayList<String>(_list60.size);
                String _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = iprot.readString();
                  struct.field.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUTPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.output = iprot.readString();
              struct.setOutputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.range = iprot.readString();
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.start_key = new ArrayList<TFetchStartKey>(_list63.size);
                TFetchStartKey _elem64;
                for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                {
                  _elem64 = new TFetchStartKey();
                  _elem64.read(iprot);
                  struct.start_key.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setStart_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.end_key = new ArrayList<TFetchEndKey>(_list66.size);
                TFetchEndKey _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = new TFetchEndKey();
                  _elem67.read(iprot);
                  struct.end_key.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setEnd_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                struct.where = new ArrayList<TCondition>(_list69.size);
                TCondition _elem70;
                for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                {
                  _elem70 = new TCondition();
                  _elem70.read(iprot);
                  struct.where.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // END_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_range = iprot.readString();
              struct.setEnd_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.aggregation = iprot.readBool();
              struct.setAggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUse_compression()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_compression' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFetchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USE_COMPRESSION_FIELD_DESC);
      oprot.writeBool(struct.use_compression);
      oprot.writeFieldEnd();
      if (struct.isSetNum_rows()) {
        oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
        oprot.writeI32(struct.num_rows);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
      oprot.writeI64(struct.version_hash);
      oprot.writeFieldEnd();
      if (struct.field != null) {
        oprot.writeFieldBegin(FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.field.size()));
          for (String _iter72 : struct.field)
          {
            oprot.writeString(_iter72);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.output != null) {
        if (struct.isSetOutput()) {
          oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
          oprot.writeString(struct.output);
          oprot.writeFieldEnd();
        }
      }
      if (struct.range != null) {
        if (struct.isSetRange()) {
          oprot.writeFieldBegin(RANGE_FIELD_DESC);
          oprot.writeString(struct.range);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_key != null) {
        oprot.writeFieldBegin(START_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.start_key.size()));
          for (TFetchStartKey _iter73 : struct.start_key)
          {
            _iter73.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.end_key != null) {
        oprot.writeFieldBegin(END_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.end_key.size()));
          for (TFetchEndKey _iter74 : struct.end_key)
          {
            _iter74.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.where != null) {
        oprot.writeFieldBegin(WHERE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.where.size()));
          for (TCondition _iter75 : struct.where)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.end_range != null) {
        if (struct.isSetEnd_range()) {
          oprot.writeFieldBegin(END_RANGE_FIELD_DESC);
          oprot.writeString(struct.end_range);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAggregation()) {
        oprot.writeFieldBegin(AGGREGATION_FIELD_DESC);
        oprot.writeBool(struct.aggregation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFetchRequestTupleSchemeFactory implements SchemeFactory {
    public TFetchRequestTupleScheme getScheme() {
      return new TFetchRequestTupleScheme();
    }
  }

  private static class TFetchRequestTupleScheme extends TupleScheme<TFetchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFetchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.use_compression);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.version);
      oprot.writeI64(struct.version_hash);
      {
        oprot.writeI32(struct.field.size());
        for (String _iter76 : struct.field)
        {
          oprot.writeString(_iter76);
        }
      }
      {
        oprot.writeI32(struct.start_key.size());
        for (TFetchStartKey _iter77 : struct.start_key)
        {
          _iter77.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.end_key.size());
        for (TFetchEndKey _iter78 : struct.end_key)
        {
          _iter78.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.where.size());
        for (TCondition _iter79 : struct.where)
        {
          _iter79.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNum_rows()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetOutput()) {
        optionals.set(2);
      }
      if (struct.isSetRange()) {
        optionals.set(3);
      }
      if (struct.isSetEnd_range()) {
        optionals.set(4);
      }
      if (struct.isSetAggregation()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNum_rows()) {
        oprot.writeI32(struct.num_rows);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetOutput()) {
        oprot.writeString(struct.output);
      }
      if (struct.isSetRange()) {
        oprot.writeString(struct.range);
      }
      if (struct.isSetEnd_range()) {
        oprot.writeString(struct.end_range);
      }
      if (struct.isSetAggregation()) {
        oprot.writeBool(struct.aggregation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFetchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.use_compression = iprot.readBool();
      struct.setUse_compressionIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      struct.version_hash = iprot.readI64();
      struct.setVersion_hashIsSet(true);
      {
        org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.field = new ArrayList<String>(_list80.size);
        String _elem81;
        for (int _i82 = 0; _i82 < _list80.size; ++_i82)
        {
          _elem81 = iprot.readString();
          struct.field.add(_elem81);
        }
      }
      struct.setFieldIsSet(true);
      {
        org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.start_key = new ArrayList<TFetchStartKey>(_list83.size);
        TFetchStartKey _elem84;
        for (int _i85 = 0; _i85 < _list83.size; ++_i85)
        {
          _elem84 = new TFetchStartKey();
          _elem84.read(iprot);
          struct.start_key.add(_elem84);
        }
      }
      struct.setStart_keyIsSet(true);
      {
        org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.end_key = new ArrayList<TFetchEndKey>(_list86.size);
        TFetchEndKey _elem87;
        for (int _i88 = 0; _i88 < _list86.size; ++_i88)
        {
          _elem87 = new TFetchEndKey();
          _elem87.read(iprot);
          struct.end_key.add(_elem87);
        }
      }
      struct.setEnd_keyIsSet(true);
      {
        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.where = new ArrayList<TCondition>(_list89.size);
        TCondition _elem90;
        for (int _i91 = 0; _i91 < _list89.size; ++_i91)
        {
          _elem90 = new TCondition();
          _elem90.read(iprot);
          struct.where.add(_elem90);
        }
      }
      struct.setWhereIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.num_rows = iprot.readI32();
        struct.setNum_rowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.output = iprot.readString();
        struct.setOutputIsSet(true);
      }
      if (incoming.get(3)) {
        struct.range = iprot.readString();
        struct.setRangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.end_range = iprot.readString();
        struct.setEnd_rangeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.aggregation = iprot.readBool();
        struct.setAggregationIsSet(true);
      }
    }
  }

}

