/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TRangePartition implements org.apache.thrift.TBase<TRangePartition, TRangePartition._Fields>, java.io.Serializable, Cloneable, Comparable<TRangePartition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRangePartition");

  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DISTRIBUTED_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("distributed_exprs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DISTRIBUTE_BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("distribute_bucket", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRangePartitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRangePartitionTupleSchemeFactory());
  }

  public long partition_id; // required
  public TPartitionRange range; // required
  public List<com.baidu.palo.thrift.TExpr> distributed_exprs; // optional
  public int distribute_bucket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_ID((short)1, "partition_id"),
    RANGE((short)2, "range"),
    DISTRIBUTED_EXPRS((short)3, "distributed_exprs"),
    DISTRIBUTE_BUCKET((short)4, "distribute_bucket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_ID
          return PARTITION_ID;
        case 2: // RANGE
          return RANGE;
        case 3: // DISTRIBUTED_EXPRS
          return DISTRIBUTED_EXPRS;
        case 4: // DISTRIBUTE_BUCKET
          return DISTRIBUTE_BUCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_ID_ISSET_ID = 0;
  private static final int __DISTRIBUTE_BUCKET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DISTRIBUTED_EXPRS,_Fields.DISTRIBUTE_BUCKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionRange.class)));
    tmpMap.put(_Fields.DISTRIBUTED_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("distributed_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    tmpMap.put(_Fields.DISTRIBUTE_BUCKET, new org.apache.thrift.meta_data.FieldMetaData("distribute_bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRangePartition.class, metaDataMap);
  }

  public TRangePartition() {
  }

  public TRangePartition(
    long partition_id,
    TPartitionRange range)
  {
    this();
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    this.range = range;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRangePartition(TRangePartition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partition_id = other.partition_id;
    if (other.isSetRange()) {
      this.range = new TPartitionRange(other.range);
    }
    if (other.isSetDistributed_exprs()) {
      List<com.baidu.palo.thrift.TExpr> __this__distributed_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(other.distributed_exprs.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.distributed_exprs) {
        __this__distributed_exprs.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.distributed_exprs = __this__distributed_exprs;
    }
    this.distribute_bucket = other.distribute_bucket;
  }

  public TRangePartition deepCopy() {
    return new TRangePartition(this);
  }

  @Override
  public void clear() {
    setPartition_idIsSet(false);
    this.partition_id = 0;
    this.range = null;
    this.distributed_exprs = null;
    setDistribute_bucketIsSet(false);
    this.distribute_bucket = 0;
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TRangePartition setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public TPartitionRange getRange() {
    return this.range;
  }

  public TRangePartition setRange(TPartitionRange range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  public int getDistributed_exprsSize() {
    return (this.distributed_exprs == null) ? 0 : this.distributed_exprs.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getDistributed_exprsIterator() {
    return (this.distributed_exprs == null) ? null : this.distributed_exprs.iterator();
  }

  public void addToDistributed_exprs(com.baidu.palo.thrift.TExpr elem) {
    if (this.distributed_exprs == null) {
      this.distributed_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.distributed_exprs.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getDistributed_exprs() {
    return this.distributed_exprs;
  }

  public TRangePartition setDistributed_exprs(List<com.baidu.palo.thrift.TExpr> distributed_exprs) {
    this.distributed_exprs = distributed_exprs;
    return this;
  }

  public void unsetDistributed_exprs() {
    this.distributed_exprs = null;
  }

  /** Returns true if field distributed_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetDistributed_exprs() {
    return this.distributed_exprs != null;
  }

  public void setDistributed_exprsIsSet(boolean value) {
    if (!value) {
      this.distributed_exprs = null;
    }
  }

  public int getDistribute_bucket() {
    return this.distribute_bucket;
  }

  public TRangePartition setDistribute_bucket(int distribute_bucket) {
    this.distribute_bucket = distribute_bucket;
    setDistribute_bucketIsSet(true);
    return this;
  }

  public void unsetDistribute_bucket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID);
  }

  /** Returns true if field distribute_bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribute_bucket() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID);
  }

  public void setDistribute_bucketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((Long)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((TPartitionRange)value);
      }
      break;

    case DISTRIBUTED_EXPRS:
      if (value == null) {
        unsetDistributed_exprs();
      } else {
        setDistributed_exprs((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    case DISTRIBUTE_BUCKET:
      if (value == null) {
        unsetDistribute_bucket();
      } else {
        setDistribute_bucket((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_ID:
      return getPartition_id();

    case RANGE:
      return getRange();

    case DISTRIBUTED_EXPRS:
      return getDistributed_exprs();

    case DISTRIBUTE_BUCKET:
      return getDistribute_bucket();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_ID:
      return isSetPartition_id();
    case RANGE:
      return isSetRange();
    case DISTRIBUTED_EXPRS:
      return isSetDistributed_exprs();
    case DISTRIBUTE_BUCKET:
      return isSetDistribute_bucket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRangePartition)
      return this.equals((TRangePartition)that);
    return false;
  }

  public boolean equals(TRangePartition that) {
    if (that == null)
      return false;

    boolean this_present_partition_id = true;
    boolean that_present_partition_id = true;
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    boolean this_present_distributed_exprs = true && this.isSetDistributed_exprs();
    boolean that_present_distributed_exprs = true && that.isSetDistributed_exprs();
    if (this_present_distributed_exprs || that_present_distributed_exprs) {
      if (!(this_present_distributed_exprs && that_present_distributed_exprs))
        return false;
      if (!this.distributed_exprs.equals(that.distributed_exprs))
        return false;
    }

    boolean this_present_distribute_bucket = true && this.isSetDistribute_bucket();
    boolean that_present_distribute_bucket = true && that.isSetDistribute_bucket();
    if (this_present_distribute_bucket || that_present_distribute_bucket) {
      if (!(this_present_distribute_bucket && that_present_distribute_bucket))
        return false;
      if (this.distribute_bucket != that.distribute_bucket)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partition_id = true;
    list.add(present_partition_id);
    if (present_partition_id)
      list.add(partition_id);

    boolean present_range = true && (isSetRange());
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_distributed_exprs = true && (isSetDistributed_exprs());
    list.add(present_distributed_exprs);
    if (present_distributed_exprs)
      list.add(distributed_exprs);

    boolean present_distribute_bucket = true && (isSetDistribute_bucket());
    list.add(present_distribute_bucket);
    if (present_distribute_bucket)
      list.add(distribute_bucket);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRangePartition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartition_id()).compareTo(other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistributed_exprs()).compareTo(other.isSetDistributed_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistributed_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distributed_exprs, other.distributed_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistribute_bucket()).compareTo(other.isSetDistribute_bucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribute_bucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribute_bucket, other.distribute_bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRangePartition(");
    boolean first = true;

    sb.append("partition_id:");
    sb.append(this.partition_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("range:");
    if (this.range == null) {
      sb.append("null");
    } else {
      sb.append(this.range);
    }
    first = false;
    if (isSetDistributed_exprs()) {
      if (!first) sb.append(", ");
      sb.append("distributed_exprs:");
      if (this.distributed_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.distributed_exprs);
      }
      first = false;
    }
    if (isSetDistribute_bucket()) {
      if (!first) sb.append(", ");
      sb.append("distribute_bucket:");
      sb.append(this.distribute_bucket);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'partition_id' because it's a primitive and you chose the non-beans generator.
    if (range == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'range' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (range != null) {
      range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRangePartitionStandardSchemeFactory implements SchemeFactory {
    public TRangePartitionStandardScheme getScheme() {
      return new TRangePartitionStandardScheme();
    }
  }

  private static class TRangePartitionStandardScheme extends StandardScheme<TRangePartition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRangePartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range = new TPartitionRange();
              struct.range.read(iprot);
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTRIBUTED_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.distributed_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list0.size);
                com.baidu.palo.thrift.TExpr _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.baidu.palo.thrift.TExpr();
                  _elem1.read(iprot);
                  struct.distributed_exprs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDistributed_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISTRIBUTE_BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distribute_bucket = iprot.readI32();
              struct.setDistribute_bucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPartition_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRangePartition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI64(struct.partition_id);
      oprot.writeFieldEnd();
      if (struct.range != null) {
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        struct.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.distributed_exprs != null) {
        if (struct.isSetDistributed_exprs()) {
          oprot.writeFieldBegin(DISTRIBUTED_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.distributed_exprs.size()));
            for (com.baidu.palo.thrift.TExpr _iter3 : struct.distributed_exprs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistribute_bucket()) {
        oprot.writeFieldBegin(DISTRIBUTE_BUCKET_FIELD_DESC);
        oprot.writeI32(struct.distribute_bucket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRangePartitionTupleSchemeFactory implements SchemeFactory {
    public TRangePartitionTupleScheme getScheme() {
      return new TRangePartitionTupleScheme();
    }
  }

  private static class TRangePartitionTupleScheme extends TupleScheme<TRangePartition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRangePartition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.partition_id);
      struct.range.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDistributed_exprs()) {
        optionals.set(0);
      }
      if (struct.isSetDistribute_bucket()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDistributed_exprs()) {
        {
          oprot.writeI32(struct.distributed_exprs.size());
          for (com.baidu.palo.thrift.TExpr _iter4 : struct.distributed_exprs)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetDistribute_bucket()) {
        oprot.writeI32(struct.distribute_bucket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRangePartition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.partition_id = iprot.readI64();
      struct.setPartition_idIsSet(true);
      struct.range = new TPartitionRange();
      struct.range.read(iprot);
      struct.setRangeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.distributed_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list5.size);
          com.baidu.palo.thrift.TExpr _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.baidu.palo.thrift.TExpr();
            _elem6.read(iprot);
            struct.distributed_exprs.add(_elem6);
          }
        }
        struct.setDistributed_exprsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.distribute_bucket = iprot.readI32();
        struct.setDistribute_bucketIsSet(true);
      }
    }
  }

}

