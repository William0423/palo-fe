/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TMasterOpRequest implements org.apache.thrift.TBase<TMasterOpRequest, TMasterOpRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TMasterOpRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMasterOpRequest");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXEC_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("execMemLimit", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTimeout", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMasterOpRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMasterOpRequestTupleSchemeFactory());
  }

  public String user; // required
  public String db; // required
  public String sql; // required
  public com.baidu.palo.thrift.TResourceInfo resourceInfo; // optional
  public String cluster; // optional
  public long execMemLimit; // optional
  public int queryTimeout; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    DB((short)2, "db"),
    SQL((short)3, "sql"),
    RESOURCE_INFO((short)4, "resourceInfo"),
    CLUSTER((short)5, "cluster"),
    EXEC_MEM_LIMIT((short)6, "execMemLimit"),
    QUERY_TIMEOUT((short)7, "queryTimeout");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // DB
          return DB;
        case 3: // SQL
          return SQL;
        case 4: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 5: // CLUSTER
          return CLUSTER;
        case 6: // EXEC_MEM_LIMIT
          return EXEC_MEM_LIMIT;
        case 7: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECMEMLIMIT_ISSET_ID = 0;
  private static final int __QUERYTIMEOUT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_INFO,_Fields.CLUSTER,_Fields.EXEC_MEM_LIMIT,_Fields.QUERY_TIMEOUT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resourceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("execMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("queryTimeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMasterOpRequest.class, metaDataMap);
  }

  public TMasterOpRequest() {
  }

  public TMasterOpRequest(
    String user,
    String db,
    String sql)
  {
    this();
    this.user = user;
    this.db = db;
    this.sql = sql;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMasterOpRequest(TMasterOpRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetSql()) {
      this.sql = other.sql;
    }
    if (other.isSetResourceInfo()) {
      this.resourceInfo = new com.baidu.palo.thrift.TResourceInfo(other.resourceInfo);
    }
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    this.execMemLimit = other.execMemLimit;
    this.queryTimeout = other.queryTimeout;
  }

  public TMasterOpRequest deepCopy() {
    return new TMasterOpRequest(this);
  }

  @Override
  public void clear() {
    this.user = null;
    this.db = null;
    this.sql = null;
    this.resourceInfo = null;
    this.cluster = null;
    setExecMemLimitIsSet(false);
    this.execMemLimit = 0;
    setQueryTimeoutIsSet(false);
    this.queryTimeout = 0;
  }

  public String getUser() {
    return this.user;
  }

  public TMasterOpRequest setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getDb() {
    return this.db;
  }

  public TMasterOpRequest setDb(String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  public String getSql() {
    return this.sql;
  }

  public TMasterOpRequest setSql(String sql) {
    this.sql = sql;
    return this;
  }

  public void unsetSql() {
    this.sql = null;
  }

  /** Returns true if field sql is set (has been assigned a value) and false otherwise */
  public boolean isSetSql() {
    return this.sql != null;
  }

  public void setSqlIsSet(boolean value) {
    if (!value) {
      this.sql = null;
    }
  }

  public com.baidu.palo.thrift.TResourceInfo getResourceInfo() {
    return this.resourceInfo;
  }

  public TMasterOpRequest setResourceInfo(com.baidu.palo.thrift.TResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
    return this;
  }

  public void unsetResourceInfo() {
    this.resourceInfo = null;
  }

  /** Returns true if field resourceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceInfo() {
    return this.resourceInfo != null;
  }

  public void setResourceInfoIsSet(boolean value) {
    if (!value) {
      this.resourceInfo = null;
    }
  }

  public String getCluster() {
    return this.cluster;
  }

  public TMasterOpRequest setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public long getExecMemLimit() {
    return this.execMemLimit;
  }

  public TMasterOpRequest setExecMemLimit(long execMemLimit) {
    this.execMemLimit = execMemLimit;
    setExecMemLimitIsSet(true);
    return this;
  }

  public void unsetExecMemLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field execMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetExecMemLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  public void setExecMemLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID, value);
  }

  public int getQueryTimeout() {
    return this.queryTimeout;
  }

  public TMasterOpRequest setQueryTimeout(int queryTimeout) {
    this.queryTimeout = queryTimeout;
    setQueryTimeoutIsSet(true);
    return this;
  }

  public void unsetQueryTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  /** Returns true if field queryTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  public void setQueryTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((String)value);
      }
      break;

    case SQL:
      if (value == null) {
        unsetSql();
      } else {
        setSql((String)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResourceInfo();
      } else {
        setResourceInfo((com.baidu.palo.thrift.TResourceInfo)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case EXEC_MEM_LIMIT:
      if (value == null) {
        unsetExecMemLimit();
      } else {
        setExecMemLimit((Long)value);
      }
      break;

    case QUERY_TIMEOUT:
      if (value == null) {
        unsetQueryTimeout();
      } else {
        setQueryTimeout((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return getUser();

    case DB:
      return getDb();

    case SQL:
      return getSql();

    case RESOURCE_INFO:
      return getResourceInfo();

    case CLUSTER:
      return getCluster();

    case EXEC_MEM_LIMIT:
      return getExecMemLimit();

    case QUERY_TIMEOUT:
      return getQueryTimeout();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case DB:
      return isSetDb();
    case SQL:
      return isSetSql();
    case RESOURCE_INFO:
      return isSetResourceInfo();
    case CLUSTER:
      return isSetCluster();
    case EXEC_MEM_LIMIT:
      return isSetExecMemLimit();
    case QUERY_TIMEOUT:
      return isSetQueryTimeout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMasterOpRequest)
      return this.equals((TMasterOpRequest)that);
    return false;
  }

  public boolean equals(TMasterOpRequest that) {
    if (that == null)
      return false;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_sql = true && this.isSetSql();
    boolean that_present_sql = true && that.isSetSql();
    if (this_present_sql || that_present_sql) {
      if (!(this_present_sql && that_present_sql))
        return false;
      if (!this.sql.equals(that.sql))
        return false;
    }

    boolean this_present_resourceInfo = true && this.isSetResourceInfo();
    boolean that_present_resourceInfo = true && that.isSetResourceInfo();
    if (this_present_resourceInfo || that_present_resourceInfo) {
      if (!(this_present_resourceInfo && that_present_resourceInfo))
        return false;
      if (!this.resourceInfo.equals(that.resourceInfo))
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_execMemLimit = true && this.isSetExecMemLimit();
    boolean that_present_execMemLimit = true && that.isSetExecMemLimit();
    if (this_present_execMemLimit || that_present_execMemLimit) {
      if (!(this_present_execMemLimit && that_present_execMemLimit))
        return false;
      if (this.execMemLimit != that.execMemLimit)
        return false;
    }

    boolean this_present_queryTimeout = true && this.isSetQueryTimeout();
    boolean that_present_queryTimeout = true && that.isSetQueryTimeout();
    if (this_present_queryTimeout || that_present_queryTimeout) {
      if (!(this_present_queryTimeout && that_present_queryTimeout))
        return false;
      if (this.queryTimeout != that.queryTimeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_db = true && (isSetDb());
    list.add(present_db);
    if (present_db)
      list.add(db);

    boolean present_sql = true && (isSetSql());
    list.add(present_sql);
    if (present_sql)
      list.add(sql);

    boolean present_resourceInfo = true && (isSetResourceInfo());
    list.add(present_resourceInfo);
    if (present_resourceInfo)
      list.add(resourceInfo);

    boolean present_cluster = true && (isSetCluster());
    list.add(present_cluster);
    if (present_cluster)
      list.add(cluster);

    boolean present_execMemLimit = true && (isSetExecMemLimit());
    list.add(present_execMemLimit);
    if (present_execMemLimit)
      list.add(execMemLimit);

    boolean present_queryTimeout = true && (isSetQueryTimeout());
    list.add(present_queryTimeout);
    if (present_queryTimeout)
      list.add(queryTimeout);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMasterOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceInfo()).compareTo(other.isSetResourceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceInfo, other.resourceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecMemLimit()).compareTo(other.isSetExecMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execMemLimit, other.execMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryTimeout()).compareTo(other.isSetQueryTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryTimeout, other.queryTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMasterOpRequest(");
    boolean first = true;

    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sql:");
    if (this.sql == null) {
      sb.append("null");
    } else {
      sb.append(this.sql);
    }
    first = false;
    if (isSetResourceInfo()) {
      if (!first) sb.append(", ");
      sb.append("resourceInfo:");
      if (this.resourceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceInfo);
      }
      first = false;
    }
    if (isSetCluster()) {
      if (!first) sb.append(", ");
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (isSetExecMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("execMemLimit:");
      sb.append(this.execMemLimit);
      first = false;
    }
    if (isSetQueryTimeout()) {
      if (!first) sb.append(", ");
      sb.append("queryTimeout:");
      sb.append(this.queryTimeout);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (sql == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resourceInfo != null) {
      resourceInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMasterOpRequestStandardSchemeFactory implements SchemeFactory {
    public TMasterOpRequestStandardScheme getScheme() {
      return new TMasterOpRequestStandardScheme();
    }
  }

  private static class TMasterOpRequestStandardScheme extends StandardScheme<TMasterOpRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resourceInfo = new com.baidu.palo.thrift.TResourceInfo();
              struct.resourceInfo.read(iprot);
              struct.setResourceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXEC_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execMemLimit = iprot.readI64();
              struct.setExecMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryTimeout = iprot.readI32();
              struct.setQueryTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.sql != null) {
        oprot.writeFieldBegin(SQL_FIELD_DESC);
        oprot.writeString(struct.sql);
        oprot.writeFieldEnd();
      }
      if (struct.resourceInfo != null) {
        if (struct.isSetResourceInfo()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resourceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeFieldBegin(EXEC_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.execMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.queryTimeout);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMasterOpRequestTupleSchemeFactory implements SchemeFactory {
    public TMasterOpRequestTupleScheme getScheme() {
      return new TMasterOpRequestTupleScheme();
    }
  }

  private static class TMasterOpRequestTupleScheme extends TupleScheme<TMasterOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.db);
      oprot.writeString(struct.sql);
      BitSet optionals = new BitSet();
      if (struct.isSetResourceInfo()) {
        optionals.set(0);
      }
      if (struct.isSetCluster()) {
        optionals.set(1);
      }
      if (struct.isSetExecMemLimit()) {
        optionals.set(2);
      }
      if (struct.isSetQueryTimeout()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetResourceInfo()) {
        struct.resourceInfo.write(oprot);
      }
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeI64(struct.execMemLimit);
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeI32(struct.queryTimeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.sql = iprot.readString();
      struct.setSqlIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.resourceInfo = new com.baidu.palo.thrift.TResourceInfo();
        struct.resourceInfo.read(iprot);
        struct.setResourceInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execMemLimit = iprot.readI64();
        struct.setExecMemLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryTimeout = iprot.readI32();
        struct.setQueryTimeoutIsSet(true);
      }
    }
  }

}

