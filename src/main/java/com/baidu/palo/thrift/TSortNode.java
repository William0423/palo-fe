/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TSortNode implements org.apache.thrift.TBase<TSortNode, TSortNode._Fields>, java.io.Serializable, Cloneable, Comparable<TSortNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSortNode");

  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USE_TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("use_top_n", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ORDERING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordering_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ASC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("is_asc_order", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_default_limit", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField NULLS_FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("nulls_first", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_TUPLE_SLOT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_tuple_slot_exprs", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSortNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSortNodeTupleSchemeFactory());
  }

  public TSortInfo sort_info; // required
  public boolean use_top_n; // required
  public long offset; // optional
  public List<com.baidu.palo.thrift.TExpr> ordering_exprs; // optional
  public List<Boolean> is_asc_order; // optional
  public boolean is_default_limit; // optional
  public List<Boolean> nulls_first; // optional
  public List<com.baidu.palo.thrift.TExpr> sort_tuple_slot_exprs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_INFO((short)1, "sort_info"),
    USE_TOP_N((short)2, "use_top_n"),
    OFFSET((short)3, "offset"),
    ORDERING_EXPRS((short)4, "ordering_exprs"),
    IS_ASC_ORDER((short)5, "is_asc_order"),
    IS_DEFAULT_LIMIT((short)6, "is_default_limit"),
    NULLS_FIRST((short)7, "nulls_first"),
    SORT_TUPLE_SLOT_EXPRS((short)8, "sort_tuple_slot_exprs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_INFO
          return SORT_INFO;
        case 2: // USE_TOP_N
          return USE_TOP_N;
        case 3: // OFFSET
          return OFFSET;
        case 4: // ORDERING_EXPRS
          return ORDERING_EXPRS;
        case 5: // IS_ASC_ORDER
          return IS_ASC_ORDER;
        case 6: // IS_DEFAULT_LIMIT
          return IS_DEFAULT_LIMIT;
        case 7: // NULLS_FIRST
          return NULLS_FIRST;
        case 8: // SORT_TUPLE_SLOT_EXPRS
          return SORT_TUPLE_SLOT_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USE_TOP_N_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __IS_DEFAULT_LIMIT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OFFSET,_Fields.ORDERING_EXPRS,_Fields.IS_ASC_ORDER,_Fields.IS_DEFAULT_LIMIT,_Fields.NULLS_FIRST,_Fields.SORT_TUPLE_SLOT_EXPRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortInfo.class)));
    tmpMap.put(_Fields.USE_TOP_N, new org.apache.thrift.meta_data.FieldMetaData("use_top_n", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDERING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("ordering_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_ASC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("is_asc_order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.IS_DEFAULT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("is_default_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NULLS_FIRST, new org.apache.thrift.meta_data.FieldMetaData("nulls_first", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SORT_TUPLE_SLOT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("sort_tuple_slot_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSortNode.class, metaDataMap);
  }

  public TSortNode() {
  }

  public TSortNode(
    TSortInfo sort_info,
    boolean use_top_n)
  {
    this();
    this.sort_info = sort_info;
    this.use_top_n = use_top_n;
    setUse_top_nIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSortNode(TSortNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSort_info()) {
      this.sort_info = new TSortInfo(other.sort_info);
    }
    this.use_top_n = other.use_top_n;
    this.offset = other.offset;
    if (other.isSetOrdering_exprs()) {
      List<com.baidu.palo.thrift.TExpr> __this__ordering_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(other.ordering_exprs.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.ordering_exprs) {
        __this__ordering_exprs.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.ordering_exprs = __this__ordering_exprs;
    }
    if (other.isSetIs_asc_order()) {
      List<Boolean> __this__is_asc_order = new ArrayList<Boolean>(other.is_asc_order);
      this.is_asc_order = __this__is_asc_order;
    }
    this.is_default_limit = other.is_default_limit;
    if (other.isSetNulls_first()) {
      List<Boolean> __this__nulls_first = new ArrayList<Boolean>(other.nulls_first);
      this.nulls_first = __this__nulls_first;
    }
    if (other.isSetSort_tuple_slot_exprs()) {
      List<com.baidu.palo.thrift.TExpr> __this__sort_tuple_slot_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(other.sort_tuple_slot_exprs.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.sort_tuple_slot_exprs) {
        __this__sort_tuple_slot_exprs.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.sort_tuple_slot_exprs = __this__sort_tuple_slot_exprs;
    }
  }

  public TSortNode deepCopy() {
    return new TSortNode(this);
  }

  @Override
  public void clear() {
    this.sort_info = null;
    setUse_top_nIsSet(false);
    this.use_top_n = false;
    setOffsetIsSet(false);
    this.offset = 0;
    this.ordering_exprs = null;
    this.is_asc_order = null;
    setIs_default_limitIsSet(false);
    this.is_default_limit = false;
    this.nulls_first = null;
    this.sort_tuple_slot_exprs = null;
  }

  public TSortInfo getSort_info() {
    return this.sort_info;
  }

  public TSortNode setSort_info(TSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSort_info() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_info() {
    return this.sort_info != null;
  }

  public void setSort_infoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public boolean isUse_top_n() {
    return this.use_top_n;
  }

  public TSortNode setUse_top_n(boolean use_top_n) {
    this.use_top_n = use_top_n;
    setUse_top_nIsSet(true);
    return this;
  }

  public void unsetUse_top_n() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  /** Returns true if field use_top_n is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_top_n() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  public void setUse_top_nIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_TOP_N_ISSET_ID, value);
  }

  public long getOffset() {
    return this.offset;
  }

  public TSortNode setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getOrdering_exprsSize() {
    return (this.ordering_exprs == null) ? 0 : this.ordering_exprs.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getOrdering_exprsIterator() {
    return (this.ordering_exprs == null) ? null : this.ordering_exprs.iterator();
  }

  public void addToOrdering_exprs(com.baidu.palo.thrift.TExpr elem) {
    if (this.ordering_exprs == null) {
      this.ordering_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.ordering_exprs.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getOrdering_exprs() {
    return this.ordering_exprs;
  }

  public TSortNode setOrdering_exprs(List<com.baidu.palo.thrift.TExpr> ordering_exprs) {
    this.ordering_exprs = ordering_exprs;
    return this;
  }

  public void unsetOrdering_exprs() {
    this.ordering_exprs = null;
  }

  /** Returns true if field ordering_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdering_exprs() {
    return this.ordering_exprs != null;
  }

  public void setOrdering_exprsIsSet(boolean value) {
    if (!value) {
      this.ordering_exprs = null;
    }
  }

  public int getIs_asc_orderSize() {
    return (this.is_asc_order == null) ? 0 : this.is_asc_order.size();
  }

  public java.util.Iterator<Boolean> getIs_asc_orderIterator() {
    return (this.is_asc_order == null) ? null : this.is_asc_order.iterator();
  }

  public void addToIs_asc_order(boolean elem) {
    if (this.is_asc_order == null) {
      this.is_asc_order = new ArrayList<Boolean>();
    }
    this.is_asc_order.add(elem);
  }

  public List<Boolean> getIs_asc_order() {
    return this.is_asc_order;
  }

  public TSortNode setIs_asc_order(List<Boolean> is_asc_order) {
    this.is_asc_order = is_asc_order;
    return this;
  }

  public void unsetIs_asc_order() {
    this.is_asc_order = null;
  }

  /** Returns true if field is_asc_order is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_asc_order() {
    return this.is_asc_order != null;
  }

  public void setIs_asc_orderIsSet(boolean value) {
    if (!value) {
      this.is_asc_order = null;
    }
  }

  public boolean isIs_default_limit() {
    return this.is_default_limit;
  }

  public TSortNode setIs_default_limit(boolean is_default_limit) {
    this.is_default_limit = is_default_limit;
    setIs_default_limitIsSet(true);
    return this;
  }

  public void unsetIs_default_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  /** Returns true if field is_default_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_default_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  public void setIs_default_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID, value);
  }

  public int getNulls_firstSize() {
    return (this.nulls_first == null) ? 0 : this.nulls_first.size();
  }

  public java.util.Iterator<Boolean> getNulls_firstIterator() {
    return (this.nulls_first == null) ? null : this.nulls_first.iterator();
  }

  public void addToNulls_first(boolean elem) {
    if (this.nulls_first == null) {
      this.nulls_first = new ArrayList<Boolean>();
    }
    this.nulls_first.add(elem);
  }

  public List<Boolean> getNulls_first() {
    return this.nulls_first;
  }

  public TSortNode setNulls_first(List<Boolean> nulls_first) {
    this.nulls_first = nulls_first;
    return this;
  }

  public void unsetNulls_first() {
    this.nulls_first = null;
  }

  /** Returns true if field nulls_first is set (has been assigned a value) and false otherwise */
  public boolean isSetNulls_first() {
    return this.nulls_first != null;
  }

  public void setNulls_firstIsSet(boolean value) {
    if (!value) {
      this.nulls_first = null;
    }
  }

  public int getSort_tuple_slot_exprsSize() {
    return (this.sort_tuple_slot_exprs == null) ? 0 : this.sort_tuple_slot_exprs.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getSort_tuple_slot_exprsIterator() {
    return (this.sort_tuple_slot_exprs == null) ? null : this.sort_tuple_slot_exprs.iterator();
  }

  public void addToSort_tuple_slot_exprs(com.baidu.palo.thrift.TExpr elem) {
    if (this.sort_tuple_slot_exprs == null) {
      this.sort_tuple_slot_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.sort_tuple_slot_exprs.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs;
  }

  public TSortNode setSort_tuple_slot_exprs(List<com.baidu.palo.thrift.TExpr> sort_tuple_slot_exprs) {
    this.sort_tuple_slot_exprs = sort_tuple_slot_exprs;
    return this;
  }

  public void unsetSort_tuple_slot_exprs() {
    this.sort_tuple_slot_exprs = null;
  }

  /** Returns true if field sort_tuple_slot_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs != null;
  }

  public void setSort_tuple_slot_exprsIsSet(boolean value) {
    if (!value) {
      this.sort_tuple_slot_exprs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_INFO:
      if (value == null) {
        unsetSort_info();
      } else {
        setSort_info((TSortInfo)value);
      }
      break;

    case USE_TOP_N:
      if (value == null) {
        unsetUse_top_n();
      } else {
        setUse_top_n((Boolean)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    case ORDERING_EXPRS:
      if (value == null) {
        unsetOrdering_exprs();
      } else {
        setOrdering_exprs((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    case IS_ASC_ORDER:
      if (value == null) {
        unsetIs_asc_order();
      } else {
        setIs_asc_order((List<Boolean>)value);
      }
      break;

    case IS_DEFAULT_LIMIT:
      if (value == null) {
        unsetIs_default_limit();
      } else {
        setIs_default_limit((Boolean)value);
      }
      break;

    case NULLS_FIRST:
      if (value == null) {
        unsetNulls_first();
      } else {
        setNulls_first((List<Boolean>)value);
      }
      break;

    case SORT_TUPLE_SLOT_EXPRS:
      if (value == null) {
        unsetSort_tuple_slot_exprs();
      } else {
        setSort_tuple_slot_exprs((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_INFO:
      return getSort_info();

    case USE_TOP_N:
      return isUse_top_n();

    case OFFSET:
      return getOffset();

    case ORDERING_EXPRS:
      return getOrdering_exprs();

    case IS_ASC_ORDER:
      return getIs_asc_order();

    case IS_DEFAULT_LIMIT:
      return isIs_default_limit();

    case NULLS_FIRST:
      return getNulls_first();

    case SORT_TUPLE_SLOT_EXPRS:
      return getSort_tuple_slot_exprs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_INFO:
      return isSetSort_info();
    case USE_TOP_N:
      return isSetUse_top_n();
    case OFFSET:
      return isSetOffset();
    case ORDERING_EXPRS:
      return isSetOrdering_exprs();
    case IS_ASC_ORDER:
      return isSetIs_asc_order();
    case IS_DEFAULT_LIMIT:
      return isSetIs_default_limit();
    case NULLS_FIRST:
      return isSetNulls_first();
    case SORT_TUPLE_SLOT_EXPRS:
      return isSetSort_tuple_slot_exprs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSortNode)
      return this.equals((TSortNode)that);
    return false;
  }

  public boolean equals(TSortNode that) {
    if (that == null)
      return false;

    boolean this_present_sort_info = true && this.isSetSort_info();
    boolean that_present_sort_info = true && that.isSetSort_info();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_use_top_n = true;
    boolean that_present_use_top_n = true;
    if (this_present_use_top_n || that_present_use_top_n) {
      if (!(this_present_use_top_n && that_present_use_top_n))
        return false;
      if (this.use_top_n != that.use_top_n)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_ordering_exprs = true && this.isSetOrdering_exprs();
    boolean that_present_ordering_exprs = true && that.isSetOrdering_exprs();
    if (this_present_ordering_exprs || that_present_ordering_exprs) {
      if (!(this_present_ordering_exprs && that_present_ordering_exprs))
        return false;
      if (!this.ordering_exprs.equals(that.ordering_exprs))
        return false;
    }

    boolean this_present_is_asc_order = true && this.isSetIs_asc_order();
    boolean that_present_is_asc_order = true && that.isSetIs_asc_order();
    if (this_present_is_asc_order || that_present_is_asc_order) {
      if (!(this_present_is_asc_order && that_present_is_asc_order))
        return false;
      if (!this.is_asc_order.equals(that.is_asc_order))
        return false;
    }

    boolean this_present_is_default_limit = true && this.isSetIs_default_limit();
    boolean that_present_is_default_limit = true && that.isSetIs_default_limit();
    if (this_present_is_default_limit || that_present_is_default_limit) {
      if (!(this_present_is_default_limit && that_present_is_default_limit))
        return false;
      if (this.is_default_limit != that.is_default_limit)
        return false;
    }

    boolean this_present_nulls_first = true && this.isSetNulls_first();
    boolean that_present_nulls_first = true && that.isSetNulls_first();
    if (this_present_nulls_first || that_present_nulls_first) {
      if (!(this_present_nulls_first && that_present_nulls_first))
        return false;
      if (!this.nulls_first.equals(that.nulls_first))
        return false;
    }

    boolean this_present_sort_tuple_slot_exprs = true && this.isSetSort_tuple_slot_exprs();
    boolean that_present_sort_tuple_slot_exprs = true && that.isSetSort_tuple_slot_exprs();
    if (this_present_sort_tuple_slot_exprs || that_present_sort_tuple_slot_exprs) {
      if (!(this_present_sort_tuple_slot_exprs && that_present_sort_tuple_slot_exprs))
        return false;
      if (!this.sort_tuple_slot_exprs.equals(that.sort_tuple_slot_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sort_info = true && (isSetSort_info());
    list.add(present_sort_info);
    if (present_sort_info)
      list.add(sort_info);

    boolean present_use_top_n = true;
    list.add(present_use_top_n);
    if (present_use_top_n)
      list.add(use_top_n);

    boolean present_offset = true && (isSetOffset());
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_ordering_exprs = true && (isSetOrdering_exprs());
    list.add(present_ordering_exprs);
    if (present_ordering_exprs)
      list.add(ordering_exprs);

    boolean present_is_asc_order = true && (isSetIs_asc_order());
    list.add(present_is_asc_order);
    if (present_is_asc_order)
      list.add(is_asc_order);

    boolean present_is_default_limit = true && (isSetIs_default_limit());
    list.add(present_is_default_limit);
    if (present_is_default_limit)
      list.add(is_default_limit);

    boolean present_nulls_first = true && (isSetNulls_first());
    list.add(present_nulls_first);
    if (present_nulls_first)
      list.add(nulls_first);

    boolean present_sort_tuple_slot_exprs = true && (isSetSort_tuple_slot_exprs());
    list.add(present_sort_tuple_slot_exprs);
    if (present_sort_tuple_slot_exprs)
      list.add(sort_tuple_slot_exprs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSortNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSort_info()).compareTo(other.isSetSort_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, other.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_top_n()).compareTo(other.isSetUse_top_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_top_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_top_n, other.use_top_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdering_exprs()).compareTo(other.isSetOrdering_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdering_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordering_exprs, other.ordering_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_asc_order()).compareTo(other.isSetIs_asc_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_asc_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_asc_order, other.is_asc_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_default_limit()).compareTo(other.isSetIs_default_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_default_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_default_limit, other.is_default_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNulls_first()).compareTo(other.isSetNulls_first());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNulls_first()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nulls_first, other.nulls_first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_tuple_slot_exprs()).compareTo(other.isSetSort_tuple_slot_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_tuple_slot_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_tuple_slot_exprs, other.sort_tuple_slot_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSortNode(");
    boolean first = true;

    sb.append("sort_info:");
    if (this.sort_info == null) {
      sb.append("null");
    } else {
      sb.append(this.sort_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_top_n:");
    sb.append(this.use_top_n);
    first = false;
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetOrdering_exprs()) {
      if (!first) sb.append(", ");
      sb.append("ordering_exprs:");
      if (this.ordering_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.ordering_exprs);
      }
      first = false;
    }
    if (isSetIs_asc_order()) {
      if (!first) sb.append(", ");
      sb.append("is_asc_order:");
      if (this.is_asc_order == null) {
        sb.append("null");
      } else {
        sb.append(this.is_asc_order);
      }
      first = false;
    }
    if (isSetIs_default_limit()) {
      if (!first) sb.append(", ");
      sb.append("is_default_limit:");
      sb.append(this.is_default_limit);
      first = false;
    }
    if (isSetNulls_first()) {
      if (!first) sb.append(", ");
      sb.append("nulls_first:");
      if (this.nulls_first == null) {
        sb.append("null");
      } else {
        sb.append(this.nulls_first);
      }
      first = false;
    }
    if (isSetSort_tuple_slot_exprs()) {
      if (!first) sb.append(", ");
      sb.append("sort_tuple_slot_exprs:");
      if (this.sort_tuple_slot_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_tuple_slot_exprs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sort_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sort_info' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'use_top_n' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSortNodeStandardSchemeFactory implements SchemeFactory {
    public TSortNodeStandardScheme getScheme() {
      return new TSortNodeStandardScheme();
    }
  }

  private static class TSortNodeStandardScheme extends StandardScheme<TSortNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TSortInfo();
              struct.sort_info.read(iprot);
              struct.setSort_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_TOP_N
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_top_n = iprot.readBool();
              struct.setUse_top_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDERING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.ordering_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list264.size);
                com.baidu.palo.thrift.TExpr _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  _elem265 = new com.baidu.palo.thrift.TExpr();
                  _elem265.read(iprot);
                  struct.ordering_exprs.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setOrdering_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ASC_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                struct.is_asc_order = new ArrayList<Boolean>(_list267.size);
                boolean _elem268;
                for (int _i269 = 0; _i269 < _list267.size; ++_i269)
                {
                  _elem268 = iprot.readBool();
                  struct.is_asc_order.add(_elem268);
                }
                iprot.readListEnd();
              }
              struct.setIs_asc_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_DEFAULT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_default_limit = iprot.readBool();
              struct.setIs_default_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NULLS_FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                struct.nulls_first = new ArrayList<Boolean>(_list270.size);
                boolean _elem271;
                for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                {
                  _elem271 = iprot.readBool();
                  struct.nulls_first.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setNulls_firstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SORT_TUPLE_SLOT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list273 = iprot.readListBegin();
                struct.sort_tuple_slot_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list273.size);
                com.baidu.palo.thrift.TExpr _elem274;
                for (int _i275 = 0; _i275 < _list273.size; ++_i275)
                {
                  _elem274 = new com.baidu.palo.thrift.TExpr();
                  _elem274.read(iprot);
                  struct.sort_tuple_slot_exprs.add(_elem274);
                }
                iprot.readListEnd();
              }
              struct.setSort_tuple_slot_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUse_top_n()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_top_n' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSortNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sort_info != null) {
        oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
        struct.sort_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_TOP_N_FIELD_DESC);
      oprot.writeBool(struct.use_top_n);
      oprot.writeFieldEnd();
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.ordering_exprs != null) {
        if (struct.isSetOrdering_exprs()) {
          oprot.writeFieldBegin(ORDERING_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ordering_exprs.size()));
            for (com.baidu.palo.thrift.TExpr _iter276 : struct.ordering_exprs)
            {
              _iter276.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_asc_order != null) {
        if (struct.isSetIs_asc_order()) {
          oprot.writeFieldBegin(IS_ASC_ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.is_asc_order.size()));
            for (boolean _iter277 : struct.is_asc_order)
            {
              oprot.writeBool(_iter277);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeFieldBegin(IS_DEFAULT_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.is_default_limit);
        oprot.writeFieldEnd();
      }
      if (struct.nulls_first != null) {
        if (struct.isSetNulls_first()) {
          oprot.writeFieldBegin(NULLS_FIRST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nulls_first.size()));
            for (boolean _iter278 : struct.nulls_first)
            {
              oprot.writeBool(_iter278);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_tuple_slot_exprs != null) {
        if (struct.isSetSort_tuple_slot_exprs()) {
          oprot.writeFieldBegin(SORT_TUPLE_SLOT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sort_tuple_slot_exprs.size()));
            for (com.baidu.palo.thrift.TExpr _iter279 : struct.sort_tuple_slot_exprs)
            {
              _iter279.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSortNodeTupleSchemeFactory implements SchemeFactory {
    public TSortNodeTupleScheme getScheme() {
      return new TSortNodeTupleScheme();
    }
  }

  private static class TSortNodeTupleScheme extends TupleScheme<TSortNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSortNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.sort_info.write(oprot);
      oprot.writeBool(struct.use_top_n);
      BitSet optionals = new BitSet();
      if (struct.isSetOffset()) {
        optionals.set(0);
      }
      if (struct.isSetOrdering_exprs()) {
        optionals.set(1);
      }
      if (struct.isSetIs_asc_order()) {
        optionals.set(2);
      }
      if (struct.isSetIs_default_limit()) {
        optionals.set(3);
      }
      if (struct.isSetNulls_first()) {
        optionals.set(4);
      }
      if (struct.isSetSort_tuple_slot_exprs()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetOrdering_exprs()) {
        {
          oprot.writeI32(struct.ordering_exprs.size());
          for (com.baidu.palo.thrift.TExpr _iter280 : struct.ordering_exprs)
          {
            _iter280.write(oprot);
          }
        }
      }
      if (struct.isSetIs_asc_order()) {
        {
          oprot.writeI32(struct.is_asc_order.size());
          for (boolean _iter281 : struct.is_asc_order)
          {
            oprot.writeBool(_iter281);
          }
        }
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeBool(struct.is_default_limit);
      }
      if (struct.isSetNulls_first()) {
        {
          oprot.writeI32(struct.nulls_first.size());
          for (boolean _iter282 : struct.nulls_first)
          {
            oprot.writeBool(_iter282);
          }
        }
      }
      if (struct.isSetSort_tuple_slot_exprs()) {
        {
          oprot.writeI32(struct.sort_tuple_slot_exprs.size());
          for (com.baidu.palo.thrift.TExpr _iter283 : struct.sort_tuple_slot_exprs)
          {
            _iter283.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSortNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sort_info = new TSortInfo();
      struct.sort_info.read(iprot);
      struct.setSort_infoIsSet(true);
      struct.use_top_n = iprot.readBool();
      struct.setUse_top_nIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list284 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ordering_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list284.size);
          com.baidu.palo.thrift.TExpr _elem285;
          for (int _i286 = 0; _i286 < _list284.size; ++_i286)
          {
            _elem285 = new com.baidu.palo.thrift.TExpr();
            _elem285.read(iprot);
            struct.ordering_exprs.add(_elem285);
          }
        }
        struct.setOrdering_exprsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.is_asc_order = new ArrayList<Boolean>(_list287.size);
          boolean _elem288;
          for (int _i289 = 0; _i289 < _list287.size; ++_i289)
          {
            _elem288 = iprot.readBool();
            struct.is_asc_order.add(_elem288);
          }
        }
        struct.setIs_asc_orderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_default_limit = iprot.readBool();
        struct.setIs_default_limitIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list290 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.nulls_first = new ArrayList<Boolean>(_list290.size);
          boolean _elem291;
          for (int _i292 = 0; _i292 < _list290.size; ++_i292)
          {
            _elem291 = iprot.readBool();
            struct.nulls_first.add(_elem291);
          }
        }
        struct.setNulls_firstIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sort_tuple_slot_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list293.size);
          com.baidu.palo.thrift.TExpr _elem294;
          for (int _i295 = 0; _i295 < _list293.size; ++_i295)
          {
            _elem294 = new com.baidu.palo.thrift.TExpr();
            _elem294.read(iprot);
            struct.sort_tuple_slot_exprs.add(_elem294);
          }
        }
        struct.setSort_tuple_slot_exprsIsSet(true);
      }
    }
  }

}

