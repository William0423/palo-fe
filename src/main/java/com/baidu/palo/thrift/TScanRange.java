/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TScanRange implements org.apache.thrift.TBase<TScanRange, TScanRange._Fields>, java.io.Serializable, Cloneable, Comparable<TScanRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScanRange");

  private static final org.apache.thrift.protocol.TField PALO_SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("palo_scan_range", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KUDU_SCAN_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_scan_token", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BROKER_SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_scan_range", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TScanRangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TScanRangeTupleSchemeFactory());
  }

  public TPaloScanRange palo_scan_range; // optional
  public ByteBuffer kudu_scan_token; // optional
  public TBrokerScanRange broker_scan_range; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PALO_SCAN_RANGE((short)4, "palo_scan_range"),
    KUDU_SCAN_TOKEN((short)5, "kudu_scan_token"),
    BROKER_SCAN_RANGE((short)6, "broker_scan_range");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // PALO_SCAN_RANGE
          return PALO_SCAN_RANGE;
        case 5: // KUDU_SCAN_TOKEN
          return KUDU_SCAN_TOKEN;
        case 6: // BROKER_SCAN_RANGE
          return BROKER_SCAN_RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PALO_SCAN_RANGE,_Fields.KUDU_SCAN_TOKEN,_Fields.BROKER_SCAN_RANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PALO_SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("palo_scan_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPaloScanRange.class)));
    tmpMap.put(_Fields.KUDU_SCAN_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("kudu_scan_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BROKER_SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("broker_scan_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBrokerScanRange.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TScanRange.class, metaDataMap);
  }

  public TScanRange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TScanRange(TScanRange other) {
    if (other.isSetPalo_scan_range()) {
      this.palo_scan_range = new TPaloScanRange(other.palo_scan_range);
    }
    if (other.isSetKudu_scan_token()) {
      this.kudu_scan_token = org.apache.thrift.TBaseHelper.copyBinary(other.kudu_scan_token);
    }
    if (other.isSetBroker_scan_range()) {
      this.broker_scan_range = new TBrokerScanRange(other.broker_scan_range);
    }
  }

  public TScanRange deepCopy() {
    return new TScanRange(this);
  }

  @Override
  public void clear() {
    this.palo_scan_range = null;
    this.kudu_scan_token = null;
    this.broker_scan_range = null;
  }

  public TPaloScanRange getPalo_scan_range() {
    return this.palo_scan_range;
  }

  public TScanRange setPalo_scan_range(TPaloScanRange palo_scan_range) {
    this.palo_scan_range = palo_scan_range;
    return this;
  }

  public void unsetPalo_scan_range() {
    this.palo_scan_range = null;
  }

  /** Returns true if field palo_scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetPalo_scan_range() {
    return this.palo_scan_range != null;
  }

  public void setPalo_scan_rangeIsSet(boolean value) {
    if (!value) {
      this.palo_scan_range = null;
    }
  }

  public byte[] getKudu_scan_token() {
    setKudu_scan_token(org.apache.thrift.TBaseHelper.rightSize(kudu_scan_token));
    return kudu_scan_token == null ? null : kudu_scan_token.array();
  }

  public ByteBuffer bufferForKudu_scan_token() {
    return org.apache.thrift.TBaseHelper.copyBinary(kudu_scan_token);
  }

  public TScanRange setKudu_scan_token(byte[] kudu_scan_token) {
    this.kudu_scan_token = kudu_scan_token == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(kudu_scan_token, kudu_scan_token.length));
    return this;
  }

  public TScanRange setKudu_scan_token(ByteBuffer kudu_scan_token) {
    this.kudu_scan_token = org.apache.thrift.TBaseHelper.copyBinary(kudu_scan_token);
    return this;
  }

  public void unsetKudu_scan_token() {
    this.kudu_scan_token = null;
  }

  /** Returns true if field kudu_scan_token is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_scan_token() {
    return this.kudu_scan_token != null;
  }

  public void setKudu_scan_tokenIsSet(boolean value) {
    if (!value) {
      this.kudu_scan_token = null;
    }
  }

  public TBrokerScanRange getBroker_scan_range() {
    return this.broker_scan_range;
  }

  public TScanRange setBroker_scan_range(TBrokerScanRange broker_scan_range) {
    this.broker_scan_range = broker_scan_range;
    return this;
  }

  public void unsetBroker_scan_range() {
    this.broker_scan_range = null;
  }

  /** Returns true if field broker_scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetBroker_scan_range() {
    return this.broker_scan_range != null;
  }

  public void setBroker_scan_rangeIsSet(boolean value) {
    if (!value) {
      this.broker_scan_range = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PALO_SCAN_RANGE:
      if (value == null) {
        unsetPalo_scan_range();
      } else {
        setPalo_scan_range((TPaloScanRange)value);
      }
      break;

    case KUDU_SCAN_TOKEN:
      if (value == null) {
        unsetKudu_scan_token();
      } else {
        setKudu_scan_token((ByteBuffer)value);
      }
      break;

    case BROKER_SCAN_RANGE:
      if (value == null) {
        unsetBroker_scan_range();
      } else {
        setBroker_scan_range((TBrokerScanRange)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PALO_SCAN_RANGE:
      return getPalo_scan_range();

    case KUDU_SCAN_TOKEN:
      return getKudu_scan_token();

    case BROKER_SCAN_RANGE:
      return getBroker_scan_range();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PALO_SCAN_RANGE:
      return isSetPalo_scan_range();
    case KUDU_SCAN_TOKEN:
      return isSetKudu_scan_token();
    case BROKER_SCAN_RANGE:
      return isSetBroker_scan_range();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TScanRange)
      return this.equals((TScanRange)that);
    return false;
  }

  public boolean equals(TScanRange that) {
    if (that == null)
      return false;

    boolean this_present_palo_scan_range = true && this.isSetPalo_scan_range();
    boolean that_present_palo_scan_range = true && that.isSetPalo_scan_range();
    if (this_present_palo_scan_range || that_present_palo_scan_range) {
      if (!(this_present_palo_scan_range && that_present_palo_scan_range))
        return false;
      if (!this.palo_scan_range.equals(that.palo_scan_range))
        return false;
    }

    boolean this_present_kudu_scan_token = true && this.isSetKudu_scan_token();
    boolean that_present_kudu_scan_token = true && that.isSetKudu_scan_token();
    if (this_present_kudu_scan_token || that_present_kudu_scan_token) {
      if (!(this_present_kudu_scan_token && that_present_kudu_scan_token))
        return false;
      if (!this.kudu_scan_token.equals(that.kudu_scan_token))
        return false;
    }

    boolean this_present_broker_scan_range = true && this.isSetBroker_scan_range();
    boolean that_present_broker_scan_range = true && that.isSetBroker_scan_range();
    if (this_present_broker_scan_range || that_present_broker_scan_range) {
      if (!(this_present_broker_scan_range && that_present_broker_scan_range))
        return false;
      if (!this.broker_scan_range.equals(that.broker_scan_range))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_palo_scan_range = true && (isSetPalo_scan_range());
    list.add(present_palo_scan_range);
    if (present_palo_scan_range)
      list.add(palo_scan_range);

    boolean present_kudu_scan_token = true && (isSetKudu_scan_token());
    list.add(present_kudu_scan_token);
    if (present_kudu_scan_token)
      list.add(kudu_scan_token);

    boolean present_broker_scan_range = true && (isSetBroker_scan_range());
    list.add(present_broker_scan_range);
    if (present_broker_scan_range)
      list.add(broker_scan_range);

    return list.hashCode();
  }

  @Override
  public int compareTo(TScanRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPalo_scan_range()).compareTo(other.isSetPalo_scan_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPalo_scan_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.palo_scan_range, other.palo_scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_scan_token()).compareTo(other.isSetKudu_scan_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_scan_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_scan_token, other.kudu_scan_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBroker_scan_range()).compareTo(other.isSetBroker_scan_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroker_scan_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_scan_range, other.broker_scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TScanRange(");
    boolean first = true;

    if (isSetPalo_scan_range()) {
      sb.append("palo_scan_range:");
      if (this.palo_scan_range == null) {
        sb.append("null");
      } else {
        sb.append(this.palo_scan_range);
      }
      first = false;
    }
    if (isSetKudu_scan_token()) {
      if (!first) sb.append(", ");
      sb.append("kudu_scan_token:");
      if (this.kudu_scan_token == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.kudu_scan_token, sb);
      }
      first = false;
    }
    if (isSetBroker_scan_range()) {
      if (!first) sb.append(", ");
      sb.append("broker_scan_range:");
      if (this.broker_scan_range == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_scan_range);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (palo_scan_range != null) {
      palo_scan_range.validate();
    }
    if (broker_scan_range != null) {
      broker_scan_range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TScanRangeStandardSchemeFactory implements SchemeFactory {
    public TScanRangeStandardScheme getScheme() {
      return new TScanRangeStandardScheme();
    }
  }

  private static class TScanRangeStandardScheme extends StandardScheme<TScanRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // PALO_SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.palo_scan_range = new TPaloScanRange();
              struct.palo_scan_range.read(iprot);
              struct.setPalo_scan_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KUDU_SCAN_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_scan_token = iprot.readBinary();
              struct.setKudu_scan_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BROKER_SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.broker_scan_range = new TBrokerScanRange();
              struct.broker_scan_range.read(iprot);
              struct.setBroker_scan_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TScanRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.palo_scan_range != null) {
        if (struct.isSetPalo_scan_range()) {
          oprot.writeFieldBegin(PALO_SCAN_RANGE_FIELD_DESC);
          struct.palo_scan_range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kudu_scan_token != null) {
        if (struct.isSetKudu_scan_token()) {
          oprot.writeFieldBegin(KUDU_SCAN_TOKEN_FIELD_DESC);
          oprot.writeBinary(struct.kudu_scan_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.broker_scan_range != null) {
        if (struct.isSetBroker_scan_range()) {
          oprot.writeFieldBegin(BROKER_SCAN_RANGE_FIELD_DESC);
          struct.broker_scan_range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TScanRangeTupleSchemeFactory implements SchemeFactory {
    public TScanRangeTupleScheme getScheme() {
      return new TScanRangeTupleScheme();
    }
  }

  private static class TScanRangeTupleScheme extends TupleScheme<TScanRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TScanRange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPalo_scan_range()) {
        optionals.set(0);
      }
      if (struct.isSetKudu_scan_token()) {
        optionals.set(1);
      }
      if (struct.isSetBroker_scan_range()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPalo_scan_range()) {
        struct.palo_scan_range.write(oprot);
      }
      if (struct.isSetKudu_scan_token()) {
        oprot.writeBinary(struct.kudu_scan_token);
      }
      if (struct.isSetBroker_scan_range()) {
        struct.broker_scan_range.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TScanRange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.palo_scan_range = new TPaloScanRange();
        struct.palo_scan_range.read(iprot);
        struct.setPalo_scan_rangeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kudu_scan_token = iprot.readBinary();
        struct.setKudu_scan_tokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.broker_scan_range = new TBrokerScanRange();
        struct.broker_scan_range.read(iprot);
        struct.setBroker_scan_rangeIsSet(true);
      }
    }
  }

}

