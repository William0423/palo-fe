/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TShowHintsRequest implements org.apache.thrift.TBase<TShowHintsRequest, TShowHintsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TShowHintsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowHintsRequest");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BLOCK_ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("block_row_count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField END_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_range", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShowHintsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShowHintsRequestTupleSchemeFactory());
  }

  public long tablet_id; // required
  public int schema_hash; // required
  public int block_row_count; // required
  public String end_range; // optional
  public List<TFetchStartKey> start_key; // required
  public List<TFetchEndKey> end_key; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    BLOCK_ROW_COUNT((short)3, "block_row_count"),
    END_RANGE((short)4, "end_range"),
    START_KEY((short)5, "start_key"),
    END_KEY((short)6, "end_key");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // BLOCK_ROW_COUNT
          return BLOCK_ROW_COUNT;
        case 4: // END_RANGE
          return END_RANGE;
        case 5: // START_KEY
          return START_KEY;
        case 6: // END_KEY
          return END_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __BLOCK_ROW_COUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.END_RANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCK_ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("block_row_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_RANGE, new org.apache.thrift.meta_data.FieldMetaData("end_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchStartKey.class))));
    tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFetchEndKey.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowHintsRequest.class, metaDataMap);
  }

  public TShowHintsRequest() {
    this.end_range = "lt";

  }

  public TShowHintsRequest(
    long tablet_id,
    int schema_hash,
    int block_row_count,
    List<TFetchStartKey> start_key,
    List<TFetchEndKey> end_key)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.block_row_count = block_row_count;
    setBlock_row_countIsSet(true);
    this.start_key = start_key;
    this.end_key = end_key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowHintsRequest(TShowHintsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.block_row_count = other.block_row_count;
    if (other.isSetEnd_range()) {
      this.end_range = other.end_range;
    }
    if (other.isSetStart_key()) {
      List<TFetchStartKey> __this__start_key = new ArrayList<TFetchStartKey>(other.start_key.size());
      for (TFetchStartKey other_element : other.start_key) {
        __this__start_key.add(new TFetchStartKey(other_element));
      }
      this.start_key = __this__start_key;
    }
    if (other.isSetEnd_key()) {
      List<TFetchEndKey> __this__end_key = new ArrayList<TFetchEndKey>(other.end_key.size());
      for (TFetchEndKey other_element : other.end_key) {
        __this__end_key.add(new TFetchEndKey(other_element));
      }
      this.end_key = __this__end_key;
    }
  }

  public TShowHintsRequest deepCopy() {
    return new TShowHintsRequest(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setBlock_row_countIsSet(false);
    this.block_row_count = 0;
    this.end_range = "lt";

    this.start_key = null;
    this.end_key = null;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TShowHintsRequest setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TShowHintsRequest setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public int getBlock_row_count() {
    return this.block_row_count;
  }

  public TShowHintsRequest setBlock_row_count(int block_row_count) {
    this.block_row_count = block_row_count;
    setBlock_row_countIsSet(true);
    return this;
  }

  public void unsetBlock_row_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field block_row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_row_count() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCK_ROW_COUNT_ISSET_ID);
  }

  public void setBlock_row_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCK_ROW_COUNT_ISSET_ID, value);
  }

  public String getEnd_range() {
    return this.end_range;
  }

  public TShowHintsRequest setEnd_range(String end_range) {
    this.end_range = end_range;
    return this;
  }

  public void unsetEnd_range() {
    this.end_range = null;
  }

  /** Returns true if field end_range is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_range() {
    return this.end_range != null;
  }

  public void setEnd_rangeIsSet(boolean value) {
    if (!value) {
      this.end_range = null;
    }
  }

  public int getStart_keySize() {
    return (this.start_key == null) ? 0 : this.start_key.size();
  }

  public java.util.Iterator<TFetchStartKey> getStart_keyIterator() {
    return (this.start_key == null) ? null : this.start_key.iterator();
  }

  public void addToStart_key(TFetchStartKey elem) {
    if (this.start_key == null) {
      this.start_key = new ArrayList<TFetchStartKey>();
    }
    this.start_key.add(elem);
  }

  public List<TFetchStartKey> getStart_key() {
    return this.start_key;
  }

  public TShowHintsRequest setStart_key(List<TFetchStartKey> start_key) {
    this.start_key = start_key;
    return this;
  }

  public void unsetStart_key() {
    this.start_key = null;
  }

  /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_key() {
    return this.start_key != null;
  }

  public void setStart_keyIsSet(boolean value) {
    if (!value) {
      this.start_key = null;
    }
  }

  public int getEnd_keySize() {
    return (this.end_key == null) ? 0 : this.end_key.size();
  }

  public java.util.Iterator<TFetchEndKey> getEnd_keyIterator() {
    return (this.end_key == null) ? null : this.end_key.iterator();
  }

  public void addToEnd_key(TFetchEndKey elem) {
    if (this.end_key == null) {
      this.end_key = new ArrayList<TFetchEndKey>();
    }
    this.end_key.add(elem);
  }

  public List<TFetchEndKey> getEnd_key() {
    return this.end_key;
  }

  public TShowHintsRequest setEnd_key(List<TFetchEndKey> end_key) {
    this.end_key = end_key;
    return this;
  }

  public void unsetEnd_key() {
    this.end_key = null;
  }

  /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_key() {
    return this.end_key != null;
  }

  public void setEnd_keyIsSet(boolean value) {
    if (!value) {
      this.end_key = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((Integer)value);
      }
      break;

    case BLOCK_ROW_COUNT:
      if (value == null) {
        unsetBlock_row_count();
      } else {
        setBlock_row_count((Integer)value);
      }
      break;

    case END_RANGE:
      if (value == null) {
        unsetEnd_range();
      } else {
        setEnd_range((String)value);
      }
      break;

    case START_KEY:
      if (value == null) {
        unsetStart_key();
      } else {
        setStart_key((List<TFetchStartKey>)value);
      }
      break;

    case END_KEY:
      if (value == null) {
        unsetEnd_key();
      } else {
        setEnd_key((List<TFetchEndKey>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case BLOCK_ROW_COUNT:
      return getBlock_row_count();

    case END_RANGE:
      return getEnd_range();

    case START_KEY:
      return getStart_key();

    case END_KEY:
      return getEnd_key();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case BLOCK_ROW_COUNT:
      return isSetBlock_row_count();
    case END_RANGE:
      return isSetEnd_range();
    case START_KEY:
      return isSetStart_key();
    case END_KEY:
      return isSetEnd_key();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShowHintsRequest)
      return this.equals((TShowHintsRequest)that);
    return false;
  }

  public boolean equals(TShowHintsRequest that) {
    if (that == null)
      return false;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_block_row_count = true;
    boolean that_present_block_row_count = true;
    if (this_present_block_row_count || that_present_block_row_count) {
      if (!(this_present_block_row_count && that_present_block_row_count))
        return false;
      if (this.block_row_count != that.block_row_count)
        return false;
    }

    boolean this_present_end_range = true && this.isSetEnd_range();
    boolean that_present_end_range = true && that.isSetEnd_range();
    if (this_present_end_range || that_present_end_range) {
      if (!(this_present_end_range && that_present_end_range))
        return false;
      if (!this.end_range.equals(that.end_range))
        return false;
    }

    boolean this_present_start_key = true && this.isSetStart_key();
    boolean that_present_start_key = true && that.isSetStart_key();
    if (this_present_start_key || that_present_start_key) {
      if (!(this_present_start_key && that_present_start_key))
        return false;
      if (!this.start_key.equals(that.start_key))
        return false;
    }

    boolean this_present_end_key = true && this.isSetEnd_key();
    boolean that_present_end_key = true && that.isSetEnd_key();
    if (this_present_end_key || that_present_end_key) {
      if (!(this_present_end_key && that_present_end_key))
        return false;
      if (!this.end_key.equals(that.end_key))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tablet_id = true;
    list.add(present_tablet_id);
    if (present_tablet_id)
      list.add(tablet_id);

    boolean present_schema_hash = true;
    list.add(present_schema_hash);
    if (present_schema_hash)
      list.add(schema_hash);

    boolean present_block_row_count = true;
    list.add(present_block_row_count);
    if (present_block_row_count)
      list.add(block_row_count);

    boolean present_end_range = true && (isSetEnd_range());
    list.add(present_end_range);
    if (present_end_range)
      list.add(end_range);

    boolean present_start_key = true && (isSetStart_key());
    list.add(present_start_key);
    if (present_start_key)
      list.add(start_key);

    boolean present_end_key = true && (isSetEnd_key());
    list.add(present_end_key);
    if (present_end_key)
      list.add(end_key);

    return list.hashCode();
  }

  @Override
  public int compareTo(TShowHintsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTablet_id()).compareTo(other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_hash()).compareTo(other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_row_count()).compareTo(other.isSetBlock_row_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_row_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_row_count, other.block_row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_range()).compareTo(other.isSetEnd_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_range, other.end_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(other.isSetEnd_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShowHintsRequest(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("block_row_count:");
    sb.append(this.block_row_count);
    first = false;
    if (isSetEnd_range()) {
      if (!first) sb.append(", ");
      sb.append("end_range:");
      if (this.end_range == null) {
        sb.append("null");
      } else {
        sb.append(this.end_range);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("start_key:");
    if (this.start_key == null) {
      sb.append("null");
    } else {
      sb.append(this.start_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_key:");
    if (this.end_key == null) {
      sb.append("null");
    } else {
      sb.append(this.end_key);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'block_row_count' because it's a primitive and you chose the non-beans generator.
    if (start_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
    }
    if (end_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_key' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowHintsRequestStandardSchemeFactory implements SchemeFactory {
    public TShowHintsRequestStandardScheme getScheme() {
      return new TShowHintsRequestStandardScheme();
    }
  }

  private static class TShowHintsRequestStandardScheme extends StandardScheme<TShowHintsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowHintsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOCK_ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.block_row_count = iprot.readI32();
              struct.setBlock_row_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_range = iprot.readString();
              struct.setEnd_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.start_key = new ArrayList<TFetchStartKey>(_list92.size);
                TFetchStartKey _elem93;
                for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                {
                  _elem93 = new TFetchStartKey();
                  _elem93.read(iprot);
                  struct.start_key.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setStart_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                struct.end_key = new ArrayList<TFetchEndKey>(_list95.size);
                TFetchEndKey _elem96;
                for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                {
                  _elem96 = new TFetchEndKey();
                  _elem96.read(iprot);
                  struct.end_key.add(_elem96);
                }
                iprot.readListEnd();
              }
              struct.setEnd_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBlock_row_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'block_row_count' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowHintsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_ROW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.block_row_count);
      oprot.writeFieldEnd();
      if (struct.end_range != null) {
        if (struct.isSetEnd_range()) {
          oprot.writeFieldBegin(END_RANGE_FIELD_DESC);
          oprot.writeString(struct.end_range);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_key != null) {
        oprot.writeFieldBegin(START_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.start_key.size()));
          for (TFetchStartKey _iter98 : struct.start_key)
          {
            _iter98.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.end_key != null) {
        oprot.writeFieldBegin(END_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.end_key.size()));
          for (TFetchEndKey _iter99 : struct.end_key)
          {
            _iter99.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowHintsRequestTupleSchemeFactory implements SchemeFactory {
    public TShowHintsRequestTupleScheme getScheme() {
      return new TShowHintsRequestTupleScheme();
    }
  }

  private static class TShowHintsRequestTupleScheme extends TupleScheme<TShowHintsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowHintsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI32(struct.block_row_count);
      {
        oprot.writeI32(struct.start_key.size());
        for (TFetchStartKey _iter100 : struct.start_key)
        {
          _iter100.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.end_key.size());
        for (TFetchEndKey _iter101 : struct.end_key)
        {
          _iter101.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetEnd_range()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEnd_range()) {
        oprot.writeString(struct.end_range);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowHintsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.block_row_count = iprot.readI32();
      struct.setBlock_row_countIsSet(true);
      {
        org.apache.thrift.protocol.TList _list102 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.start_key = new ArrayList<TFetchStartKey>(_list102.size);
        TFetchStartKey _elem103;
        for (int _i104 = 0; _i104 < _list102.size; ++_i104)
        {
          _elem103 = new TFetchStartKey();
          _elem103.read(iprot);
          struct.start_key.add(_elem103);
        }
      }
      struct.setStart_keyIsSet(true);
      {
        org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.end_key = new ArrayList<TFetchEndKey>(_list105.size);
        TFetchEndKey _elem106;
        for (int _i107 = 0; _i107 < _list105.size; ++_i107)
        {
          _elem106 = new TFetchEndKey();
          _elem106.read(iprot);
          struct.end_key.add(_elem106);
        }
      }
      struct.setEnd_keyIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.end_range = iprot.readString();
        struct.setEnd_rangeIsSet(true);
      }
    }
  }

}

