/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TCreateFunctionParams implements org.apache.thrift.TBase<TCreateFunctionParams, TCreateFunctionParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateFunctionParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateFunctionParams");

  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("function_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARGUMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("argument_type", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RETURN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("return_type", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SO_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("so_file_path", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateFunctionParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateFunctionParamsTupleSchemeFactory());
  }

  public String db_name; // required
  public String function_name; // required
  public List<com.baidu.palo.thrift.TColumnType> argument_type; // required
  public com.baidu.palo.thrift.TColumnType return_type; // required
  public String so_file_path; // required
  public Map<String,String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_NAME((short)1, "db_name"),
    FUNCTION_NAME((short)2, "function_name"),
    ARGUMENT_TYPE((short)3, "argument_type"),
    RETURN_TYPE((short)4, "return_type"),
    SO_FILE_PATH((short)5, "so_file_path"),
    PROPERTIES((short)6, "properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_NAME
          return DB_NAME;
        case 2: // FUNCTION_NAME
          return FUNCTION_NAME;
        case 3: // ARGUMENT_TYPE
          return ARGUMENT_TYPE;
        case 4: // RETURN_TYPE
          return RETURN_TYPE;
        case 5: // SO_FILE_PATH
          return SO_FILE_PATH;
        case 6: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("function_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGUMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("argument_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TColumnType.class))));
    tmpMap.put(_Fields.RETURN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("return_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TColumnType.class)));
    tmpMap.put(_Fields.SO_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("so_file_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateFunctionParams.class, metaDataMap);
  }

  public TCreateFunctionParams() {
  }

  public TCreateFunctionParams(
    String db_name,
    String function_name,
    List<com.baidu.palo.thrift.TColumnType> argument_type,
    com.baidu.palo.thrift.TColumnType return_type,
    String so_file_path)
  {
    this();
    this.db_name = db_name;
    this.function_name = function_name;
    this.argument_type = argument_type;
    this.return_type = return_type;
    this.so_file_path = so_file_path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateFunctionParams(TCreateFunctionParams other) {
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetFunction_name()) {
      this.function_name = other.function_name;
    }
    if (other.isSetArgument_type()) {
      List<com.baidu.palo.thrift.TColumnType> __this__argument_type = new ArrayList<com.baidu.palo.thrift.TColumnType>(other.argument_type.size());
      for (com.baidu.palo.thrift.TColumnType other_element : other.argument_type) {
        __this__argument_type.add(new com.baidu.palo.thrift.TColumnType(other_element));
      }
      this.argument_type = __this__argument_type;
    }
    if (other.isSetReturn_type()) {
      this.return_type = new com.baidu.palo.thrift.TColumnType(other.return_type);
    }
    if (other.isSetSo_file_path()) {
      this.so_file_path = other.so_file_path;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
  }

  public TCreateFunctionParams deepCopy() {
    return new TCreateFunctionParams(this);
  }

  @Override
  public void clear() {
    this.db_name = null;
    this.function_name = null;
    this.argument_type = null;
    this.return_type = null;
    this.so_file_path = null;
    this.properties = null;
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TCreateFunctionParams setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public String getFunction_name() {
    return this.function_name;
  }

  public TCreateFunctionParams setFunction_name(String function_name) {
    this.function_name = function_name;
    return this;
  }

  public void unsetFunction_name() {
    this.function_name = null;
  }

  /** Returns true if field function_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFunction_name() {
    return this.function_name != null;
  }

  public void setFunction_nameIsSet(boolean value) {
    if (!value) {
      this.function_name = null;
    }
  }

  public int getArgument_typeSize() {
    return (this.argument_type == null) ? 0 : this.argument_type.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TColumnType> getArgument_typeIterator() {
    return (this.argument_type == null) ? null : this.argument_type.iterator();
  }

  public void addToArgument_type(com.baidu.palo.thrift.TColumnType elem) {
    if (this.argument_type == null) {
      this.argument_type = new ArrayList<com.baidu.palo.thrift.TColumnType>();
    }
    this.argument_type.add(elem);
  }

  public List<com.baidu.palo.thrift.TColumnType> getArgument_type() {
    return this.argument_type;
  }

  public TCreateFunctionParams setArgument_type(List<com.baidu.palo.thrift.TColumnType> argument_type) {
    this.argument_type = argument_type;
    return this;
  }

  public void unsetArgument_type() {
    this.argument_type = null;
  }

  /** Returns true if field argument_type is set (has been assigned a value) and false otherwise */
  public boolean isSetArgument_type() {
    return this.argument_type != null;
  }

  public void setArgument_typeIsSet(boolean value) {
    if (!value) {
      this.argument_type = null;
    }
  }

  public com.baidu.palo.thrift.TColumnType getReturn_type() {
    return this.return_type;
  }

  public TCreateFunctionParams setReturn_type(com.baidu.palo.thrift.TColumnType return_type) {
    this.return_type = return_type;
    return this;
  }

  public void unsetReturn_type() {
    this.return_type = null;
  }

  /** Returns true if field return_type is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_type() {
    return this.return_type != null;
  }

  public void setReturn_typeIsSet(boolean value) {
    if (!value) {
      this.return_type = null;
    }
  }

  public String getSo_file_path() {
    return this.so_file_path;
  }

  public TCreateFunctionParams setSo_file_path(String so_file_path) {
    this.so_file_path = so_file_path;
    return this;
  }

  public void unsetSo_file_path() {
    this.so_file_path = null;
  }

  /** Returns true if field so_file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetSo_file_path() {
    return this.so_file_path != null;
  }

  public void setSo_file_pathIsSet(boolean value) {
    if (!value) {
      this.so_file_path = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public TCreateFunctionParams setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case FUNCTION_NAME:
      if (value == null) {
        unsetFunction_name();
      } else {
        setFunction_name((String)value);
      }
      break;

    case ARGUMENT_TYPE:
      if (value == null) {
        unsetArgument_type();
      } else {
        setArgument_type((List<com.baidu.palo.thrift.TColumnType>)value);
      }
      break;

    case RETURN_TYPE:
      if (value == null) {
        unsetReturn_type();
      } else {
        setReturn_type((com.baidu.palo.thrift.TColumnType)value);
      }
      break;

    case SO_FILE_PATH:
      if (value == null) {
        unsetSo_file_path();
      } else {
        setSo_file_path((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_NAME:
      return getDb_name();

    case FUNCTION_NAME:
      return getFunction_name();

    case ARGUMENT_TYPE:
      return getArgument_type();

    case RETURN_TYPE:
      return getReturn_type();

    case SO_FILE_PATH:
      return getSo_file_path();

    case PROPERTIES:
      return getProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DB_NAME:
      return isSetDb_name();
    case FUNCTION_NAME:
      return isSetFunction_name();
    case ARGUMENT_TYPE:
      return isSetArgument_type();
    case RETURN_TYPE:
      return isSetReturn_type();
    case SO_FILE_PATH:
      return isSetSo_file_path();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateFunctionParams)
      return this.equals((TCreateFunctionParams)that);
    return false;
  }

  public boolean equals(TCreateFunctionParams that) {
    if (that == null)
      return false;

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_function_name = true && this.isSetFunction_name();
    boolean that_present_function_name = true && that.isSetFunction_name();
    if (this_present_function_name || that_present_function_name) {
      if (!(this_present_function_name && that_present_function_name))
        return false;
      if (!this.function_name.equals(that.function_name))
        return false;
    }

    boolean this_present_argument_type = true && this.isSetArgument_type();
    boolean that_present_argument_type = true && that.isSetArgument_type();
    if (this_present_argument_type || that_present_argument_type) {
      if (!(this_present_argument_type && that_present_argument_type))
        return false;
      if (!this.argument_type.equals(that.argument_type))
        return false;
    }

    boolean this_present_return_type = true && this.isSetReturn_type();
    boolean that_present_return_type = true && that.isSetReturn_type();
    if (this_present_return_type || that_present_return_type) {
      if (!(this_present_return_type && that_present_return_type))
        return false;
      if (!this.return_type.equals(that.return_type))
        return false;
    }

    boolean this_present_so_file_path = true && this.isSetSo_file_path();
    boolean that_present_so_file_path = true && that.isSetSo_file_path();
    if (this_present_so_file_path || that_present_so_file_path) {
      if (!(this_present_so_file_path && that_present_so_file_path))
        return false;
      if (!this.so_file_path.equals(that.so_file_path))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_db_name = true && (isSetDb_name());
    list.add(present_db_name);
    if (present_db_name)
      list.add(db_name);

    boolean present_function_name = true && (isSetFunction_name());
    list.add(present_function_name);
    if (present_function_name)
      list.add(function_name);

    boolean present_argument_type = true && (isSetArgument_type());
    list.add(present_argument_type);
    if (present_argument_type)
      list.add(argument_type);

    boolean present_return_type = true && (isSetReturn_type());
    list.add(present_return_type);
    if (present_return_type)
      list.add(return_type);

    boolean present_so_file_path = true && (isSetSo_file_path());
    list.add(present_so_file_path);
    if (present_so_file_path)
      list.add(so_file_path);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCreateFunctionParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunction_name()).compareTo(other.isSetFunction_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunction_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_name, other.function_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgument_type()).compareTo(other.isSetArgument_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgument_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argument_type, other.argument_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturn_type()).compareTo(other.isSetReturn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_type, other.return_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSo_file_path()).compareTo(other.isSetSo_file_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSo_file_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.so_file_path, other.so_file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateFunctionParams(");
    boolean first = true;

    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("function_name:");
    if (this.function_name == null) {
      sb.append("null");
    } else {
      sb.append(this.function_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argument_type:");
    if (this.argument_type == null) {
      sb.append("null");
    } else {
      sb.append(this.argument_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("return_type:");
    if (this.return_type == null) {
      sb.append("null");
    } else {
      sb.append(this.return_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("so_file_path:");
    if (this.so_file_path == null) {
      sb.append("null");
    } else {
      sb.append(this.so_file_path);
    }
    first = false;
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    if (function_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'function_name' was not present! Struct: " + toString());
    }
    if (argument_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argument_type' was not present! Struct: " + toString());
    }
    if (return_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'return_type' was not present! Struct: " + toString());
    }
    if (so_file_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'so_file_path' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (return_type != null) {
      return_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateFunctionParamsStandardSchemeFactory implements SchemeFactory {
    public TCreateFunctionParamsStandardScheme getScheme() {
      return new TCreateFunctionParamsStandardScheme();
    }
  }

  private static class TCreateFunctionParamsStandardScheme extends StandardScheme<TCreateFunctionParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateFunctionParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FUNCTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.function_name = iprot.readString();
              struct.setFunction_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARGUMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.argument_type = new ArrayList<com.baidu.palo.thrift.TColumnType>(_list50.size);
                com.baidu.palo.thrift.TColumnType _elem51;
                for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                {
                  _elem51 = new com.baidu.palo.thrift.TColumnType();
                  _elem51.read(iprot);
                  struct.argument_type.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setArgument_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETURN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.return_type = new com.baidu.palo.thrift.TColumnType();
              struct.return_type.read(iprot);
              struct.setReturn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SO_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.so_file_path = iprot.readString();
              struct.setSo_file_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map53 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map53.size);
                String _key54;
                String _val55;
                for (int _i56 = 0; _i56 < _map53.size; ++_i56)
                {
                  _key54 = iprot.readString();
                  _val55 = iprot.readString();
                  struct.properties.put(_key54, _val55);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateFunctionParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.function_name != null) {
        oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
        oprot.writeString(struct.function_name);
        oprot.writeFieldEnd();
      }
      if (struct.argument_type != null) {
        oprot.writeFieldBegin(ARGUMENT_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.argument_type.size()));
          for (com.baidu.palo.thrift.TColumnType _iter57 : struct.argument_type)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.return_type != null) {
        oprot.writeFieldBegin(RETURN_TYPE_FIELD_DESC);
        struct.return_type.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.so_file_path != null) {
        oprot.writeFieldBegin(SO_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.so_file_path);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter58 : struct.properties.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateFunctionParamsTupleSchemeFactory implements SchemeFactory {
    public TCreateFunctionParamsTupleScheme getScheme() {
      return new TCreateFunctionParamsTupleScheme();
    }
  }

  private static class TCreateFunctionParamsTupleScheme extends TupleScheme<TCreateFunctionParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateFunctionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.db_name);
      oprot.writeString(struct.function_name);
      {
        oprot.writeI32(struct.argument_type.size());
        for (com.baidu.palo.thrift.TColumnType _iter59 : struct.argument_type)
        {
          _iter59.write(oprot);
        }
      }
      struct.return_type.write(oprot);
      oprot.writeString(struct.so_file_path);
      BitSet optionals = new BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter60 : struct.properties.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            oprot.writeString(_iter60.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateFunctionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      struct.function_name = iprot.readString();
      struct.setFunction_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.argument_type = new ArrayList<com.baidu.palo.thrift.TColumnType>(_list61.size);
        com.baidu.palo.thrift.TColumnType _elem62;
        for (int _i63 = 0; _i63 < _list61.size; ++_i63)
        {
          _elem62 = new com.baidu.palo.thrift.TColumnType();
          _elem62.read(iprot);
          struct.argument_type.add(_elem62);
        }
      }
      struct.setArgument_typeIsSet(true);
      struct.return_type = new com.baidu.palo.thrift.TColumnType();
      struct.return_type.read(iprot);
      struct.setReturn_typeIsSet(true);
      struct.so_file_path = iprot.readString();
      struct.setSo_file_pathIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map64.size);
          String _key65;
          String _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readString();
            _val66 = iprot.readString();
            struct.properties.put(_key65, _val66);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

}

