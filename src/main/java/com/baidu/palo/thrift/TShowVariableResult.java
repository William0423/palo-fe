/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class TShowVariableResult implements org.apache.thrift.TBase<TShowVariableResult, TShowVariableResult._Fields>, java.io.Serializable, Cloneable, Comparable<TShowVariableResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowVariableResult");

  private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShowVariableResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShowVariableResultTupleSchemeFactory());
  }

  public Map<String,String> variables; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VARIABLES((short)1, "variables");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VARIABLES
          return VARIABLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowVariableResult.class, metaDataMap);
  }

  public TShowVariableResult() {
  }

  public TShowVariableResult(
    Map<String,String> variables)
  {
    this();
    this.variables = variables;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowVariableResult(TShowVariableResult other) {
    if (other.isSetVariables()) {
      Map<String,String> __this__variables = new HashMap<String,String>(other.variables);
      this.variables = __this__variables;
    }
  }

  public TShowVariableResult deepCopy() {
    return new TShowVariableResult(this);
  }

  @Override
  public void clear() {
    this.variables = null;
  }

  public int getVariablesSize() {
    return (this.variables == null) ? 0 : this.variables.size();
  }

  public void putToVariables(String key, String val) {
    if (this.variables == null) {
      this.variables = new HashMap<String,String>();
    }
    this.variables.put(key, val);
  }

  public Map<String,String> getVariables() {
    return this.variables;
  }

  public TShowVariableResult setVariables(Map<String,String> variables) {
    this.variables = variables;
    return this;
  }

  public void unsetVariables() {
    this.variables = null;
  }

  /** Returns true if field variables is set (has been assigned a value) and false otherwise */
  public boolean isSetVariables() {
    return this.variables != null;
  }

  public void setVariablesIsSet(boolean value) {
    if (!value) {
      this.variables = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VARIABLES:
      if (value == null) {
        unsetVariables();
      } else {
        setVariables((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VARIABLES:
      return getVariables();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VARIABLES:
      return isSetVariables();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShowVariableResult)
      return this.equals((TShowVariableResult)that);
    return false;
  }

  public boolean equals(TShowVariableResult that) {
    if (that == null)
      return false;

    boolean this_present_variables = true && this.isSetVariables();
    boolean that_present_variables = true && that.isSetVariables();
    if (this_present_variables || that_present_variables) {
      if (!(this_present_variables && that_present_variables))
        return false;
      if (!this.variables.equals(that.variables))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_variables = true && (isSetVariables());
    list.add(present_variables);
    if (present_variables)
      list.add(variables);

    return list.hashCode();
  }

  @Override
  public int compareTo(TShowVariableResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShowVariableResult(");
    boolean first = true;

    sb.append("variables:");
    if (this.variables == null) {
      sb.append("null");
    } else {
      sb.append(this.variables);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (variables == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'variables' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowVariableResultStandardSchemeFactory implements SchemeFactory {
    public TShowVariableResultStandardScheme getScheme() {
      return new TShowVariableResultStandardScheme();
    }
  }

  private static class TShowVariableResultStandardScheme extends StandardScheme<TShowVariableResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowVariableResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.variables = new HashMap<String,String>(2*_map8.size);
                String _key9;
                String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.variables.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowVariableResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.variables != null) {
        oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
          for (Map.Entry<String, String> _iter12 : struct.variables.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowVariableResultTupleSchemeFactory implements SchemeFactory {
    public TShowVariableResultTupleScheme getScheme() {
      return new TShowVariableResultTupleScheme();
    }
  }

  private static class TShowVariableResultTupleScheme extends TupleScheme<TShowVariableResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowVariableResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.variables.size());
        for (Map.Entry<String, String> _iter13 : struct.variables.entrySet())
        {
          oprot.writeString(_iter13.getKey());
          oprot.writeString(_iter13.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowVariableResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.variables = new HashMap<String,String>(2*_map14.size);
        String _key15;
        String _val16;
        for (int _i17 = 0; _i17 < _map14.size; ++_i17)
        {
          _key15 = iprot.readString();
          _val16 = iprot.readString();
          struct.variables.put(_key15, _val16);
        }
      }
      struct.setVariablesIsSet(true);
    }
  }

}

