/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TPreAggregationNode implements org.apache.thrift.TBase<TPreAggregationNode, TPreAggregationNode._Fields>, java.io.Serializable, Cloneable, Comparable<TPreAggregationNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPreAggregationNode");

  private static final org.apache.thrift.protocol.TField GROUP_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("group_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_exprs", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPreAggregationNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPreAggregationNodeTupleSchemeFactory());
  }

  public List<com.baidu.palo.thrift.TExpr> group_exprs; // required
  public List<com.baidu.palo.thrift.TExpr> aggregate_exprs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_EXPRS((short)1, "group_exprs"),
    AGGREGATE_EXPRS((short)2, "aggregate_exprs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_EXPRS
          return GROUP_EXPRS;
        case 2: // AGGREGATE_EXPRS
          return AGGREGATE_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("group_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    tmpMap.put(_Fields.AGGREGATE_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("aggregate_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPreAggregationNode.class, metaDataMap);
  }

  public TPreAggregationNode() {
  }

  public TPreAggregationNode(
    List<com.baidu.palo.thrift.TExpr> group_exprs,
    List<com.baidu.palo.thrift.TExpr> aggregate_exprs)
  {
    this();
    this.group_exprs = group_exprs;
    this.aggregate_exprs = aggregate_exprs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPreAggregationNode(TPreAggregationNode other) {
    if (other.isSetGroup_exprs()) {
      List<com.baidu.palo.thrift.TExpr> __this__group_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(other.group_exprs.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.group_exprs) {
        __this__group_exprs.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.group_exprs = __this__group_exprs;
    }
    if (other.isSetAggregate_exprs()) {
      List<com.baidu.palo.thrift.TExpr> __this__aggregate_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(other.aggregate_exprs.size());
      for (com.baidu.palo.thrift.TExpr other_element : other.aggregate_exprs) {
        __this__aggregate_exprs.add(new com.baidu.palo.thrift.TExpr(other_element));
      }
      this.aggregate_exprs = __this__aggregate_exprs;
    }
  }

  public TPreAggregationNode deepCopy() {
    return new TPreAggregationNode(this);
  }

  @Override
  public void clear() {
    this.group_exprs = null;
    this.aggregate_exprs = null;
  }

  public int getGroup_exprsSize() {
    return (this.group_exprs == null) ? 0 : this.group_exprs.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getGroup_exprsIterator() {
    return (this.group_exprs == null) ? null : this.group_exprs.iterator();
  }

  public void addToGroup_exprs(com.baidu.palo.thrift.TExpr elem) {
    if (this.group_exprs == null) {
      this.group_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.group_exprs.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getGroup_exprs() {
    return this.group_exprs;
  }

  public TPreAggregationNode setGroup_exprs(List<com.baidu.palo.thrift.TExpr> group_exprs) {
    this.group_exprs = group_exprs;
    return this;
  }

  public void unsetGroup_exprs() {
    this.group_exprs = null;
  }

  /** Returns true if field group_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_exprs() {
    return this.group_exprs != null;
  }

  public void setGroup_exprsIsSet(boolean value) {
    if (!value) {
      this.group_exprs = null;
    }
  }

  public int getAggregate_exprsSize() {
    return (this.aggregate_exprs == null) ? 0 : this.aggregate_exprs.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TExpr> getAggregate_exprsIterator() {
    return (this.aggregate_exprs == null) ? null : this.aggregate_exprs.iterator();
  }

  public void addToAggregate_exprs(com.baidu.palo.thrift.TExpr elem) {
    if (this.aggregate_exprs == null) {
      this.aggregate_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>();
    }
    this.aggregate_exprs.add(elem);
  }

  public List<com.baidu.palo.thrift.TExpr> getAggregate_exprs() {
    return this.aggregate_exprs;
  }

  public TPreAggregationNode setAggregate_exprs(List<com.baidu.palo.thrift.TExpr> aggregate_exprs) {
    this.aggregate_exprs = aggregate_exprs;
    return this;
  }

  public void unsetAggregate_exprs() {
    this.aggregate_exprs = null;
  }

  /** Returns true if field aggregate_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_exprs() {
    return this.aggregate_exprs != null;
  }

  public void setAggregate_exprsIsSet(boolean value) {
    if (!value) {
      this.aggregate_exprs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_EXPRS:
      if (value == null) {
        unsetGroup_exprs();
      } else {
        setGroup_exprs((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    case AGGREGATE_EXPRS:
      if (value == null) {
        unsetAggregate_exprs();
      } else {
        setAggregate_exprs((List<com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_EXPRS:
      return getGroup_exprs();

    case AGGREGATE_EXPRS:
      return getAggregate_exprs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_EXPRS:
      return isSetGroup_exprs();
    case AGGREGATE_EXPRS:
      return isSetAggregate_exprs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPreAggregationNode)
      return this.equals((TPreAggregationNode)that);
    return false;
  }

  public boolean equals(TPreAggregationNode that) {
    if (that == null)
      return false;

    boolean this_present_group_exprs = true && this.isSetGroup_exprs();
    boolean that_present_group_exprs = true && that.isSetGroup_exprs();
    if (this_present_group_exprs || that_present_group_exprs) {
      if (!(this_present_group_exprs && that_present_group_exprs))
        return false;
      if (!this.group_exprs.equals(that.group_exprs))
        return false;
    }

    boolean this_present_aggregate_exprs = true && this.isSetAggregate_exprs();
    boolean that_present_aggregate_exprs = true && that.isSetAggregate_exprs();
    if (this_present_aggregate_exprs || that_present_aggregate_exprs) {
      if (!(this_present_aggregate_exprs && that_present_aggregate_exprs))
        return false;
      if (!this.aggregate_exprs.equals(that.aggregate_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_group_exprs = true && (isSetGroup_exprs());
    list.add(present_group_exprs);
    if (present_group_exprs)
      list.add(group_exprs);

    boolean present_aggregate_exprs = true && (isSetAggregate_exprs());
    list.add(present_aggregate_exprs);
    if (present_aggregate_exprs)
      list.add(aggregate_exprs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPreAggregationNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroup_exprs()).compareTo(other.isSetGroup_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_exprs, other.group_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregate_exprs()).compareTo(other.isSetAggregate_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_exprs, other.aggregate_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPreAggregationNode(");
    boolean first = true;

    sb.append("group_exprs:");
    if (this.group_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.group_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregate_exprs:");
    if (this.aggregate_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate_exprs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (group_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'group_exprs' was not present! Struct: " + toString());
    }
    if (aggregate_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregate_exprs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPreAggregationNodeStandardSchemeFactory implements SchemeFactory {
    public TPreAggregationNodeStandardScheme getScheme() {
      return new TPreAggregationNodeStandardScheme();
    }
  }

  private static class TPreAggregationNodeStandardScheme extends StandardScheme<TPreAggregationNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPreAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.group_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list216.size);
                com.baidu.palo.thrift.TExpr _elem217;
                for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                {
                  _elem217 = new com.baidu.palo.thrift.TExpr();
                  _elem217.read(iprot);
                  struct.group_exprs.add(_elem217);
                }
                iprot.readListEnd();
              }
              struct.setGroup_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list219 = iprot.readListBegin();
                struct.aggregate_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list219.size);
                com.baidu.palo.thrift.TExpr _elem220;
                for (int _i221 = 0; _i221 < _list219.size; ++_i221)
                {
                  _elem220 = new com.baidu.palo.thrift.TExpr();
                  _elem220.read(iprot);
                  struct.aggregate_exprs.add(_elem220);
                }
                iprot.readListEnd();
              }
              struct.setAggregate_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPreAggregationNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.group_exprs != null) {
        oprot.writeFieldBegin(GROUP_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.group_exprs.size()));
          for (com.baidu.palo.thrift.TExpr _iter222 : struct.group_exprs)
          {
            _iter222.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aggregate_exprs != null) {
        oprot.writeFieldBegin(AGGREGATE_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregate_exprs.size()));
          for (com.baidu.palo.thrift.TExpr _iter223 : struct.aggregate_exprs)
          {
            _iter223.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPreAggregationNodeTupleSchemeFactory implements SchemeFactory {
    public TPreAggregationNodeTupleScheme getScheme() {
      return new TPreAggregationNodeTupleScheme();
    }
  }

  private static class TPreAggregationNodeTupleScheme extends TupleScheme<TPreAggregationNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPreAggregationNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.group_exprs.size());
        for (com.baidu.palo.thrift.TExpr _iter224 : struct.group_exprs)
        {
          _iter224.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.aggregate_exprs.size());
        for (com.baidu.palo.thrift.TExpr _iter225 : struct.aggregate_exprs)
        {
          _iter225.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPreAggregationNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list226 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.group_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list226.size);
        com.baidu.palo.thrift.TExpr _elem227;
        for (int _i228 = 0; _i228 < _list226.size; ++_i228)
        {
          _elem227 = new com.baidu.palo.thrift.TExpr();
          _elem227.read(iprot);
          struct.group_exprs.add(_elem227);
        }
      }
      struct.setGroup_exprsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.aggregate_exprs = new ArrayList<com.baidu.palo.thrift.TExpr>(_list229.size);
        com.baidu.palo.thrift.TExpr _elem230;
        for (int _i231 = 0; _i231 < _list229.size; ++_i231)
        {
          _elem230 = new com.baidu.palo.thrift.TExpr();
          _elem230.read(iprot);
          struct.aggregate_exprs.add(_elem230);
        }
      }
      struct.setAggregate_exprsIsSet(true);
    }
  }

}

