/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TBrokerScanRange implements org.apache.thrift.TBase<TBrokerScanRange, TBrokerScanRange._Fields>, java.io.Serializable, Cloneable, Comparable<TBrokerScanRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBrokerScanRange");

  private static final org.apache.thrift.protocol.TField RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("ranges", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_addresses", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBrokerScanRangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBrokerScanRangeTupleSchemeFactory());
  }

  public List<TBrokerRangeDesc> ranges; // required
  public TBrokerScanRangeParams params; // required
  public List<com.baidu.palo.thrift.TNetworkAddress> broker_addresses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RANGES((short)1, "ranges"),
    PARAMS((short)2, "params"),
    BROKER_ADDRESSES((short)3, "broker_addresses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANGES
          return RANGES;
        case 2: // PARAMS
          return PARAMS;
        case 3: // BROKER_ADDRESSES
          return BROKER_ADDRESSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANGES, new org.apache.thrift.meta_data.FieldMetaData("ranges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBrokerRangeDesc.class))));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBrokerScanRangeParams.class)));
    tmpMap.put(_Fields.BROKER_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("broker_addresses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TNetworkAddress.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBrokerScanRange.class, metaDataMap);
  }

  public TBrokerScanRange() {
  }

  public TBrokerScanRange(
    List<TBrokerRangeDesc> ranges,
    TBrokerScanRangeParams params,
    List<com.baidu.palo.thrift.TNetworkAddress> broker_addresses)
  {
    this();
    this.ranges = ranges;
    this.params = params;
    this.broker_addresses = broker_addresses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBrokerScanRange(TBrokerScanRange other) {
    if (other.isSetRanges()) {
      List<TBrokerRangeDesc> __this__ranges = new ArrayList<TBrokerRangeDesc>(other.ranges.size());
      for (TBrokerRangeDesc other_element : other.ranges) {
        __this__ranges.add(new TBrokerRangeDesc(other_element));
      }
      this.ranges = __this__ranges;
    }
    if (other.isSetParams()) {
      this.params = new TBrokerScanRangeParams(other.params);
    }
    if (other.isSetBroker_addresses()) {
      List<com.baidu.palo.thrift.TNetworkAddress> __this__broker_addresses = new ArrayList<com.baidu.palo.thrift.TNetworkAddress>(other.broker_addresses.size());
      for (com.baidu.palo.thrift.TNetworkAddress other_element : other.broker_addresses) {
        __this__broker_addresses.add(new com.baidu.palo.thrift.TNetworkAddress(other_element));
      }
      this.broker_addresses = __this__broker_addresses;
    }
  }

  public TBrokerScanRange deepCopy() {
    return new TBrokerScanRange(this);
  }

  @Override
  public void clear() {
    this.ranges = null;
    this.params = null;
    this.broker_addresses = null;
  }

  public int getRangesSize() {
    return (this.ranges == null) ? 0 : this.ranges.size();
  }

  public java.util.Iterator<TBrokerRangeDesc> getRangesIterator() {
    return (this.ranges == null) ? null : this.ranges.iterator();
  }

  public void addToRanges(TBrokerRangeDesc elem) {
    if (this.ranges == null) {
      this.ranges = new ArrayList<TBrokerRangeDesc>();
    }
    this.ranges.add(elem);
  }

  public List<TBrokerRangeDesc> getRanges() {
    return this.ranges;
  }

  public TBrokerScanRange setRanges(List<TBrokerRangeDesc> ranges) {
    this.ranges = ranges;
    return this;
  }

  public void unsetRanges() {
    this.ranges = null;
  }

  /** Returns true if field ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetRanges() {
    return this.ranges != null;
  }

  public void setRangesIsSet(boolean value) {
    if (!value) {
      this.ranges = null;
    }
  }

  public TBrokerScanRangeParams getParams() {
    return this.params;
  }

  public TBrokerScanRange setParams(TBrokerScanRangeParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public int getBroker_addressesSize() {
    return (this.broker_addresses == null) ? 0 : this.broker_addresses.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TNetworkAddress> getBroker_addressesIterator() {
    return (this.broker_addresses == null) ? null : this.broker_addresses.iterator();
  }

  public void addToBroker_addresses(com.baidu.palo.thrift.TNetworkAddress elem) {
    if (this.broker_addresses == null) {
      this.broker_addresses = new ArrayList<com.baidu.palo.thrift.TNetworkAddress>();
    }
    this.broker_addresses.add(elem);
  }

  public List<com.baidu.palo.thrift.TNetworkAddress> getBroker_addresses() {
    return this.broker_addresses;
  }

  public TBrokerScanRange setBroker_addresses(List<com.baidu.palo.thrift.TNetworkAddress> broker_addresses) {
    this.broker_addresses = broker_addresses;
    return this;
  }

  public void unsetBroker_addresses() {
    this.broker_addresses = null;
  }

  /** Returns true if field broker_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetBroker_addresses() {
    return this.broker_addresses != null;
  }

  public void setBroker_addressesIsSet(boolean value) {
    if (!value) {
      this.broker_addresses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RANGES:
      if (value == null) {
        unsetRanges();
      } else {
        setRanges((List<TBrokerRangeDesc>)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TBrokerScanRangeParams)value);
      }
      break;

    case BROKER_ADDRESSES:
      if (value == null) {
        unsetBroker_addresses();
      } else {
        setBroker_addresses((List<com.baidu.palo.thrift.TNetworkAddress>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RANGES:
      return getRanges();

    case PARAMS:
      return getParams();

    case BROKER_ADDRESSES:
      return getBroker_addresses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RANGES:
      return isSetRanges();
    case PARAMS:
      return isSetParams();
    case BROKER_ADDRESSES:
      return isSetBroker_addresses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBrokerScanRange)
      return this.equals((TBrokerScanRange)that);
    return false;
  }

  public boolean equals(TBrokerScanRange that) {
    if (that == null)
      return false;

    boolean this_present_ranges = true && this.isSetRanges();
    boolean that_present_ranges = true && that.isSetRanges();
    if (this_present_ranges || that_present_ranges) {
      if (!(this_present_ranges && that_present_ranges))
        return false;
      if (!this.ranges.equals(that.ranges))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_broker_addresses = true && this.isSetBroker_addresses();
    boolean that_present_broker_addresses = true && that.isSetBroker_addresses();
    if (this_present_broker_addresses || that_present_broker_addresses) {
      if (!(this_present_broker_addresses && that_present_broker_addresses))
        return false;
      if (!this.broker_addresses.equals(that.broker_addresses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ranges = true && (isSetRanges());
    list.add(present_ranges);
    if (present_ranges)
      list.add(ranges);

    boolean present_params = true && (isSetParams());
    list.add(present_params);
    if (present_params)
      list.add(params);

    boolean present_broker_addresses = true && (isSetBroker_addresses());
    list.add(present_broker_addresses);
    if (present_broker_addresses)
      list.add(broker_addresses);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBrokerScanRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRanges()).compareTo(other.isSetRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranges, other.ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBroker_addresses()).compareTo(other.isSetBroker_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroker_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_addresses, other.broker_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBrokerScanRange(");
    boolean first = true;

    sb.append("ranges:");
    if (this.ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("broker_addresses:");
    if (this.broker_addresses == null) {
      sb.append("null");
    } else {
      sb.append(this.broker_addresses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ranges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ranges' was not present! Struct: " + toString());
    }
    if (params == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'params' was not present! Struct: " + toString());
    }
    if (broker_addresses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'broker_addresses' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (params != null) {
      params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBrokerScanRangeStandardSchemeFactory implements SchemeFactory {
    public TBrokerScanRangeStandardScheme getScheme() {
      return new TBrokerScanRangeStandardScheme();
    }
  }

  private static class TBrokerScanRangeStandardScheme extends StandardScheme<TBrokerScanRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBrokerScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.ranges = new ArrayList<TBrokerRangeDesc>(_list52.size);
                TBrokerRangeDesc _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new TBrokerRangeDesc();
                  _elem53.read(iprot);
                  struct.ranges.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TBrokerScanRangeParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.broker_addresses = new ArrayList<com.baidu.palo.thrift.TNetworkAddress>(_list55.size);
                com.baidu.palo.thrift.TNetworkAddress _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new com.baidu.palo.thrift.TNetworkAddress();
                  _elem56.read(iprot);
                  struct.broker_addresses.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setBroker_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBrokerScanRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ranges != null) {
        oprot.writeFieldBegin(RANGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ranges.size()));
          for (TBrokerRangeDesc _iter58 : struct.ranges)
          {
            _iter58.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        struct.params.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.broker_addresses != null) {
        oprot.writeFieldBegin(BROKER_ADDRESSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broker_addresses.size()));
          for (com.baidu.palo.thrift.TNetworkAddress _iter59 : struct.broker_addresses)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBrokerScanRangeTupleSchemeFactory implements SchemeFactory {
    public TBrokerScanRangeTupleScheme getScheme() {
      return new TBrokerScanRangeTupleScheme();
    }
  }

  private static class TBrokerScanRangeTupleScheme extends TupleScheme<TBrokerScanRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.ranges.size());
        for (TBrokerRangeDesc _iter60 : struct.ranges)
        {
          _iter60.write(oprot);
        }
      }
      struct.params.write(oprot);
      {
        oprot.writeI32(struct.broker_addresses.size());
        for (com.baidu.palo.thrift.TNetworkAddress _iter61 : struct.broker_addresses)
        {
          _iter61.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.ranges = new ArrayList<TBrokerRangeDesc>(_list62.size);
        TBrokerRangeDesc _elem63;
        for (int _i64 = 0; _i64 < _list62.size; ++_i64)
        {
          _elem63 = new TBrokerRangeDesc();
          _elem63.read(iprot);
          struct.ranges.add(_elem63);
        }
      }
      struct.setRangesIsSet(true);
      struct.params = new TBrokerScanRangeParams();
      struct.params.read(iprot);
      struct.setParamsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.broker_addresses = new ArrayList<com.baidu.palo.thrift.TNetworkAddress>(_list65.size);
        com.baidu.palo.thrift.TNetworkAddress _elem66;
        for (int _i67 = 0; _i67 < _list65.size; ++_i67)
        {
          _elem66 = new com.baidu.palo.thrift.TNetworkAddress();
          _elem66.read(iprot);
          struct.broker_addresses.add(_elem66);
        }
      }
      struct.setBroker_addressesIsSet(true);
    }
  }

}

