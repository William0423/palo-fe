/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TDataSink implements org.apache.thrift.TBase<TDataSink, TDataSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDataSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataSink");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STREAM_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_sink", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("result_sink", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SPLIT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("split_sink", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MYSQL_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("mysql_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField EXPORT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("export_sink", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDataSinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDataSinkTupleSchemeFactory());
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSinkType type; // required
  public TDataStreamSink stream_sink; // optional
  public TResultSink result_sink; // optional
  public TDataSplitSink split_sink; // optional
  public TMysqlTableSink mysql_table_sink; // optional
  public TExportSink export_sink; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDataSinkType
     */
    TYPE((short)1, "type"),
    STREAM_SINK((short)2, "stream_sink"),
    RESULT_SINK((short)3, "result_sink"),
    SPLIT_SINK((short)4, "split_sink"),
    MYSQL_TABLE_SINK((short)5, "mysql_table_sink"),
    EXPORT_SINK((short)6, "export_sink");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // STREAM_SINK
          return STREAM_SINK;
        case 3: // RESULT_SINK
          return RESULT_SINK;
        case 4: // SPLIT_SINK
          return SPLIT_SINK;
        case 5: // MYSQL_TABLE_SINK
          return MYSQL_TABLE_SINK;
        case 6: // EXPORT_SINK
          return EXPORT_SINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREAM_SINK,_Fields.RESULT_SINK,_Fields.SPLIT_SINK,_Fields.MYSQL_TABLE_SINK,_Fields.EXPORT_SINK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataSinkType.class)));
    tmpMap.put(_Fields.STREAM_SINK, new org.apache.thrift.meta_data.FieldMetaData("stream_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataStreamSink.class)));
    tmpMap.put(_Fields.RESULT_SINK, new org.apache.thrift.meta_data.FieldMetaData("result_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSink.class)));
    tmpMap.put(_Fields.SPLIT_SINK, new org.apache.thrift.meta_data.FieldMetaData("split_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataSplitSink.class)));
    tmpMap.put(_Fields.MYSQL_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("mysql_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMysqlTableSink.class)));
    tmpMap.put(_Fields.EXPORT_SINK, new org.apache.thrift.meta_data.FieldMetaData("export_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExportSink.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataSink.class, metaDataMap);
  }

  public TDataSink() {
  }

  public TDataSink(
    TDataSinkType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataSink(TDataSink other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStream_sink()) {
      this.stream_sink = new TDataStreamSink(other.stream_sink);
    }
    if (other.isSetResult_sink()) {
      this.result_sink = new TResultSink(other.result_sink);
    }
    if (other.isSetSplit_sink()) {
      this.split_sink = new TDataSplitSink(other.split_sink);
    }
    if (other.isSetMysql_table_sink()) {
      this.mysql_table_sink = new TMysqlTableSink(other.mysql_table_sink);
    }
    if (other.isSetExport_sink()) {
      this.export_sink = new TExportSink(other.export_sink);
    }
  }

  public TDataSink deepCopy() {
    return new TDataSink(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.stream_sink = null;
    this.result_sink = null;
    this.split_sink = null;
    this.mysql_table_sink = null;
    this.export_sink = null;
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSinkType getType() {
    return this.type;
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSink setType(TDataSinkType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public TDataStreamSink getStream_sink() {
    return this.stream_sink;
  }

  public TDataSink setStream_sink(TDataStreamSink stream_sink) {
    this.stream_sink = stream_sink;
    return this;
  }

  public void unsetStream_sink() {
    this.stream_sink = null;
  }

  /** Returns true if field stream_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_sink() {
    return this.stream_sink != null;
  }

  public void setStream_sinkIsSet(boolean value) {
    if (!value) {
      this.stream_sink = null;
    }
  }

  public TResultSink getResult_sink() {
    return this.result_sink;
  }

  public TDataSink setResult_sink(TResultSink result_sink) {
    this.result_sink = result_sink;
    return this;
  }

  public void unsetResult_sink() {
    this.result_sink = null;
  }

  /** Returns true if field result_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_sink() {
    return this.result_sink != null;
  }

  public void setResult_sinkIsSet(boolean value) {
    if (!value) {
      this.result_sink = null;
    }
  }

  public TDataSplitSink getSplit_sink() {
    return this.split_sink;
  }

  public TDataSink setSplit_sink(TDataSplitSink split_sink) {
    this.split_sink = split_sink;
    return this;
  }

  public void unsetSplit_sink() {
    this.split_sink = null;
  }

  /** Returns true if field split_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_sink() {
    return this.split_sink != null;
  }

  public void setSplit_sinkIsSet(boolean value) {
    if (!value) {
      this.split_sink = null;
    }
  }

  public TMysqlTableSink getMysql_table_sink() {
    return this.mysql_table_sink;
  }

  public TDataSink setMysql_table_sink(TMysqlTableSink mysql_table_sink) {
    this.mysql_table_sink = mysql_table_sink;
    return this;
  }

  public void unsetMysql_table_sink() {
    this.mysql_table_sink = null;
  }

  /** Returns true if field mysql_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetMysql_table_sink() {
    return this.mysql_table_sink != null;
  }

  public void setMysql_table_sinkIsSet(boolean value) {
    if (!value) {
      this.mysql_table_sink = null;
    }
  }

  public TExportSink getExport_sink() {
    return this.export_sink;
  }

  public TDataSink setExport_sink(TExportSink export_sink) {
    this.export_sink = export_sink;
    return this;
  }

  public void unsetExport_sink() {
    this.export_sink = null;
  }

  /** Returns true if field export_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetExport_sink() {
    return this.export_sink != null;
  }

  public void setExport_sinkIsSet(boolean value) {
    if (!value) {
      this.export_sink = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TDataSinkType)value);
      }
      break;

    case STREAM_SINK:
      if (value == null) {
        unsetStream_sink();
      } else {
        setStream_sink((TDataStreamSink)value);
      }
      break;

    case RESULT_SINK:
      if (value == null) {
        unsetResult_sink();
      } else {
        setResult_sink((TResultSink)value);
      }
      break;

    case SPLIT_SINK:
      if (value == null) {
        unsetSplit_sink();
      } else {
        setSplit_sink((TDataSplitSink)value);
      }
      break;

    case MYSQL_TABLE_SINK:
      if (value == null) {
        unsetMysql_table_sink();
      } else {
        setMysql_table_sink((TMysqlTableSink)value);
      }
      break;

    case EXPORT_SINK:
      if (value == null) {
        unsetExport_sink();
      } else {
        setExport_sink((TExportSink)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case STREAM_SINK:
      return getStream_sink();

    case RESULT_SINK:
      return getResult_sink();

    case SPLIT_SINK:
      return getSplit_sink();

    case MYSQL_TABLE_SINK:
      return getMysql_table_sink();

    case EXPORT_SINK:
      return getExport_sink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case STREAM_SINK:
      return isSetStream_sink();
    case RESULT_SINK:
      return isSetResult_sink();
    case SPLIT_SINK:
      return isSetSplit_sink();
    case MYSQL_TABLE_SINK:
      return isSetMysql_table_sink();
    case EXPORT_SINK:
      return isSetExport_sink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDataSink)
      return this.equals((TDataSink)that);
    return false;
  }

  public boolean equals(TDataSink that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_stream_sink = true && this.isSetStream_sink();
    boolean that_present_stream_sink = true && that.isSetStream_sink();
    if (this_present_stream_sink || that_present_stream_sink) {
      if (!(this_present_stream_sink && that_present_stream_sink))
        return false;
      if (!this.stream_sink.equals(that.stream_sink))
        return false;
    }

    boolean this_present_result_sink = true && this.isSetResult_sink();
    boolean that_present_result_sink = true && that.isSetResult_sink();
    if (this_present_result_sink || that_present_result_sink) {
      if (!(this_present_result_sink && that_present_result_sink))
        return false;
      if (!this.result_sink.equals(that.result_sink))
        return false;
    }

    boolean this_present_split_sink = true && this.isSetSplit_sink();
    boolean that_present_split_sink = true && that.isSetSplit_sink();
    if (this_present_split_sink || that_present_split_sink) {
      if (!(this_present_split_sink && that_present_split_sink))
        return false;
      if (!this.split_sink.equals(that.split_sink))
        return false;
    }

    boolean this_present_mysql_table_sink = true && this.isSetMysql_table_sink();
    boolean that_present_mysql_table_sink = true && that.isSetMysql_table_sink();
    if (this_present_mysql_table_sink || that_present_mysql_table_sink) {
      if (!(this_present_mysql_table_sink && that_present_mysql_table_sink))
        return false;
      if (!this.mysql_table_sink.equals(that.mysql_table_sink))
        return false;
    }

    boolean this_present_export_sink = true && this.isSetExport_sink();
    boolean that_present_export_sink = true && that.isSetExport_sink();
    if (this_present_export_sink || that_present_export_sink) {
      if (!(this_present_export_sink && that_present_export_sink))
        return false;
      if (!this.export_sink.equals(that.export_sink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_stream_sink = true && (isSetStream_sink());
    list.add(present_stream_sink);
    if (present_stream_sink)
      list.add(stream_sink);

    boolean present_result_sink = true && (isSetResult_sink());
    list.add(present_result_sink);
    if (present_result_sink)
      list.add(result_sink);

    boolean present_split_sink = true && (isSetSplit_sink());
    list.add(present_split_sink);
    if (present_split_sink)
      list.add(split_sink);

    boolean present_mysql_table_sink = true && (isSetMysql_table_sink());
    list.add(present_mysql_table_sink);
    if (present_mysql_table_sink)
      list.add(mysql_table_sink);

    boolean present_export_sink = true && (isSetExport_sink());
    list.add(present_export_sink);
    if (present_export_sink)
      list.add(export_sink);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDataSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStream_sink()).compareTo(other.isSetStream_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_sink, other.stream_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_sink()).compareTo(other.isSetResult_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_sink, other.result_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplit_sink()).compareTo(other.isSetSplit_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_sink, other.split_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMysql_table_sink()).compareTo(other.isSetMysql_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysql_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysql_table_sink, other.mysql_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExport_sink()).compareTo(other.isSetExport_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExport_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_sink, other.export_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDataSink(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetStream_sink()) {
      if (!first) sb.append(", ");
      sb.append("stream_sink:");
      if (this.stream_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_sink);
      }
      first = false;
    }
    if (isSetResult_sink()) {
      if (!first) sb.append(", ");
      sb.append("result_sink:");
      if (this.result_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.result_sink);
      }
      first = false;
    }
    if (isSetSplit_sink()) {
      if (!first) sb.append(", ");
      sb.append("split_sink:");
      if (this.split_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.split_sink);
      }
      first = false;
    }
    if (isSetMysql_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("mysql_table_sink:");
      if (this.mysql_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.mysql_table_sink);
      }
      first = false;
    }
    if (isSetExport_sink()) {
      if (!first) sb.append(", ");
      sb.append("export_sink:");
      if (this.export_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.export_sink);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (stream_sink != null) {
      stream_sink.validate();
    }
    if (result_sink != null) {
      result_sink.validate();
    }
    if (split_sink != null) {
      split_sink.validate();
    }
    if (mysql_table_sink != null) {
      mysql_table_sink.validate();
    }
    if (export_sink != null) {
      export_sink.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataSinkStandardSchemeFactory implements SchemeFactory {
    public TDataSinkStandardScheme getScheme() {
      return new TDataSinkStandardScheme();
    }
  }

  private static class TDataSinkStandardScheme extends StandardScheme<TDataSink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.baidu.palo.thrift.TDataSinkType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREAM_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_sink = new TDataStreamSink();
              struct.stream_sink.read(iprot);
              struct.setStream_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_sink = new TResultSink();
              struct.result_sink.read(iprot);
              struct.setResult_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPLIT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.split_sink = new TDataSplitSink();
              struct.split_sink.read(iprot);
              struct.setSplit_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MYSQL_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mysql_table_sink = new TMysqlTableSink();
              struct.mysql_table_sink.read(iprot);
              struct.setMysql_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPORT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.export_sink = new TExportSink();
              struct.export_sink.read(iprot);
              struct.setExport_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stream_sink != null) {
        if (struct.isSetStream_sink()) {
          oprot.writeFieldBegin(STREAM_SINK_FIELD_DESC);
          struct.stream_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_sink != null) {
        if (struct.isSetResult_sink()) {
          oprot.writeFieldBegin(RESULT_SINK_FIELD_DESC);
          struct.result_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.split_sink != null) {
        if (struct.isSetSplit_sink()) {
          oprot.writeFieldBegin(SPLIT_SINK_FIELD_DESC);
          struct.split_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mysql_table_sink != null) {
        if (struct.isSetMysql_table_sink()) {
          oprot.writeFieldBegin(MYSQL_TABLE_SINK_FIELD_DESC);
          struct.mysql_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.export_sink != null) {
        if (struct.isSetExport_sink()) {
          oprot.writeFieldBegin(EXPORT_SINK_FIELD_DESC);
          struct.export_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataSinkTupleSchemeFactory implements SchemeFactory {
    public TDataSinkTupleScheme getScheme() {
      return new TDataSinkTupleScheme();
    }
  }

  private static class TDataSinkTupleScheme extends TupleScheme<TDataSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStream_sink()) {
        optionals.set(0);
      }
      if (struct.isSetResult_sink()) {
        optionals.set(1);
      }
      if (struct.isSetSplit_sink()) {
        optionals.set(2);
      }
      if (struct.isSetMysql_table_sink()) {
        optionals.set(3);
      }
      if (struct.isSetExport_sink()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStream_sink()) {
        struct.stream_sink.write(oprot);
      }
      if (struct.isSetResult_sink()) {
        struct.result_sink.write(oprot);
      }
      if (struct.isSetSplit_sink()) {
        struct.split_sink.write(oprot);
      }
      if (struct.isSetMysql_table_sink()) {
        struct.mysql_table_sink.write(oprot);
      }
      if (struct.isSetExport_sink()) {
        struct.export_sink.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.baidu.palo.thrift.TDataSinkType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.stream_sink = new TDataStreamSink();
        struct.stream_sink.read(iprot);
        struct.setStream_sinkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result_sink = new TResultSink();
        struct.result_sink.read(iprot);
        struct.setResult_sinkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.split_sink = new TDataSplitSink();
        struct.split_sink.read(iprot);
        struct.setSplit_sinkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mysql_table_sink = new TMysqlTableSink();
        struct.mysql_table_sink.read(iprot);
        struct.setMysql_table_sinkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.export_sink = new TExportSink();
        struct.export_sink.read(iprot);
        struct.setExport_sinkIsSet(true);
      }
    }
  }

}

