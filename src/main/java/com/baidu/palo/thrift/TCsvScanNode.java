/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TCsvScanNode implements org.apache.thrift.TBase<TCsvScanNode, TCsvScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TCsvScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCsvScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_paths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINE_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delimiter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("column_type_mapping", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField UNSPECIFIED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("unspecified_columns", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("default_values", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_FILTER_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("max_filter_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField COLUMN_FUNCTION_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("column_function_mapping", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCsvScanNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCsvScanNodeTupleSchemeFactory());
  }

  public int tuple_id; // required
  public List<String> file_paths; // required
  public String column_separator; // optional
  public String line_delimiter; // optional
  public Map<String,com.baidu.palo.thrift.TColumnType> column_type_mapping; // optional
  public List<String> columns; // optional
  public List<String> unspecified_columns; // optional
  public List<String> default_values; // optional
  public double max_filter_ratio; // optional
  public Map<String,TMiniLoadEtlFunction> column_function_mapping; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    FILE_PATHS((short)2, "file_paths"),
    COLUMN_SEPARATOR((short)3, "column_separator"),
    LINE_DELIMITER((short)4, "line_delimiter"),
    COLUMN_TYPE_MAPPING((short)5, "column_type_mapping"),
    COLUMNS((short)6, "columns"),
    UNSPECIFIED_COLUMNS((short)7, "unspecified_columns"),
    DEFAULT_VALUES((short)8, "default_values"),
    MAX_FILTER_RATIO((short)9, "max_filter_ratio"),
    COLUMN_FUNCTION_MAPPING((short)10, "column_function_mapping");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // FILE_PATHS
          return FILE_PATHS;
        case 3: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 4: // LINE_DELIMITER
          return LINE_DELIMITER;
        case 5: // COLUMN_TYPE_MAPPING
          return COLUMN_TYPE_MAPPING;
        case 6: // COLUMNS
          return COLUMNS;
        case 7: // UNSPECIFIED_COLUMNS
          return UNSPECIFIED_COLUMNS;
        case 8: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        case 9: // MAX_FILTER_RATIO
          return MAX_FILTER_RATIO;
        case 10: // COLUMN_FUNCTION_MAPPING
          return COLUMN_FUNCTION_MAPPING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __MAX_FILTER_RATIO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_SEPARATOR,_Fields.LINE_DELIMITER,_Fields.COLUMN_TYPE_MAPPING,_Fields.COLUMNS,_Fields.UNSPECIFIED_COLUMNS,_Fields.DEFAULT_VALUES,_Fields.MAX_FILTER_RATIO,_Fields.COLUMN_FUNCTION_MAPPING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.FILE_PATHS, new org.apache.thrift.meta_data.FieldMetaData("file_paths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("line_delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("column_type_mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TColumnType.class))));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNSPECIFIED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("unspecified_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("default_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAX_FILTER_RATIO, new org.apache.thrift.meta_data.FieldMetaData("max_filter_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLUMN_FUNCTION_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("column_function_mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiniLoadEtlFunction.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCsvScanNode.class, metaDataMap);
  }

  public TCsvScanNode() {
  }

  public TCsvScanNode(
    int tuple_id,
    List<String> file_paths)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.file_paths = file_paths;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCsvScanNode(TCsvScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetFile_paths()) {
      List<String> __this__file_paths = new ArrayList<String>(other.file_paths);
      this.file_paths = __this__file_paths;
    }
    if (other.isSetColumn_separator()) {
      this.column_separator = other.column_separator;
    }
    if (other.isSetLine_delimiter()) {
      this.line_delimiter = other.line_delimiter;
    }
    if (other.isSetColumn_type_mapping()) {
      Map<String,com.baidu.palo.thrift.TColumnType> __this__column_type_mapping = new HashMap<String,com.baidu.palo.thrift.TColumnType>(other.column_type_mapping.size());
      for (Map.Entry<String, com.baidu.palo.thrift.TColumnType> other_element : other.column_type_mapping.entrySet()) {

        String other_element_key = other_element.getKey();
        com.baidu.palo.thrift.TColumnType other_element_value = other_element.getValue();

        String __this__column_type_mapping_copy_key = other_element_key;

        com.baidu.palo.thrift.TColumnType __this__column_type_mapping_copy_value = new com.baidu.palo.thrift.TColumnType(other_element_value);

        __this__column_type_mapping.put(__this__column_type_mapping_copy_key, __this__column_type_mapping_copy_value);
      }
      this.column_type_mapping = __this__column_type_mapping;
    }
    if (other.isSetColumns()) {
      List<String> __this__columns = new ArrayList<String>(other.columns);
      this.columns = __this__columns;
    }
    if (other.isSetUnspecified_columns()) {
      List<String> __this__unspecified_columns = new ArrayList<String>(other.unspecified_columns);
      this.unspecified_columns = __this__unspecified_columns;
    }
    if (other.isSetDefault_values()) {
      List<String> __this__default_values = new ArrayList<String>(other.default_values);
      this.default_values = __this__default_values;
    }
    this.max_filter_ratio = other.max_filter_ratio;
    if (other.isSetColumn_function_mapping()) {
      Map<String,TMiniLoadEtlFunction> __this__column_function_mapping = new HashMap<String,TMiniLoadEtlFunction>(other.column_function_mapping.size());
      for (Map.Entry<String, TMiniLoadEtlFunction> other_element : other.column_function_mapping.entrySet()) {

        String other_element_key = other_element.getKey();
        TMiniLoadEtlFunction other_element_value = other_element.getValue();

        String __this__column_function_mapping_copy_key = other_element_key;

        TMiniLoadEtlFunction __this__column_function_mapping_copy_value = new TMiniLoadEtlFunction(other_element_value);

        __this__column_function_mapping.put(__this__column_function_mapping_copy_key, __this__column_function_mapping_copy_value);
      }
      this.column_function_mapping = __this__column_function_mapping;
    }
  }

  public TCsvScanNode deepCopy() {
    return new TCsvScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.file_paths = null;
    this.column_separator = null;
    this.line_delimiter = null;
    this.column_type_mapping = null;
    this.columns = null;
    this.unspecified_columns = null;
    this.default_values = null;
    setMax_filter_ratioIsSet(false);
    this.max_filter_ratio = 0.0;
    this.column_function_mapping = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TCsvScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getFile_pathsSize() {
    return (this.file_paths == null) ? 0 : this.file_paths.size();
  }

  public java.util.Iterator<String> getFile_pathsIterator() {
    return (this.file_paths == null) ? null : this.file_paths.iterator();
  }

  public void addToFile_paths(String elem) {
    if (this.file_paths == null) {
      this.file_paths = new ArrayList<String>();
    }
    this.file_paths.add(elem);
  }

  public List<String> getFile_paths() {
    return this.file_paths;
  }

  public TCsvScanNode setFile_paths(List<String> file_paths) {
    this.file_paths = file_paths;
    return this;
  }

  public void unsetFile_paths() {
    this.file_paths = null;
  }

  /** Returns true if field file_paths is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_paths() {
    return this.file_paths != null;
  }

  public void setFile_pathsIsSet(boolean value) {
    if (!value) {
      this.file_paths = null;
    }
  }

  public String getColumn_separator() {
    return this.column_separator;
  }

  public TCsvScanNode setColumn_separator(String column_separator) {
    this.column_separator = column_separator;
    return this;
  }

  public void unsetColumn_separator() {
    this.column_separator = null;
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_separator() {
    return this.column_separator != null;
  }

  public void setColumn_separatorIsSet(boolean value) {
    if (!value) {
      this.column_separator = null;
    }
  }

  public String getLine_delimiter() {
    return this.line_delimiter;
  }

  public TCsvScanNode setLine_delimiter(String line_delimiter) {
    this.line_delimiter = line_delimiter;
    return this;
  }

  public void unsetLine_delimiter() {
    this.line_delimiter = null;
  }

  /** Returns true if field line_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_delimiter() {
    return this.line_delimiter != null;
  }

  public void setLine_delimiterIsSet(boolean value) {
    if (!value) {
      this.line_delimiter = null;
    }
  }

  public int getColumn_type_mappingSize() {
    return (this.column_type_mapping == null) ? 0 : this.column_type_mapping.size();
  }

  public void putToColumn_type_mapping(String key, com.baidu.palo.thrift.TColumnType val) {
    if (this.column_type_mapping == null) {
      this.column_type_mapping = new HashMap<String,com.baidu.palo.thrift.TColumnType>();
    }
    this.column_type_mapping.put(key, val);
  }

  public Map<String,com.baidu.palo.thrift.TColumnType> getColumn_type_mapping() {
    return this.column_type_mapping;
  }

  public TCsvScanNode setColumn_type_mapping(Map<String,com.baidu.palo.thrift.TColumnType> column_type_mapping) {
    this.column_type_mapping = column_type_mapping;
    return this;
  }

  public void unsetColumn_type_mapping() {
    this.column_type_mapping = null;
  }

  /** Returns true if field column_type_mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_type_mapping() {
    return this.column_type_mapping != null;
  }

  public void setColumn_type_mappingIsSet(boolean value) {
    if (!value) {
      this.column_type_mapping = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(String elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(elem);
  }

  public List<String> getColumns() {
    return this.columns;
  }

  public TCsvScanNode setColumns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getUnspecified_columnsSize() {
    return (this.unspecified_columns == null) ? 0 : this.unspecified_columns.size();
  }

  public java.util.Iterator<String> getUnspecified_columnsIterator() {
    return (this.unspecified_columns == null) ? null : this.unspecified_columns.iterator();
  }

  public void addToUnspecified_columns(String elem) {
    if (this.unspecified_columns == null) {
      this.unspecified_columns = new ArrayList<String>();
    }
    this.unspecified_columns.add(elem);
  }

  public List<String> getUnspecified_columns() {
    return this.unspecified_columns;
  }

  public TCsvScanNode setUnspecified_columns(List<String> unspecified_columns) {
    this.unspecified_columns = unspecified_columns;
    return this;
  }

  public void unsetUnspecified_columns() {
    this.unspecified_columns = null;
  }

  /** Returns true if field unspecified_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetUnspecified_columns() {
    return this.unspecified_columns != null;
  }

  public void setUnspecified_columnsIsSet(boolean value) {
    if (!value) {
      this.unspecified_columns = null;
    }
  }

  public int getDefault_valuesSize() {
    return (this.default_values == null) ? 0 : this.default_values.size();
  }

  public java.util.Iterator<String> getDefault_valuesIterator() {
    return (this.default_values == null) ? null : this.default_values.iterator();
  }

  public void addToDefault_values(String elem) {
    if (this.default_values == null) {
      this.default_values = new ArrayList<String>();
    }
    this.default_values.add(elem);
  }

  public List<String> getDefault_values() {
    return this.default_values;
  }

  public TCsvScanNode setDefault_values(List<String> default_values) {
    this.default_values = default_values;
    return this;
  }

  public void unsetDefault_values() {
    this.default_values = null;
  }

  /** Returns true if field default_values is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_values() {
    return this.default_values != null;
  }

  public void setDefault_valuesIsSet(boolean value) {
    if (!value) {
      this.default_values = null;
    }
  }

  public double getMax_filter_ratio() {
    return this.max_filter_ratio;
  }

  public TCsvScanNode setMax_filter_ratio(double max_filter_ratio) {
    this.max_filter_ratio = max_filter_ratio;
    setMax_filter_ratioIsSet(true);
    return this;
  }

  public void unsetMax_filter_ratio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  /** Returns true if field max_filter_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_filter_ratio() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  public void setMax_filter_ratioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID, value);
  }

  public int getColumn_function_mappingSize() {
    return (this.column_function_mapping == null) ? 0 : this.column_function_mapping.size();
  }

  public void putToColumn_function_mapping(String key, TMiniLoadEtlFunction val) {
    if (this.column_function_mapping == null) {
      this.column_function_mapping = new HashMap<String,TMiniLoadEtlFunction>();
    }
    this.column_function_mapping.put(key, val);
  }

  public Map<String,TMiniLoadEtlFunction> getColumn_function_mapping() {
    return this.column_function_mapping;
  }

  public TCsvScanNode setColumn_function_mapping(Map<String,TMiniLoadEtlFunction> column_function_mapping) {
    this.column_function_mapping = column_function_mapping;
    return this;
  }

  public void unsetColumn_function_mapping() {
    this.column_function_mapping = null;
  }

  /** Returns true if field column_function_mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_function_mapping() {
    return this.column_function_mapping != null;
  }

  public void setColumn_function_mappingIsSet(boolean value) {
    if (!value) {
      this.column_function_mapping = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((Integer)value);
      }
      break;

    case FILE_PATHS:
      if (value == null) {
        unsetFile_paths();
      } else {
        setFile_paths((List<String>)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumn_separator();
      } else {
        setColumn_separator((String)value);
      }
      break;

    case LINE_DELIMITER:
      if (value == null) {
        unsetLine_delimiter();
      } else {
        setLine_delimiter((String)value);
      }
      break;

    case COLUMN_TYPE_MAPPING:
      if (value == null) {
        unsetColumn_type_mapping();
      } else {
        setColumn_type_mapping((Map<String,com.baidu.palo.thrift.TColumnType>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<String>)value);
      }
      break;

    case UNSPECIFIED_COLUMNS:
      if (value == null) {
        unsetUnspecified_columns();
      } else {
        setUnspecified_columns((List<String>)value);
      }
      break;

    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefault_values();
      } else {
        setDefault_values((List<String>)value);
      }
      break;

    case MAX_FILTER_RATIO:
      if (value == null) {
        unsetMax_filter_ratio();
      } else {
        setMax_filter_ratio((Double)value);
      }
      break;

    case COLUMN_FUNCTION_MAPPING:
      if (value == null) {
        unsetColumn_function_mapping();
      } else {
        setColumn_function_mapping((Map<String,TMiniLoadEtlFunction>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case FILE_PATHS:
      return getFile_paths();

    case COLUMN_SEPARATOR:
      return getColumn_separator();

    case LINE_DELIMITER:
      return getLine_delimiter();

    case COLUMN_TYPE_MAPPING:
      return getColumn_type_mapping();

    case COLUMNS:
      return getColumns();

    case UNSPECIFIED_COLUMNS:
      return getUnspecified_columns();

    case DEFAULT_VALUES:
      return getDefault_values();

    case MAX_FILTER_RATIO:
      return getMax_filter_ratio();

    case COLUMN_FUNCTION_MAPPING:
      return getColumn_function_mapping();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case FILE_PATHS:
      return isSetFile_paths();
    case COLUMN_SEPARATOR:
      return isSetColumn_separator();
    case LINE_DELIMITER:
      return isSetLine_delimiter();
    case COLUMN_TYPE_MAPPING:
      return isSetColumn_type_mapping();
    case COLUMNS:
      return isSetColumns();
    case UNSPECIFIED_COLUMNS:
      return isSetUnspecified_columns();
    case DEFAULT_VALUES:
      return isSetDefault_values();
    case MAX_FILTER_RATIO:
      return isSetMax_filter_ratio();
    case COLUMN_FUNCTION_MAPPING:
      return isSetColumn_function_mapping();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCsvScanNode)
      return this.equals((TCsvScanNode)that);
    return false;
  }

  public boolean equals(TCsvScanNode that) {
    if (that == null)
      return false;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_file_paths = true && this.isSetFile_paths();
    boolean that_present_file_paths = true && that.isSetFile_paths();
    if (this_present_file_paths || that_present_file_paths) {
      if (!(this_present_file_paths && that_present_file_paths))
        return false;
      if (!this.file_paths.equals(that.file_paths))
        return false;
    }

    boolean this_present_column_separator = true && this.isSetColumn_separator();
    boolean that_present_column_separator = true && that.isSetColumn_separator();
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (!this.column_separator.equals(that.column_separator))
        return false;
    }

    boolean this_present_line_delimiter = true && this.isSetLine_delimiter();
    boolean that_present_line_delimiter = true && that.isSetLine_delimiter();
    if (this_present_line_delimiter || that_present_line_delimiter) {
      if (!(this_present_line_delimiter && that_present_line_delimiter))
        return false;
      if (!this.line_delimiter.equals(that.line_delimiter))
        return false;
    }

    boolean this_present_column_type_mapping = true && this.isSetColumn_type_mapping();
    boolean that_present_column_type_mapping = true && that.isSetColumn_type_mapping();
    if (this_present_column_type_mapping || that_present_column_type_mapping) {
      if (!(this_present_column_type_mapping && that_present_column_type_mapping))
        return false;
      if (!this.column_type_mapping.equals(that.column_type_mapping))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_unspecified_columns = true && this.isSetUnspecified_columns();
    boolean that_present_unspecified_columns = true && that.isSetUnspecified_columns();
    if (this_present_unspecified_columns || that_present_unspecified_columns) {
      if (!(this_present_unspecified_columns && that_present_unspecified_columns))
        return false;
      if (!this.unspecified_columns.equals(that.unspecified_columns))
        return false;
    }

    boolean this_present_default_values = true && this.isSetDefault_values();
    boolean that_present_default_values = true && that.isSetDefault_values();
    if (this_present_default_values || that_present_default_values) {
      if (!(this_present_default_values && that_present_default_values))
        return false;
      if (!this.default_values.equals(that.default_values))
        return false;
    }

    boolean this_present_max_filter_ratio = true && this.isSetMax_filter_ratio();
    boolean that_present_max_filter_ratio = true && that.isSetMax_filter_ratio();
    if (this_present_max_filter_ratio || that_present_max_filter_ratio) {
      if (!(this_present_max_filter_ratio && that_present_max_filter_ratio))
        return false;
      if (this.max_filter_ratio != that.max_filter_ratio)
        return false;
    }

    boolean this_present_column_function_mapping = true && this.isSetColumn_function_mapping();
    boolean that_present_column_function_mapping = true && that.isSetColumn_function_mapping();
    if (this_present_column_function_mapping || that_present_column_function_mapping) {
      if (!(this_present_column_function_mapping && that_present_column_function_mapping))
        return false;
      if (!this.column_function_mapping.equals(that.column_function_mapping))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tuple_id = true;
    list.add(present_tuple_id);
    if (present_tuple_id)
      list.add(tuple_id);

    boolean present_file_paths = true && (isSetFile_paths());
    list.add(present_file_paths);
    if (present_file_paths)
      list.add(file_paths);

    boolean present_column_separator = true && (isSetColumn_separator());
    list.add(present_column_separator);
    if (present_column_separator)
      list.add(column_separator);

    boolean present_line_delimiter = true && (isSetLine_delimiter());
    list.add(present_line_delimiter);
    if (present_line_delimiter)
      list.add(line_delimiter);

    boolean present_column_type_mapping = true && (isSetColumn_type_mapping());
    list.add(present_column_type_mapping);
    if (present_column_type_mapping)
      list.add(column_type_mapping);

    boolean present_columns = true && (isSetColumns());
    list.add(present_columns);
    if (present_columns)
      list.add(columns);

    boolean present_unspecified_columns = true && (isSetUnspecified_columns());
    list.add(present_unspecified_columns);
    if (present_unspecified_columns)
      list.add(unspecified_columns);

    boolean present_default_values = true && (isSetDefault_values());
    list.add(present_default_values);
    if (present_default_values)
      list.add(default_values);

    boolean present_max_filter_ratio = true && (isSetMax_filter_ratio());
    list.add(present_max_filter_ratio);
    if (present_max_filter_ratio)
      list.add(max_filter_ratio);

    boolean present_column_function_mapping = true && (isSetColumn_function_mapping());
    list.add(present_column_function_mapping);
    if (present_column_function_mapping)
      list.add(column_function_mapping);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCsvScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTuple_id()).compareTo(other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_paths()).compareTo(other.isSetFile_paths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_paths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_paths, other.file_paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_separator()).compareTo(other.isSetColumn_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine_delimiter()).compareTo(other.isSetLine_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delimiter, other.line_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_type_mapping()).compareTo(other.isSetColumn_type_mapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_type_mapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_type_mapping, other.column_type_mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnspecified_columns()).compareTo(other.isSetUnspecified_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnspecified_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unspecified_columns, other.unspecified_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_values()).compareTo(other.isSetDefault_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_values, other.default_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_filter_ratio()).compareTo(other.isSetMax_filter_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_filter_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_filter_ratio, other.max_filter_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_function_mapping()).compareTo(other.isSetColumn_function_mapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_function_mapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_function_mapping, other.column_function_mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCsvScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_paths:");
    if (this.file_paths == null) {
      sb.append("null");
    } else {
      sb.append(this.file_paths);
    }
    first = false;
    if (isSetColumn_separator()) {
      if (!first) sb.append(", ");
      sb.append("column_separator:");
      if (this.column_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.column_separator);
      }
      first = false;
    }
    if (isSetLine_delimiter()) {
      if (!first) sb.append(", ");
      sb.append("line_delimiter:");
      if (this.line_delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.line_delimiter);
      }
      first = false;
    }
    if (isSetColumn_type_mapping()) {
      if (!first) sb.append(", ");
      sb.append("column_type_mapping:");
      if (this.column_type_mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.column_type_mapping);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetUnspecified_columns()) {
      if (!first) sb.append(", ");
      sb.append("unspecified_columns:");
      if (this.unspecified_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.unspecified_columns);
      }
      first = false;
    }
    if (isSetDefault_values()) {
      if (!first) sb.append(", ");
      sb.append("default_values:");
      if (this.default_values == null) {
        sb.append("null");
      } else {
        sb.append(this.default_values);
      }
      first = false;
    }
    if (isSetMax_filter_ratio()) {
      if (!first) sb.append(", ");
      sb.append("max_filter_ratio:");
      sb.append(this.max_filter_ratio);
      first = false;
    }
    if (isSetColumn_function_mapping()) {
      if (!first) sb.append(", ");
      sb.append("column_function_mapping:");
      if (this.column_function_mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.column_function_mapping);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (file_paths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_paths' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCsvScanNodeStandardSchemeFactory implements SchemeFactory {
    public TCsvScanNodeStandardScheme getScheme() {
      return new TCsvScanNodeStandardScheme();
    }
  }

  private static class TCsvScanNodeStandardScheme extends StandardScheme<TCsvScanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCsvScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.file_paths = new ArrayList<String>(_list100.size);
                String _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = iprot.readString();
                  struct.file_paths.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setFile_pathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_separator = iprot.readString();
              struct.setColumn_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINE_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_delimiter = iprot.readString();
              struct.setLine_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_TYPE_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map103 = iprot.readMapBegin();
                struct.column_type_mapping = new HashMap<String,com.baidu.palo.thrift.TColumnType>(2*_map103.size);
                String _key104;
                com.baidu.palo.thrift.TColumnType _val105;
                for (int _i106 = 0; _i106 < _map103.size; ++_i106)
                {
                  _key104 = iprot.readString();
                  _val105 = new com.baidu.palo.thrift.TColumnType();
                  _val105.read(iprot);
                  struct.column_type_mapping.put(_key104, _val105);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_type_mappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.columns = new ArrayList<String>(_list107.size);
                String _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = iprot.readString();
                  struct.columns.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UNSPECIFIED_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.unspecified_columns = new ArrayList<String>(_list110.size);
                String _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = iprot.readString();
                  struct.unspecified_columns.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setUnspecified_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
                struct.default_values = new ArrayList<String>(_list113.size);
                String _elem114;
                for (int _i115 = 0; _i115 < _list113.size; ++_i115)
                {
                  _elem114 = iprot.readString();
                  struct.default_values.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setDefault_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_FILTER_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_filter_ratio = iprot.readDouble();
              struct.setMax_filter_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLUMN_FUNCTION_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                struct.column_function_mapping = new HashMap<String,TMiniLoadEtlFunction>(2*_map116.size);
                String _key117;
                TMiniLoadEtlFunction _val118;
                for (int _i119 = 0; _i119 < _map116.size; ++_i119)
                {
                  _key117 = iprot.readString();
                  _val118 = new TMiniLoadEtlFunction();
                  _val118.read(iprot);
                  struct.column_function_mapping.put(_key117, _val118);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_function_mappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCsvScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.file_paths != null) {
        oprot.writeFieldBegin(FILE_PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.file_paths.size()));
          for (String _iter120 : struct.file_paths)
          {
            oprot.writeString(_iter120);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.column_separator != null) {
        if (struct.isSetColumn_separator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.column_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.line_delimiter != null) {
        if (struct.isSetLine_delimiter()) {
          oprot.writeFieldBegin(LINE_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.line_delimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_type_mapping != null) {
        if (struct.isSetColumn_type_mapping()) {
          oprot.writeFieldBegin(COLUMN_TYPE_MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_type_mapping.size()));
            for (Map.Entry<String, com.baidu.palo.thrift.TColumnType> _iter121 : struct.column_type_mapping.entrySet())
            {
              oprot.writeString(_iter121.getKey());
              _iter121.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (String _iter122 : struct.columns)
            {
              oprot.writeString(_iter122);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unspecified_columns != null) {
        if (struct.isSetUnspecified_columns()) {
          oprot.writeFieldBegin(UNSPECIFIED_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unspecified_columns.size()));
            for (String _iter123 : struct.unspecified_columns)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_values != null) {
        if (struct.isSetDefault_values()) {
          oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.default_values.size()));
            for (String _iter124 : struct.default_values)
            {
              oprot.writeString(_iter124);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_filter_ratio()) {
        oprot.writeFieldBegin(MAX_FILTER_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.max_filter_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.column_function_mapping != null) {
        if (struct.isSetColumn_function_mapping()) {
          oprot.writeFieldBegin(COLUMN_FUNCTION_MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_function_mapping.size()));
            for (Map.Entry<String, TMiniLoadEtlFunction> _iter125 : struct.column_function_mapping.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              _iter125.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCsvScanNodeTupleSchemeFactory implements SchemeFactory {
    public TCsvScanNodeTupleScheme getScheme() {
      return new TCsvScanNodeTupleScheme();
    }
  }

  private static class TCsvScanNodeTupleScheme extends TupleScheme<TCsvScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCsvScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.file_paths.size());
        for (String _iter126 : struct.file_paths)
        {
          oprot.writeString(_iter126);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetColumn_separator()) {
        optionals.set(0);
      }
      if (struct.isSetLine_delimiter()) {
        optionals.set(1);
      }
      if (struct.isSetColumn_type_mapping()) {
        optionals.set(2);
      }
      if (struct.isSetColumns()) {
        optionals.set(3);
      }
      if (struct.isSetUnspecified_columns()) {
        optionals.set(4);
      }
      if (struct.isSetDefault_values()) {
        optionals.set(5);
      }
      if (struct.isSetMax_filter_ratio()) {
        optionals.set(6);
      }
      if (struct.isSetColumn_function_mapping()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetColumn_separator()) {
        oprot.writeString(struct.column_separator);
      }
      if (struct.isSetLine_delimiter()) {
        oprot.writeString(struct.line_delimiter);
      }
      if (struct.isSetColumn_type_mapping()) {
        {
          oprot.writeI32(struct.column_type_mapping.size());
          for (Map.Entry<String, com.baidu.palo.thrift.TColumnType> _iter127 : struct.column_type_mapping.entrySet())
          {
            oprot.writeString(_iter127.getKey());
            _iter127.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (String _iter128 : struct.columns)
          {
            oprot.writeString(_iter128);
          }
        }
      }
      if (struct.isSetUnspecified_columns()) {
        {
          oprot.writeI32(struct.unspecified_columns.size());
          for (String _iter129 : struct.unspecified_columns)
          {
            oprot.writeString(_iter129);
          }
        }
      }
      if (struct.isSetDefault_values()) {
        {
          oprot.writeI32(struct.default_values.size());
          for (String _iter130 : struct.default_values)
          {
            oprot.writeString(_iter130);
          }
        }
      }
      if (struct.isSetMax_filter_ratio()) {
        oprot.writeDouble(struct.max_filter_ratio);
      }
      if (struct.isSetColumn_function_mapping()) {
        {
          oprot.writeI32(struct.column_function_mapping.size());
          for (Map.Entry<String, TMiniLoadEtlFunction> _iter131 : struct.column_function_mapping.entrySet())
          {
            oprot.writeString(_iter131.getKey());
            _iter131.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCsvScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list132 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.file_paths = new ArrayList<String>(_list132.size);
        String _elem133;
        for (int _i134 = 0; _i134 < _list132.size; ++_i134)
        {
          _elem133 = iprot.readString();
          struct.file_paths.add(_elem133);
        }
      }
      struct.setFile_pathsIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.column_separator = iprot.readString();
        struct.setColumn_separatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.line_delimiter = iprot.readString();
        struct.setLine_delimiterIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map135 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_type_mapping = new HashMap<String,com.baidu.palo.thrift.TColumnType>(2*_map135.size);
          String _key136;
          com.baidu.palo.thrift.TColumnType _val137;
          for (int _i138 = 0; _i138 < _map135.size; ++_i138)
          {
            _key136 = iprot.readString();
            _val137 = new com.baidu.palo.thrift.TColumnType();
            _val137.read(iprot);
            struct.column_type_mapping.put(_key136, _val137);
          }
        }
        struct.setColumn_type_mappingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.columns = new ArrayList<String>(_list139.size);
          String _elem140;
          for (int _i141 = 0; _i141 < _list139.size; ++_i141)
          {
            _elem140 = iprot.readString();
            struct.columns.add(_elem140);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list142 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.unspecified_columns = new ArrayList<String>(_list142.size);
          String _elem143;
          for (int _i144 = 0; _i144 < _list142.size; ++_i144)
          {
            _elem143 = iprot.readString();
            struct.unspecified_columns.add(_elem143);
          }
        }
        struct.setUnspecified_columnsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.default_values = new ArrayList<String>(_list145.size);
          String _elem146;
          for (int _i147 = 0; _i147 < _list145.size; ++_i147)
          {
            _elem146 = iprot.readString();
            struct.default_values.add(_elem146);
          }
        }
        struct.setDefault_valuesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.max_filter_ratio = iprot.readDouble();
        struct.setMax_filter_ratioIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map148 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_function_mapping = new HashMap<String,TMiniLoadEtlFunction>(2*_map148.size);
          String _key149;
          TMiniLoadEtlFunction _val150;
          for (int _i151 = 0; _i151 < _map148.size; ++_i151)
          {
            _key149 = iprot.readString();
            _val150 = new TMiniLoadEtlFunction();
            _val150.read(iprot);
            struct.column_function_mapping.put(_key149, _val150);
          }
        }
        struct.setColumn_function_mappingIsSet(true);
      }
    }
  }

}

