/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TBrokerScanRangeParams implements org.apache.thrift.TBase<TBrokerScanRangeParams, TBrokerScanRangeParams._Fields>, java.io.Serializable, Cloneable, Comparable<TBrokerScanRangeParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBrokerScanRangeParams");

  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField LINE_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delimiter", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tuple_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("src_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEST_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXPR_OF_DEST_SLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("expr_of_dest_slot", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_ids", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBrokerScanRangeParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBrokerScanRangeParamsTupleSchemeFactory());
  }

  public byte column_separator; // required
  public byte line_delimiter; // required
  public int src_tuple_id; // required
  public List<Integer> src_slot_ids; // required
  public int dest_tuple_id; // required
  public Map<Integer,com.baidu.palo.thrift.TExpr> expr_of_dest_slot; // optional
  public Map<String,String> properties; // optional
  public List<Long> partition_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_SEPARATOR((short)1, "column_separator"),
    LINE_DELIMITER((short)2, "line_delimiter"),
    SRC_TUPLE_ID((short)3, "src_tuple_id"),
    SRC_SLOT_IDS((short)4, "src_slot_ids"),
    DEST_TUPLE_ID((short)5, "dest_tuple_id"),
    EXPR_OF_DEST_SLOT((short)6, "expr_of_dest_slot"),
    PROPERTIES((short)7, "properties"),
    PARTITION_IDS((short)8, "partition_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 2: // LINE_DELIMITER
          return LINE_DELIMITER;
        case 3: // SRC_TUPLE_ID
          return SRC_TUPLE_ID;
        case 4: // SRC_SLOT_IDS
          return SRC_SLOT_IDS;
        case 5: // DEST_TUPLE_ID
          return DEST_TUPLE_ID;
        case 6: // EXPR_OF_DEST_SLOT
          return EXPR_OF_DEST_SLOT;
        case 7: // PROPERTIES
          return PROPERTIES;
        case 8: // PARTITION_IDS
          return PARTITION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMN_SEPARATOR_ISSET_ID = 0;
  private static final int __LINE_DELIMITER_ISSET_ID = 1;
  private static final int __SRC_TUPLE_ID_ISSET_ID = 2;
  private static final int __DEST_TUPLE_ID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXPR_OF_DEST_SLOT,_Fields.PROPERTIES,_Fields.PARTITION_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LINE_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("line_delimiter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SRC_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("src_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.SRC_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("src_slot_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.DEST_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("dest_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.EXPR_OF_DEST_SLOT, new org.apache.thrift.meta_data.FieldMetaData("expr_of_dest_slot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TExpr.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("partition_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBrokerScanRangeParams.class, metaDataMap);
  }

  public TBrokerScanRangeParams() {
  }

  public TBrokerScanRangeParams(
    byte column_separator,
    byte line_delimiter,
    int src_tuple_id,
    List<Integer> src_slot_ids,
    int dest_tuple_id)
  {
    this();
    this.column_separator = column_separator;
    setColumn_separatorIsSet(true);
    this.line_delimiter = line_delimiter;
    setLine_delimiterIsSet(true);
    this.src_tuple_id = src_tuple_id;
    setSrc_tuple_idIsSet(true);
    this.src_slot_ids = src_slot_ids;
    this.dest_tuple_id = dest_tuple_id;
    setDest_tuple_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBrokerScanRangeParams(TBrokerScanRangeParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.column_separator = other.column_separator;
    this.line_delimiter = other.line_delimiter;
    this.src_tuple_id = other.src_tuple_id;
    if (other.isSetSrc_slot_ids()) {
      List<Integer> __this__src_slot_ids = new ArrayList<Integer>(other.src_slot_ids.size());
      for (Integer other_element : other.src_slot_ids) {
        __this__src_slot_ids.add(other_element);
      }
      this.src_slot_ids = __this__src_slot_ids;
    }
    this.dest_tuple_id = other.dest_tuple_id;
    if (other.isSetExpr_of_dest_slot()) {
      Map<Integer,com.baidu.palo.thrift.TExpr> __this__expr_of_dest_slot = new HashMap<Integer,com.baidu.palo.thrift.TExpr>(other.expr_of_dest_slot.size());
      for (Map.Entry<Integer, com.baidu.palo.thrift.TExpr> other_element : other.expr_of_dest_slot.entrySet()) {

        Integer other_element_key = other_element.getKey();
        com.baidu.palo.thrift.TExpr other_element_value = other_element.getValue();

        Integer __this__expr_of_dest_slot_copy_key = other_element_key;

        com.baidu.palo.thrift.TExpr __this__expr_of_dest_slot_copy_value = new com.baidu.palo.thrift.TExpr(other_element_value);

        __this__expr_of_dest_slot.put(__this__expr_of_dest_slot_copy_key, __this__expr_of_dest_slot_copy_value);
      }
      this.expr_of_dest_slot = __this__expr_of_dest_slot;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetPartition_ids()) {
      List<Long> __this__partition_ids = new ArrayList<Long>(other.partition_ids);
      this.partition_ids = __this__partition_ids;
    }
  }

  public TBrokerScanRangeParams deepCopy() {
    return new TBrokerScanRangeParams(this);
  }

  @Override
  public void clear() {
    setColumn_separatorIsSet(false);
    this.column_separator = 0;
    setLine_delimiterIsSet(false);
    this.line_delimiter = 0;
    setSrc_tuple_idIsSet(false);
    this.src_tuple_id = 0;
    this.src_slot_ids = null;
    setDest_tuple_idIsSet(false);
    this.dest_tuple_id = 0;
    this.expr_of_dest_slot = null;
    this.properties = null;
    this.partition_ids = null;
  }

  public byte getColumn_separator() {
    return this.column_separator;
  }

  public TBrokerScanRangeParams setColumn_separator(byte column_separator) {
    this.column_separator = column_separator;
    setColumn_separatorIsSet(true);
    return this;
  }

  public void unsetColumn_separator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID);
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_separator() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID);
  }

  public void setColumn_separatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID, value);
  }

  public byte getLine_delimiter() {
    return this.line_delimiter;
  }

  public TBrokerScanRangeParams setLine_delimiter(byte line_delimiter) {
    this.line_delimiter = line_delimiter;
    setLine_delimiterIsSet(true);
    return this;
  }

  public void unsetLine_delimiter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINE_DELIMITER_ISSET_ID);
  }

  /** Returns true if field line_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_delimiter() {
    return EncodingUtils.testBit(__isset_bitfield, __LINE_DELIMITER_ISSET_ID);
  }

  public void setLine_delimiterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINE_DELIMITER_ISSET_ID, value);
  }

  public int getSrc_tuple_id() {
    return this.src_tuple_id;
  }

  public TBrokerScanRangeParams setSrc_tuple_id(int src_tuple_id) {
    this.src_tuple_id = src_tuple_id;
    setSrc_tuple_idIsSet(true);
    return this;
  }

  public void unsetSrc_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field src_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  public void setSrc_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID, value);
  }

  public int getSrc_slot_idsSize() {
    return (this.src_slot_ids == null) ? 0 : this.src_slot_ids.size();
  }

  public java.util.Iterator<Integer> getSrc_slot_idsIterator() {
    return (this.src_slot_ids == null) ? null : this.src_slot_ids.iterator();
  }

  public void addToSrc_slot_ids(int elem) {
    if (this.src_slot_ids == null) {
      this.src_slot_ids = new ArrayList<Integer>();
    }
    this.src_slot_ids.add(elem);
  }

  public List<Integer> getSrc_slot_ids() {
    return this.src_slot_ids;
  }

  public TBrokerScanRangeParams setSrc_slot_ids(List<Integer> src_slot_ids) {
    this.src_slot_ids = src_slot_ids;
    return this;
  }

  public void unsetSrc_slot_ids() {
    this.src_slot_ids = null;
  }

  /** Returns true if field src_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_slot_ids() {
    return this.src_slot_ids != null;
  }

  public void setSrc_slot_idsIsSet(boolean value) {
    if (!value) {
      this.src_slot_ids = null;
    }
  }

  public int getDest_tuple_id() {
    return this.dest_tuple_id;
  }

  public TBrokerScanRangeParams setDest_tuple_id(int dest_tuple_id) {
    this.dest_tuple_id = dest_tuple_id;
    setDest_tuple_idIsSet(true);
    return this;
  }

  public void unsetDest_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field dest_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  public void setDest_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID, value);
  }

  public int getExpr_of_dest_slotSize() {
    return (this.expr_of_dest_slot == null) ? 0 : this.expr_of_dest_slot.size();
  }

  public void putToExpr_of_dest_slot(int key, com.baidu.palo.thrift.TExpr val) {
    if (this.expr_of_dest_slot == null) {
      this.expr_of_dest_slot = new HashMap<Integer,com.baidu.palo.thrift.TExpr>();
    }
    this.expr_of_dest_slot.put(key, val);
  }

  public Map<Integer,com.baidu.palo.thrift.TExpr> getExpr_of_dest_slot() {
    return this.expr_of_dest_slot;
  }

  public TBrokerScanRangeParams setExpr_of_dest_slot(Map<Integer,com.baidu.palo.thrift.TExpr> expr_of_dest_slot) {
    this.expr_of_dest_slot = expr_of_dest_slot;
    return this;
  }

  public void unsetExpr_of_dest_slot() {
    this.expr_of_dest_slot = null;
  }

  /** Returns true if field expr_of_dest_slot is set (has been assigned a value) and false otherwise */
  public boolean isSetExpr_of_dest_slot() {
    return this.expr_of_dest_slot != null;
  }

  public void setExpr_of_dest_slotIsSet(boolean value) {
    if (!value) {
      this.expr_of_dest_slot = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public TBrokerScanRangeParams setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getPartition_idsSize() {
    return (this.partition_ids == null) ? 0 : this.partition_ids.size();
  }

  public java.util.Iterator<Long> getPartition_idsIterator() {
    return (this.partition_ids == null) ? null : this.partition_ids.iterator();
  }

  public void addToPartition_ids(long elem) {
    if (this.partition_ids == null) {
      this.partition_ids = new ArrayList<Long>();
    }
    this.partition_ids.add(elem);
  }

  public List<Long> getPartition_ids() {
    return this.partition_ids;
  }

  public TBrokerScanRangeParams setPartition_ids(List<Long> partition_ids) {
    this.partition_ids = partition_ids;
    return this;
  }

  public void unsetPartition_ids() {
    this.partition_ids = null;
  }

  /** Returns true if field partition_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_ids() {
    return this.partition_ids != null;
  }

  public void setPartition_idsIsSet(boolean value) {
    if (!value) {
      this.partition_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumn_separator();
      } else {
        setColumn_separator((Byte)value);
      }
      break;

    case LINE_DELIMITER:
      if (value == null) {
        unsetLine_delimiter();
      } else {
        setLine_delimiter((Byte)value);
      }
      break;

    case SRC_TUPLE_ID:
      if (value == null) {
        unsetSrc_tuple_id();
      } else {
        setSrc_tuple_id((Integer)value);
      }
      break;

    case SRC_SLOT_IDS:
      if (value == null) {
        unsetSrc_slot_ids();
      } else {
        setSrc_slot_ids((List<Integer>)value);
      }
      break;

    case DEST_TUPLE_ID:
      if (value == null) {
        unsetDest_tuple_id();
      } else {
        setDest_tuple_id((Integer)value);
      }
      break;

    case EXPR_OF_DEST_SLOT:
      if (value == null) {
        unsetExpr_of_dest_slot();
      } else {
        setExpr_of_dest_slot((Map<Integer,com.baidu.palo.thrift.TExpr>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case PARTITION_IDS:
      if (value == null) {
        unsetPartition_ids();
      } else {
        setPartition_ids((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_SEPARATOR:
      return getColumn_separator();

    case LINE_DELIMITER:
      return getLine_delimiter();

    case SRC_TUPLE_ID:
      return getSrc_tuple_id();

    case SRC_SLOT_IDS:
      return getSrc_slot_ids();

    case DEST_TUPLE_ID:
      return getDest_tuple_id();

    case EXPR_OF_DEST_SLOT:
      return getExpr_of_dest_slot();

    case PROPERTIES:
      return getProperties();

    case PARTITION_IDS:
      return getPartition_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_SEPARATOR:
      return isSetColumn_separator();
    case LINE_DELIMITER:
      return isSetLine_delimiter();
    case SRC_TUPLE_ID:
      return isSetSrc_tuple_id();
    case SRC_SLOT_IDS:
      return isSetSrc_slot_ids();
    case DEST_TUPLE_ID:
      return isSetDest_tuple_id();
    case EXPR_OF_DEST_SLOT:
      return isSetExpr_of_dest_slot();
    case PROPERTIES:
      return isSetProperties();
    case PARTITION_IDS:
      return isSetPartition_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBrokerScanRangeParams)
      return this.equals((TBrokerScanRangeParams)that);
    return false;
  }

  public boolean equals(TBrokerScanRangeParams that) {
    if (that == null)
      return false;

    boolean this_present_column_separator = true;
    boolean that_present_column_separator = true;
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (this.column_separator != that.column_separator)
        return false;
    }

    boolean this_present_line_delimiter = true;
    boolean that_present_line_delimiter = true;
    if (this_present_line_delimiter || that_present_line_delimiter) {
      if (!(this_present_line_delimiter && that_present_line_delimiter))
        return false;
      if (this.line_delimiter != that.line_delimiter)
        return false;
    }

    boolean this_present_src_tuple_id = true;
    boolean that_present_src_tuple_id = true;
    if (this_present_src_tuple_id || that_present_src_tuple_id) {
      if (!(this_present_src_tuple_id && that_present_src_tuple_id))
        return false;
      if (this.src_tuple_id != that.src_tuple_id)
        return false;
    }

    boolean this_present_src_slot_ids = true && this.isSetSrc_slot_ids();
    boolean that_present_src_slot_ids = true && that.isSetSrc_slot_ids();
    if (this_present_src_slot_ids || that_present_src_slot_ids) {
      if (!(this_present_src_slot_ids && that_present_src_slot_ids))
        return false;
      if (!this.src_slot_ids.equals(that.src_slot_ids))
        return false;
    }

    boolean this_present_dest_tuple_id = true;
    boolean that_present_dest_tuple_id = true;
    if (this_present_dest_tuple_id || that_present_dest_tuple_id) {
      if (!(this_present_dest_tuple_id && that_present_dest_tuple_id))
        return false;
      if (this.dest_tuple_id != that.dest_tuple_id)
        return false;
    }

    boolean this_present_expr_of_dest_slot = true && this.isSetExpr_of_dest_slot();
    boolean that_present_expr_of_dest_slot = true && that.isSetExpr_of_dest_slot();
    if (this_present_expr_of_dest_slot || that_present_expr_of_dest_slot) {
      if (!(this_present_expr_of_dest_slot && that_present_expr_of_dest_slot))
        return false;
      if (!this.expr_of_dest_slot.equals(that.expr_of_dest_slot))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_partition_ids = true && this.isSetPartition_ids();
    boolean that_present_partition_ids = true && that.isSetPartition_ids();
    if (this_present_partition_ids || that_present_partition_ids) {
      if (!(this_present_partition_ids && that_present_partition_ids))
        return false;
      if (!this.partition_ids.equals(that.partition_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_column_separator = true;
    list.add(present_column_separator);
    if (present_column_separator)
      list.add(column_separator);

    boolean present_line_delimiter = true;
    list.add(present_line_delimiter);
    if (present_line_delimiter)
      list.add(line_delimiter);

    boolean present_src_tuple_id = true;
    list.add(present_src_tuple_id);
    if (present_src_tuple_id)
      list.add(src_tuple_id);

    boolean present_src_slot_ids = true && (isSetSrc_slot_ids());
    list.add(present_src_slot_ids);
    if (present_src_slot_ids)
      list.add(src_slot_ids);

    boolean present_dest_tuple_id = true;
    list.add(present_dest_tuple_id);
    if (present_dest_tuple_id)
      list.add(dest_tuple_id);

    boolean present_expr_of_dest_slot = true && (isSetExpr_of_dest_slot());
    list.add(present_expr_of_dest_slot);
    if (present_expr_of_dest_slot)
      list.add(expr_of_dest_slot);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_partition_ids = true && (isSetPartition_ids());
    list.add(present_partition_ids);
    if (present_partition_ids)
      list.add(partition_ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBrokerScanRangeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumn_separator()).compareTo(other.isSetColumn_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine_delimiter()).compareTo(other.isSetLine_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delimiter, other.line_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_tuple_id()).compareTo(other.isSetSrc_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tuple_id, other.src_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_slot_ids()).compareTo(other.isSetSrc_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_slot_ids, other.src_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDest_tuple_id()).compareTo(other.isSetDest_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_tuple_id, other.dest_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpr_of_dest_slot()).compareTo(other.isSetExpr_of_dest_slot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpr_of_dest_slot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expr_of_dest_slot, other.expr_of_dest_slot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_ids()).compareTo(other.isSetPartition_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_ids, other.partition_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBrokerScanRangeParams(");
    boolean first = true;

    sb.append("column_separator:");
    sb.append(this.column_separator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("line_delimiter:");
    sb.append(this.line_delimiter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_tuple_id:");
    sb.append(this.src_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_slot_ids:");
    if (this.src_slot_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.src_slot_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dest_tuple_id:");
    sb.append(this.dest_tuple_id);
    first = false;
    if (isSetExpr_of_dest_slot()) {
      if (!first) sb.append(", ");
      sb.append("expr_of_dest_slot:");
      if (this.expr_of_dest_slot == null) {
        sb.append("null");
      } else {
        sb.append(this.expr_of_dest_slot);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetPartition_ids()) {
      if (!first) sb.append(", ");
      sb.append("partition_ids:");
      if (this.partition_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'column_separator' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'line_delimiter' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'src_tuple_id' because it's a primitive and you chose the non-beans generator.
    if (src_slot_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_slot_ids' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dest_tuple_id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBrokerScanRangeParamsStandardSchemeFactory implements SchemeFactory {
    public TBrokerScanRangeParamsStandardScheme getScheme() {
      return new TBrokerScanRangeParamsStandardScheme();
    }
  }

  private static class TBrokerScanRangeParamsStandardScheme extends StandardScheme<TBrokerScanRangeParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.column_separator = iprot.readByte();
              struct.setColumn_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINE_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.line_delimiter = iprot.readByte();
              struct.setLine_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_tuple_id = iprot.readI32();
              struct.setSrc_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.src_slot_ids = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.src_slot_ids.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setSrc_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEST_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_tuple_id = iprot.readI32();
              struct.setDest_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPR_OF_DEST_SLOT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.expr_of_dest_slot = new HashMap<Integer,com.baidu.palo.thrift.TExpr>(2*_map19.size);
                int _key20;
                com.baidu.palo.thrift.TExpr _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readI32();
                  _val21 = new com.baidu.palo.thrift.TExpr();
                  _val21.read(iprot);
                  struct.expr_of_dest_slot.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setExpr_of_dest_slotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map23.size);
                String _key24;
                String _val25;
                for (int _i26 = 0; _i26 < _map23.size; ++_i26)
                {
                  _key24 = iprot.readString();
                  _val25 = iprot.readString();
                  struct.properties.put(_key24, _val25);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.partition_ids = new ArrayList<Long>(_list27.size);
                long _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readI64();
                  struct.partition_ids.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setPartition_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetColumn_separator()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_separator' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLine_delimiter()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'line_delimiter' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSrc_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDest_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dest_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
      oprot.writeByte(struct.column_separator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINE_DELIMITER_FIELD_DESC);
      oprot.writeByte(struct.line_delimiter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SRC_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.src_tuple_id);
      oprot.writeFieldEnd();
      if (struct.src_slot_ids != null) {
        oprot.writeFieldBegin(SRC_SLOT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.src_slot_ids.size()));
          for (int _iter30 : struct.src_slot_ids)
          {
            oprot.writeI32(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEST_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.dest_tuple_id);
      oprot.writeFieldEnd();
      if (struct.expr_of_dest_slot != null) {
        if (struct.isSetExpr_of_dest_slot()) {
          oprot.writeFieldBegin(EXPR_OF_DEST_SLOT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.expr_of_dest_slot.size()));
            for (Map.Entry<Integer, com.baidu.palo.thrift.TExpr> _iter31 : struct.expr_of_dest_slot.entrySet())
            {
              oprot.writeI32(_iter31.getKey());
              _iter31.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter32 : struct.properties.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              oprot.writeString(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_ids != null) {
        if (struct.isSetPartition_ids()) {
          oprot.writeFieldBegin(PARTITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.partition_ids.size()));
            for (long _iter33 : struct.partition_ids)
            {
              oprot.writeI64(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBrokerScanRangeParamsTupleSchemeFactory implements SchemeFactory {
    public TBrokerScanRangeParamsTupleScheme getScheme() {
      return new TBrokerScanRangeParamsTupleScheme();
    }
  }

  private static class TBrokerScanRangeParamsTupleScheme extends TupleScheme<TBrokerScanRangeParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeByte(struct.column_separator);
      oprot.writeByte(struct.line_delimiter);
      oprot.writeI32(struct.src_tuple_id);
      {
        oprot.writeI32(struct.src_slot_ids.size());
        for (int _iter34 : struct.src_slot_ids)
        {
          oprot.writeI32(_iter34);
        }
      }
      oprot.writeI32(struct.dest_tuple_id);
      BitSet optionals = new BitSet();
      if (struct.isSetExpr_of_dest_slot()) {
        optionals.set(0);
      }
      if (struct.isSetProperties()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_ids()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExpr_of_dest_slot()) {
        {
          oprot.writeI32(struct.expr_of_dest_slot.size());
          for (Map.Entry<Integer, com.baidu.palo.thrift.TExpr> _iter35 : struct.expr_of_dest_slot.entrySet())
          {
            oprot.writeI32(_iter35.getKey());
            _iter35.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter36 : struct.properties.entrySet())
          {
            oprot.writeString(_iter36.getKey());
            oprot.writeString(_iter36.getValue());
          }
        }
      }
      if (struct.isSetPartition_ids()) {
        {
          oprot.writeI32(struct.partition_ids.size());
          for (long _iter37 : struct.partition_ids)
          {
            oprot.writeI64(_iter37);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.column_separator = iprot.readByte();
      struct.setColumn_separatorIsSet(true);
      struct.line_delimiter = iprot.readByte();
      struct.setLine_delimiterIsSet(true);
      struct.src_tuple_id = iprot.readI32();
      struct.setSrc_tuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.src_slot_ids = new ArrayList<Integer>(_list38.size);
        int _elem39;
        for (int _i40 = 0; _i40 < _list38.size; ++_i40)
        {
          _elem39 = iprot.readI32();
          struct.src_slot_ids.add(_elem39);
        }
      }
      struct.setSrc_slot_idsIsSet(true);
      struct.dest_tuple_id = iprot.readI32();
      struct.setDest_tuple_idIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map41 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.expr_of_dest_slot = new HashMap<Integer,com.baidu.palo.thrift.TExpr>(2*_map41.size);
          int _key42;
          com.baidu.palo.thrift.TExpr _val43;
          for (int _i44 = 0; _i44 < _map41.size; ++_i44)
          {
            _key42 = iprot.readI32();
            _val43 = new com.baidu.palo.thrift.TExpr();
            _val43.read(iprot);
            struct.expr_of_dest_slot.put(_key42, _val43);
          }
        }
        struct.setExpr_of_dest_slotIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map45.size);
          String _key46;
          String _val47;
          for (int _i48 = 0; _i48 < _map45.size; ++_i48)
          {
            _key46 = iprot.readString();
            _val47 = iprot.readString();
            struct.properties.put(_key46, _val47);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.partition_ids = new ArrayList<Long>(_list49.size);
          long _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readI64();
            struct.partition_ids.add(_elem50);
          }
        }
        struct.setPartition_idsIsSet(true);
      }
    }
  }

}

