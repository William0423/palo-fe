/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-18")
public class TPlanFragmentExecParams implements org.apache.thrift.TBase<TPlanFragmentExecParams, TPlanFragmentExecParams._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentExecParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentExecParams");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField PER_EXCH_NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("per_exch_num_senders", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("destinations", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DEBUG_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_node_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEBUG_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_phase", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEBUG_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_action", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_id", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentExecParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentExecParamsTupleSchemeFactory());
  }

  public com.baidu.palo.thrift.TUniqueId query_id; // required
  public com.baidu.palo.thrift.TUniqueId fragment_instance_id; // required
  public Map<Integer,List<TScanRangeParams>> per_node_scan_ranges; // required
  public Map<Integer,Integer> per_exch_num_senders; // required
  public List<TPlanFragmentDestination> destinations; // required
  public int debug_node_id; // optional
  /**
   * 
   * @see com.baidu.palo.thrift.TExecNodePhase
   */
  public com.baidu.palo.thrift.TExecNodePhase debug_phase; // optional
  /**
   * 
   * @see com.baidu.palo.thrift.TDebugAction
   */
  public com.baidu.palo.thrift.TDebugAction debug_action; // optional
  public int sender_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "query_id"),
    FRAGMENT_INSTANCE_ID((short)2, "fragment_instance_id"),
    PER_NODE_SCAN_RANGES((short)3, "per_node_scan_ranges"),
    PER_EXCH_NUM_SENDERS((short)4, "per_exch_num_senders"),
    DESTINATIONS((short)5, "destinations"),
    DEBUG_NODE_ID((short)6, "debug_node_id"),
    /**
     * 
     * @see com.baidu.palo.thrift.TExecNodePhase
     */
    DEBUG_PHASE((short)7, "debug_phase"),
    /**
     * 
     * @see com.baidu.palo.thrift.TDebugAction
     */
    DEBUG_ACTION((short)8, "debug_action"),
    SENDER_ID((short)9, "sender_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 3: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 4: // PER_EXCH_NUM_SENDERS
          return PER_EXCH_NUM_SENDERS;
        case 5: // DESTINATIONS
          return DESTINATIONS;
        case 6: // DEBUG_NODE_ID
          return DEBUG_NODE_ID;
        case 7: // DEBUG_PHASE
          return DEBUG_PHASE;
        case 8: // DEBUG_ACTION
          return DEBUG_ACTION;
        case 9: // SENDER_ID
          return SENDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUG_NODE_ID_ISSET_ID = 0;
  private static final int __SENDER_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEBUG_NODE_ID,_Fields.DEBUG_PHASE,_Fields.DEBUG_ACTION,_Fields.SENDER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeParams.class)))));
    tmpMap.put(_Fields.PER_EXCH_NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("per_exch_num_senders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DESTINATIONS, new org.apache.thrift.meta_data.FieldMetaData("destinations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentDestination.class))));
    tmpMap.put(_Fields.DEBUG_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("debug_node_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.DEBUG_PHASE, new org.apache.thrift.meta_data.FieldMetaData("debug_phase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TExecNodePhase.class)));
    tmpMap.put(_Fields.DEBUG_ACTION, new org.apache.thrift.meta_data.FieldMetaData("debug_action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TDebugAction.class)));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentExecParams.class, metaDataMap);
  }

  public TPlanFragmentExecParams() {
  }

  public TPlanFragmentExecParams(
    com.baidu.palo.thrift.TUniqueId query_id,
    com.baidu.palo.thrift.TUniqueId fragment_instance_id,
    Map<Integer,List<TScanRangeParams>> per_node_scan_ranges,
    Map<Integer,Integer> per_exch_num_senders,
    List<TPlanFragmentDestination> destinations)
  {
    this();
    this.query_id = query_id;
    this.fragment_instance_id = fragment_instance_id;
    this.per_node_scan_ranges = per_node_scan_ranges;
    this.per_exch_num_senders = per_exch_num_senders;
    this.destinations = destinations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentExecParams(TPlanFragmentExecParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery_id()) {
      this.query_id = new com.baidu.palo.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetPer_node_scan_ranges()) {
      Map<Integer,List<TScanRangeParams>> __this__per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(other.per_node_scan_ranges.size());
      for (Map.Entry<Integer, List<TScanRangeParams>> other_element : other.per_node_scan_ranges.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<TScanRangeParams> other_element_value = other_element.getValue();

        Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        List<TScanRangeParams> __this__per_node_scan_ranges_copy_value = new ArrayList<TScanRangeParams>(other_element_value.size());
        for (TScanRangeParams other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new TScanRangeParams(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetPer_exch_num_senders()) {
      Map<Integer,Integer> __this__per_exch_num_senders = new HashMap<Integer,Integer>(other.per_exch_num_senders.size());
      for (Map.Entry<Integer, Integer> other_element : other.per_exch_num_senders.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__per_exch_num_senders_copy_key = other_element_key;

        Integer __this__per_exch_num_senders_copy_value = other_element_value;

        __this__per_exch_num_senders.put(__this__per_exch_num_senders_copy_key, __this__per_exch_num_senders_copy_value);
      }
      this.per_exch_num_senders = __this__per_exch_num_senders;
    }
    if (other.isSetDestinations()) {
      List<TPlanFragmentDestination> __this__destinations = new ArrayList<TPlanFragmentDestination>(other.destinations.size());
      for (TPlanFragmentDestination other_element : other.destinations) {
        __this__destinations.add(new TPlanFragmentDestination(other_element));
      }
      this.destinations = __this__destinations;
    }
    this.debug_node_id = other.debug_node_id;
    if (other.isSetDebug_phase()) {
      this.debug_phase = other.debug_phase;
    }
    if (other.isSetDebug_action()) {
      this.debug_action = other.debug_action;
    }
    this.sender_id = other.sender_id;
  }

  public TPlanFragmentExecParams deepCopy() {
    return new TPlanFragmentExecParams(this);
  }

  @Override
  public void clear() {
    this.query_id = null;
    this.fragment_instance_id = null;
    this.per_node_scan_ranges = null;
    this.per_exch_num_senders = null;
    this.destinations = null;
    setDebug_node_idIsSet(false);
    this.debug_node_id = 0;
    this.debug_phase = null;
    this.debug_action = null;
    setSender_idIsSet(false);
    this.sender_id = 0;
  }

  public com.baidu.palo.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TPlanFragmentExecParams setQuery_id(com.baidu.palo.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public com.baidu.palo.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentExecParams setFragment_instance_id(com.baidu.palo.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(int key, List<TScanRangeParams> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  public Map<Integer,List<TScanRangeParams>> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TPlanFragmentExecParams setPer_node_scan_ranges(Map<Integer,List<TScanRangeParams>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public int getPer_exch_num_sendersSize() {
    return (this.per_exch_num_senders == null) ? 0 : this.per_exch_num_senders.size();
  }

  public void putToPer_exch_num_senders(int key, int val) {
    if (this.per_exch_num_senders == null) {
      this.per_exch_num_senders = new HashMap<Integer,Integer>();
    }
    this.per_exch_num_senders.put(key, val);
  }

  public Map<Integer,Integer> getPer_exch_num_senders() {
    return this.per_exch_num_senders;
  }

  public TPlanFragmentExecParams setPer_exch_num_senders(Map<Integer,Integer> per_exch_num_senders) {
    this.per_exch_num_senders = per_exch_num_senders;
    return this;
  }

  public void unsetPer_exch_num_senders() {
    this.per_exch_num_senders = null;
  }

  /** Returns true if field per_exch_num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_exch_num_senders() {
    return this.per_exch_num_senders != null;
  }

  public void setPer_exch_num_sendersIsSet(boolean value) {
    if (!value) {
      this.per_exch_num_senders = null;
    }
  }

  public int getDestinationsSize() {
    return (this.destinations == null) ? 0 : this.destinations.size();
  }

  public java.util.Iterator<TPlanFragmentDestination> getDestinationsIterator() {
    return (this.destinations == null) ? null : this.destinations.iterator();
  }

  public void addToDestinations(TPlanFragmentDestination elem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<TPlanFragmentDestination>();
    }
    this.destinations.add(elem);
  }

  public List<TPlanFragmentDestination> getDestinations() {
    return this.destinations;
  }

  public TPlanFragmentExecParams setDestinations(List<TPlanFragmentDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public void unsetDestinations() {
    this.destinations = null;
  }

  /** Returns true if field destinations is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinations() {
    return this.destinations != null;
  }

  public void setDestinationsIsSet(boolean value) {
    if (!value) {
      this.destinations = null;
    }
  }

  public int getDebug_node_id() {
    return this.debug_node_id;
  }

  public TPlanFragmentExecParams setDebug_node_id(int debug_node_id) {
    this.debug_node_id = debug_node_id;
    setDebug_node_idIsSet(true);
    return this;
  }

  public void unsetDebug_node_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID);
  }

  /** Returns true if field debug_node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_node_id() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID);
  }

  public void setDebug_node_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TExecNodePhase
   */
  public com.baidu.palo.thrift.TExecNodePhase getDebug_phase() {
    return this.debug_phase;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TExecNodePhase
   */
  public TPlanFragmentExecParams setDebug_phase(com.baidu.palo.thrift.TExecNodePhase debug_phase) {
    this.debug_phase = debug_phase;
    return this;
  }

  public void unsetDebug_phase() {
    this.debug_phase = null;
  }

  /** Returns true if field debug_phase is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_phase() {
    return this.debug_phase != null;
  }

  public void setDebug_phaseIsSet(boolean value) {
    if (!value) {
      this.debug_phase = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TDebugAction
   */
  public com.baidu.palo.thrift.TDebugAction getDebug_action() {
    return this.debug_action;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TDebugAction
   */
  public TPlanFragmentExecParams setDebug_action(com.baidu.palo.thrift.TDebugAction debug_action) {
    this.debug_action = debug_action;
    return this;
  }

  public void unsetDebug_action() {
    this.debug_action = null;
  }

  /** Returns true if field debug_action is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_action() {
    return this.debug_action != null;
  }

  public void setDebug_actionIsSet(boolean value) {
    if (!value) {
      this.debug_action = null;
    }
  }

  public int getSender_id() {
    return this.sender_id;
  }

  public TPlanFragmentExecParams setSender_id(int sender_id) {
    this.sender_id = sender_id;
    setSender_idIsSet(true);
    return this;
  }

  public void unsetSender_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  /** Returns true if field sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSender_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  public void setSender_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDER_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.baidu.palo.thrift.TUniqueId)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((Map<Integer,List<TScanRangeParams>>)value);
      }
      break;

    case PER_EXCH_NUM_SENDERS:
      if (value == null) {
        unsetPer_exch_num_senders();
      } else {
        setPer_exch_num_senders((Map<Integer,Integer>)value);
      }
      break;

    case DESTINATIONS:
      if (value == null) {
        unsetDestinations();
      } else {
        setDestinations((List<TPlanFragmentDestination>)value);
      }
      break;

    case DEBUG_NODE_ID:
      if (value == null) {
        unsetDebug_node_id();
      } else {
        setDebug_node_id((Integer)value);
      }
      break;

    case DEBUG_PHASE:
      if (value == null) {
        unsetDebug_phase();
      } else {
        setDebug_phase((com.baidu.palo.thrift.TExecNodePhase)value);
      }
      break;

    case DEBUG_ACTION:
      if (value == null) {
        unsetDebug_action();
      } else {
        setDebug_action((com.baidu.palo.thrift.TDebugAction)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSender_id();
      } else {
        setSender_id((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return getQuery_id();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    case PER_EXCH_NUM_SENDERS:
      return getPer_exch_num_senders();

    case DESTINATIONS:
      return getDestinations();

    case DEBUG_NODE_ID:
      return getDebug_node_id();

    case DEBUG_PHASE:
      return getDebug_phase();

    case DEBUG_ACTION:
      return getDebug_action();

    case SENDER_ID:
      return getSender_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQuery_id();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    case PER_EXCH_NUM_SENDERS:
      return isSetPer_exch_num_senders();
    case DESTINATIONS:
      return isSetDestinations();
    case DEBUG_NODE_ID:
      return isSetDebug_node_id();
    case DEBUG_PHASE:
      return isSetDebug_phase();
    case DEBUG_ACTION:
      return isSetDebug_action();
    case SENDER_ID:
      return isSetSender_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentExecParams)
      return this.equals((TPlanFragmentExecParams)that);
    return false;
  }

  public boolean equals(TPlanFragmentExecParams that) {
    if (that == null)
      return false;

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_per_exch_num_senders = true && this.isSetPer_exch_num_senders();
    boolean that_present_per_exch_num_senders = true && that.isSetPer_exch_num_senders();
    if (this_present_per_exch_num_senders || that_present_per_exch_num_senders) {
      if (!(this_present_per_exch_num_senders && that_present_per_exch_num_senders))
        return false;
      if (!this.per_exch_num_senders.equals(that.per_exch_num_senders))
        return false;
    }

    boolean this_present_destinations = true && this.isSetDestinations();
    boolean that_present_destinations = true && that.isSetDestinations();
    if (this_present_destinations || that_present_destinations) {
      if (!(this_present_destinations && that_present_destinations))
        return false;
      if (!this.destinations.equals(that.destinations))
        return false;
    }

    boolean this_present_debug_node_id = true && this.isSetDebug_node_id();
    boolean that_present_debug_node_id = true && that.isSetDebug_node_id();
    if (this_present_debug_node_id || that_present_debug_node_id) {
      if (!(this_present_debug_node_id && that_present_debug_node_id))
        return false;
      if (this.debug_node_id != that.debug_node_id)
        return false;
    }

    boolean this_present_debug_phase = true && this.isSetDebug_phase();
    boolean that_present_debug_phase = true && that.isSetDebug_phase();
    if (this_present_debug_phase || that_present_debug_phase) {
      if (!(this_present_debug_phase && that_present_debug_phase))
        return false;
      if (!this.debug_phase.equals(that.debug_phase))
        return false;
    }

    boolean this_present_debug_action = true && this.isSetDebug_action();
    boolean that_present_debug_action = true && that.isSetDebug_action();
    if (this_present_debug_action || that_present_debug_action) {
      if (!(this_present_debug_action && that_present_debug_action))
        return false;
      if (!this.debug_action.equals(that.debug_action))
        return false;
    }

    boolean this_present_sender_id = true && this.isSetSender_id();
    boolean that_present_sender_id = true && that.isSetSender_id();
    if (this_present_sender_id || that_present_sender_id) {
      if (!(this_present_sender_id && that_present_sender_id))
        return false;
      if (this.sender_id != that.sender_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query_id = true && (isSetQuery_id());
    list.add(present_query_id);
    if (present_query_id)
      list.add(query_id);

    boolean present_fragment_instance_id = true && (isSetFragment_instance_id());
    list.add(present_fragment_instance_id);
    if (present_fragment_instance_id)
      list.add(fragment_instance_id);

    boolean present_per_node_scan_ranges = true && (isSetPer_node_scan_ranges());
    list.add(present_per_node_scan_ranges);
    if (present_per_node_scan_ranges)
      list.add(per_node_scan_ranges);

    boolean present_per_exch_num_senders = true && (isSetPer_exch_num_senders());
    list.add(present_per_exch_num_senders);
    if (present_per_exch_num_senders)
      list.add(per_exch_num_senders);

    boolean present_destinations = true && (isSetDestinations());
    list.add(present_destinations);
    if (present_destinations)
      list.add(destinations);

    boolean present_debug_node_id = true && (isSetDebug_node_id());
    list.add(present_debug_node_id);
    if (present_debug_node_id)
      list.add(debug_node_id);

    boolean present_debug_phase = true && (isSetDebug_phase());
    list.add(present_debug_phase);
    if (present_debug_phase)
      list.add(debug_phase.getValue());

    boolean present_debug_action = true && (isSetDebug_action());
    list.add(present_debug_action);
    if (present_debug_action)
      list.add(debug_action.getValue());

    boolean present_sender_id = true && (isSetSender_id());
    list.add(present_sender_id);
    if (present_sender_id)
      list.add(sender_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragmentExecParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_node_scan_ranges()).compareTo(other.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_exch_num_senders()).compareTo(other.isSetPer_exch_num_senders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_exch_num_senders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_exch_num_senders, other.per_exch_num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinations()).compareTo(other.isSetDestinations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinations, other.destinations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_node_id()).compareTo(other.isSetDebug_node_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_node_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_node_id, other.debug_node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_phase()).compareTo(other.isSetDebug_phase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_phase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_phase, other.debug_phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_action()).compareTo(other.isSetDebug_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_action, other.debug_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender_id()).compareTo(other.isSetSender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_id, other.sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentExecParams(");
    boolean first = true;

    sb.append("query_id:");
    if (this.query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_node_scan_ranges:");
    if (this.per_node_scan_ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.per_node_scan_ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_exch_num_senders:");
    if (this.per_exch_num_senders == null) {
      sb.append("null");
    } else {
      sb.append(this.per_exch_num_senders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinations:");
    if (this.destinations == null) {
      sb.append("null");
    } else {
      sb.append(this.destinations);
    }
    first = false;
    if (isSetDebug_node_id()) {
      if (!first) sb.append(", ");
      sb.append("debug_node_id:");
      sb.append(this.debug_node_id);
      first = false;
    }
    if (isSetDebug_phase()) {
      if (!first) sb.append(", ");
      sb.append("debug_phase:");
      if (this.debug_phase == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_phase);
      }
      first = false;
    }
    if (isSetDebug_action()) {
      if (!first) sb.append(", ");
      sb.append("debug_action:");
      if (this.debug_action == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_action);
      }
      first = false;
    }
    if (isSetSender_id()) {
      if (!first) sb.append(", ");
      sb.append("sender_id:");
      sb.append(this.sender_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_id' was not present! Struct: " + toString());
    }
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    if (per_node_scan_ranges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_node_scan_ranges' was not present! Struct: " + toString());
    }
    if (per_exch_num_senders == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_exch_num_senders' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentExecParamsStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentExecParamsStandardScheme getScheme() {
      return new TPlanFragmentExecParamsStandardScheme();
    }
  }

  private static class TPlanFragmentExecParamsStandardScheme extends StandardScheme<TPlanFragmentExecParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.baidu.palo.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(2*_map0.size);
                int _key1;
                List<TScanRangeParams> _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                    _val2 = new ArrayList<TScanRangeParams>(_list4.size);
                    TScanRangeParams _elem5;
                    for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                    {
                      _elem5 = new TScanRangeParams();
                      _elem5.read(iprot);
                      _val2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_EXCH_NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map7 = iprot.readMapBegin();
                struct.per_exch_num_senders = new HashMap<Integer,Integer>(2*_map7.size);
                int _key8;
                int _val9;
                for (int _i10 = 0; _i10 < _map7.size; ++_i10)
                {
                  _key8 = iprot.readI32();
                  _val9 = iprot.readI32();
                  struct.per_exch_num_senders.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setPer_exch_num_sendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.destinations = new ArrayList<TPlanFragmentDestination>(_list11.size);
                TPlanFragmentDestination _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new TPlanFragmentDestination();
                  _elem12.read(iprot);
                  struct.destinations.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setDestinationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEBUG_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_node_id = iprot.readI32();
              struct.setDebug_node_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBUG_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_phase = com.baidu.palo.thrift.TExecNodePhase.findByValue(iprot.readI32());
              struct.setDebug_phaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEBUG_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_action = com.baidu.palo.thrift.TDebugAction.findByValue(iprot.readI32());
              struct.setDebug_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sender_id = iprot.readI32();
              struct.setSender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_id != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        struct.query_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.per_node_scan_ranges != null) {
        oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
          for (Map.Entry<Integer, List<TScanRangeParams>> _iter14 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter14.getValue().size()));
              for (TScanRangeParams _iter15 : _iter14.getValue())
              {
                _iter15.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.per_exch_num_senders != null) {
        oprot.writeFieldBegin(PER_EXCH_NUM_SENDERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.per_exch_num_senders.size()));
          for (Map.Entry<Integer, Integer> _iter16 : struct.per_exch_num_senders.entrySet())
          {
            oprot.writeI32(_iter16.getKey());
            oprot.writeI32(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.destinations != null) {
        oprot.writeFieldBegin(DESTINATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.destinations.size()));
          for (TPlanFragmentDestination _iter17 : struct.destinations)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebug_node_id()) {
        oprot.writeFieldBegin(DEBUG_NODE_ID_FIELD_DESC);
        oprot.writeI32(struct.debug_node_id);
        oprot.writeFieldEnd();
      }
      if (struct.debug_phase != null) {
        if (struct.isSetDebug_phase()) {
          oprot.writeFieldBegin(DEBUG_PHASE_FIELD_DESC);
          oprot.writeI32(struct.debug_phase.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_action != null) {
        if (struct.isSetDebug_action()) {
          oprot.writeFieldBegin(DEBUG_ACTION_FIELD_DESC);
          oprot.writeI32(struct.debug_action.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSender_id()) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeI32(struct.sender_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentExecParamsTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentExecParamsTupleScheme getScheme() {
      return new TPlanFragmentExecParamsTupleScheme();
    }
  }

  private static class TPlanFragmentExecParamsTupleScheme extends TupleScheme<TPlanFragmentExecParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.query_id.write(oprot);
      struct.fragment_instance_id.write(oprot);
      {
        oprot.writeI32(struct.per_node_scan_ranges.size());
        for (Map.Entry<Integer, List<TScanRangeParams>> _iter18 : struct.per_node_scan_ranges.entrySet())
        {
          oprot.writeI32(_iter18.getKey());
          {
            oprot.writeI32(_iter18.getValue().size());
            for (TScanRangeParams _iter19 : _iter18.getValue())
            {
              _iter19.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.per_exch_num_senders.size());
        for (Map.Entry<Integer, Integer> _iter20 : struct.per_exch_num_senders.entrySet())
        {
          oprot.writeI32(_iter20.getKey());
          oprot.writeI32(_iter20.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetDestinations()) {
        optionals.set(0);
      }
      if (struct.isSetDebug_node_id()) {
        optionals.set(1);
      }
      if (struct.isSetDebug_phase()) {
        optionals.set(2);
      }
      if (struct.isSetDebug_action()) {
        optionals.set(3);
      }
      if (struct.isSetSender_id()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDestinations()) {
        {
          oprot.writeI32(struct.destinations.size());
          for (TPlanFragmentDestination _iter21 : struct.destinations)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetDebug_node_id()) {
        oprot.writeI32(struct.debug_node_id);
      }
      if (struct.isSetDebug_phase()) {
        oprot.writeI32(struct.debug_phase.getValue());
      }
      if (struct.isSetDebug_action()) {
        oprot.writeI32(struct.debug_action.getValue());
      }
      if (struct.isSetSender_id()) {
        oprot.writeI32(struct.sender_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query_id = new com.baidu.palo.thrift.TUniqueId();
      struct.query_id.read(iprot);
      struct.setQuery_idIsSet(true);
      struct.fragment_instance_id = new com.baidu.palo.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(2*_map22.size);
        int _key23;
        List<TScanRangeParams> _val24;
        for (int _i25 = 0; _i25 < _map22.size; ++_i25)
        {
          _key23 = iprot.readI32();
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val24 = new ArrayList<TScanRangeParams>(_list26.size);
            TScanRangeParams _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              _elem27 = new TScanRangeParams();
              _elem27.read(iprot);
              _val24.add(_elem27);
            }
          }
          struct.per_node_scan_ranges.put(_key23, _val24);
        }
      }
      struct.setPer_node_scan_rangesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map29 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.per_exch_num_senders = new HashMap<Integer,Integer>(2*_map29.size);
        int _key30;
        int _val31;
        for (int _i32 = 0; _i32 < _map29.size; ++_i32)
        {
          _key30 = iprot.readI32();
          _val31 = iprot.readI32();
          struct.per_exch_num_senders.put(_key30, _val31);
        }
      }
      struct.setPer_exch_num_sendersIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.destinations = new ArrayList<TPlanFragmentDestination>(_list33.size);
          TPlanFragmentDestination _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new TPlanFragmentDestination();
            _elem34.read(iprot);
            struct.destinations.add(_elem34);
          }
        }
        struct.setDestinationsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.debug_node_id = iprot.readI32();
        struct.setDebug_node_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.debug_phase = com.baidu.palo.thrift.TExecNodePhase.findByValue(iprot.readI32());
        struct.setDebug_phaseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.debug_action = com.baidu.palo.thrift.TDebugAction.findByValue(iprot.readI32());
        struct.setDebug_actionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sender_id = iprot.readI32();
        struct.setSender_idIsSet(true);
      }
    }
  }

}

