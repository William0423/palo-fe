/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class DescriptorsConstants {

  public static final Map<String,THdfsCompression> COMPRESSION_MAP = new HashMap<String,THdfsCompression>();
  static {
    COMPRESSION_MAP.put("", com.baidu.palo.thrift.THdfsCompression.NONE);
    COMPRESSION_MAP.put("none", com.baidu.palo.thrift.THdfsCompression.NONE);
    COMPRESSION_MAP.put("deflate", com.baidu.palo.thrift.THdfsCompression.DEFAULT);
    COMPRESSION_MAP.put("gzip", com.baidu.palo.thrift.THdfsCompression.GZIP);
    COMPRESSION_MAP.put("bzip2", com.baidu.palo.thrift.THdfsCompression.BZIP2);
    COMPRESSION_MAP.put("snappy", com.baidu.palo.thrift.THdfsCompression.SNAPPY);
  }

}
