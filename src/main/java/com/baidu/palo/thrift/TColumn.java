/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("column_type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregation_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_key", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_allow_null", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_BLOOM_FILTER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_bloom_filter_column", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnTupleSchemeFactory());
  }

  public String column_name; // required
  public com.baidu.palo.thrift.TColumnType column_type; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TAggregationType
   */
  public com.baidu.palo.thrift.TAggregationType aggregation_type; // optional
  public boolean is_key; // optional
  public boolean is_allow_null; // optional
  public String default_value; // optional
  public boolean is_bloom_filter_column; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "column_name"),
    COLUMN_TYPE((short)2, "column_type"),
    /**
     * 
     * @see com.baidu.palo.thrift.TAggregationType
     */
    AGGREGATION_TYPE((short)3, "aggregation_type"),
    IS_KEY((short)4, "is_key"),
    IS_ALLOW_NULL((short)5, "is_allow_null"),
    DEFAULT_VALUE((short)6, "default_value"),
    IS_BLOOM_FILTER_COLUMN((short)7, "is_bloom_filter_column");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 4: // IS_KEY
          return IS_KEY;
        case 5: // IS_ALLOW_NULL
          return IS_ALLOW_NULL;
        case 6: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 7: // IS_BLOOM_FILTER_COLUMN
          return IS_BLOOM_FILTER_COLUMN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_KEY_ISSET_ID = 0;
  private static final int __IS_ALLOW_NULL_ISSET_ID = 1;
  private static final int __IS_BLOOM_FILTER_COLUMN_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AGGREGATION_TYPE,_Fields.IS_KEY,_Fields.IS_ALLOW_NULL,_Fields.DEFAULT_VALUE,_Fields.IS_BLOOM_FILTER_COLUMN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("column_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TColumnType.class)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregation_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TAggregationType.class)));
    tmpMap.put(_Fields.IS_KEY, new org.apache.thrift.meta_data.FieldMetaData("is_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ALLOW_NULL, new org.apache.thrift.meta_data.FieldMetaData("is_allow_null", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("default_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BLOOM_FILTER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("is_bloom_filter_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
  }

  public TColumn(
    String column_name,
    com.baidu.palo.thrift.TColumnType column_type)
  {
    this();
    this.column_name = column_name;
    this.column_type = column_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumn(TColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumn_name()) {
      this.column_name = other.column_name;
    }
    if (other.isSetColumn_type()) {
      this.column_type = new com.baidu.palo.thrift.TColumnType(other.column_type);
    }
    if (other.isSetAggregation_type()) {
      this.aggregation_type = other.aggregation_type;
    }
    this.is_key = other.is_key;
    this.is_allow_null = other.is_allow_null;
    if (other.isSetDefault_value()) {
      this.default_value = other.default_value;
    }
    this.is_bloom_filter_column = other.is_bloom_filter_column;
  }

  public TColumn deepCopy() {
    return new TColumn(this);
  }

  @Override
  public void clear() {
    this.column_name = null;
    this.column_type = null;
    this.aggregation_type = null;
    setIs_keyIsSet(false);
    this.is_key = false;
    setIs_allow_nullIsSet(false);
    this.is_allow_null = false;
    this.default_value = null;
    setIs_bloom_filter_columnIsSet(false);
    this.is_bloom_filter_column = false;
  }

  public String getColumn_name() {
    return this.column_name;
  }

  public TColumn setColumn_name(String column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  public com.baidu.palo.thrift.TColumnType getColumn_type() {
    return this.column_type;
  }

  public TColumn setColumn_type(com.baidu.palo.thrift.TColumnType column_type) {
    this.column_type = column_type;
    return this;
  }

  public void unsetColumn_type() {
    this.column_type = null;
  }

  /** Returns true if field column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_type() {
    return this.column_type != null;
  }

  public void setColumn_typeIsSet(boolean value) {
    if (!value) {
      this.column_type = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TAggregationType
   */
  public com.baidu.palo.thrift.TAggregationType getAggregation_type() {
    return this.aggregation_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TAggregationType
   */
  public TColumn setAggregation_type(com.baidu.palo.thrift.TAggregationType aggregation_type) {
    this.aggregation_type = aggregation_type;
    return this;
  }

  public void unsetAggregation_type() {
    this.aggregation_type = null;
  }

  /** Returns true if field aggregation_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregation_type() {
    return this.aggregation_type != null;
  }

  public void setAggregation_typeIsSet(boolean value) {
    if (!value) {
      this.aggregation_type = null;
    }
  }

  public boolean isIs_key() {
    return this.is_key;
  }

  public TColumn setIs_key(boolean is_key) {
    this.is_key = is_key;
    setIs_keyIsSet(true);
    return this;
  }

  public void unsetIs_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  /** Returns true if field is_key is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_key() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  public void setIs_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_KEY_ISSET_ID, value);
  }

  public boolean isIs_allow_null() {
    return this.is_allow_null;
  }

  public TColumn setIs_allow_null(boolean is_allow_null) {
    this.is_allow_null = is_allow_null;
    setIs_allow_nullIsSet(true);
    return this;
  }

  public void unsetIs_allow_null() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID);
  }

  /** Returns true if field is_allow_null is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_allow_null() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID);
  }

  public void setIs_allow_nullIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID, value);
  }

  public String getDefault_value() {
    return this.default_value;
  }

  public TColumn setDefault_value(String default_value) {
    this.default_value = default_value;
    return this;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  /** Returns true if field default_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean value) {
    if (!value) {
      this.default_value = null;
    }
  }

  public boolean isIs_bloom_filter_column() {
    return this.is_bloom_filter_column;
  }

  public TColumn setIs_bloom_filter_column(boolean is_bloom_filter_column) {
    this.is_bloom_filter_column = is_bloom_filter_column;
    setIs_bloom_filter_columnIsSet(true);
    return this;
  }

  public void unsetIs_bloom_filter_column() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID);
  }

  /** Returns true if field is_bloom_filter_column is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_bloom_filter_column() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID);
  }

  public void setIs_bloom_filter_columnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumn_type();
      } else {
        setColumn_type((com.baidu.palo.thrift.TColumnType)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregation_type();
      } else {
        setAggregation_type((com.baidu.palo.thrift.TAggregationType)value);
      }
      break;

    case IS_KEY:
      if (value == null) {
        unsetIs_key();
      } else {
        setIs_key((Boolean)value);
      }
      break;

    case IS_ALLOW_NULL:
      if (value == null) {
        unsetIs_allow_null();
      } else {
        setIs_allow_null((Boolean)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((String)value);
      }
      break;

    case IS_BLOOM_FILTER_COLUMN:
      if (value == null) {
        unsetIs_bloom_filter_column();
      } else {
        setIs_bloom_filter_column((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumn_name();

    case COLUMN_TYPE:
      return getColumn_type();

    case AGGREGATION_TYPE:
      return getAggregation_type();

    case IS_KEY:
      return isIs_key();

    case IS_ALLOW_NULL:
      return isIs_allow_null();

    case DEFAULT_VALUE:
      return getDefault_value();

    case IS_BLOOM_FILTER_COLUMN:
      return isIs_bloom_filter_column();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumn_name();
    case COLUMN_TYPE:
      return isSetColumn_type();
    case AGGREGATION_TYPE:
      return isSetAggregation_type();
    case IS_KEY:
      return isSetIs_key();
    case IS_ALLOW_NULL:
      return isSetIs_allow_null();
    case DEFAULT_VALUE:
      return isSetDefault_value();
    case IS_BLOOM_FILTER_COLUMN:
      return isSetIs_bloom_filter_column();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumn)
      return this.equals((TColumn)that);
    return false;
  }

  public boolean equals(TColumn that) {
    if (that == null)
      return false;

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!this.column_name.equals(that.column_name))
        return false;
    }

    boolean this_present_column_type = true && this.isSetColumn_type();
    boolean that_present_column_type = true && that.isSetColumn_type();
    if (this_present_column_type || that_present_column_type) {
      if (!(this_present_column_type && that_present_column_type))
        return false;
      if (!this.column_type.equals(that.column_type))
        return false;
    }

    boolean this_present_aggregation_type = true && this.isSetAggregation_type();
    boolean that_present_aggregation_type = true && that.isSetAggregation_type();
    if (this_present_aggregation_type || that_present_aggregation_type) {
      if (!(this_present_aggregation_type && that_present_aggregation_type))
        return false;
      if (!this.aggregation_type.equals(that.aggregation_type))
        return false;
    }

    boolean this_present_is_key = true && this.isSetIs_key();
    boolean that_present_is_key = true && that.isSetIs_key();
    if (this_present_is_key || that_present_is_key) {
      if (!(this_present_is_key && that_present_is_key))
        return false;
      if (this.is_key != that.is_key)
        return false;
    }

    boolean this_present_is_allow_null = true && this.isSetIs_allow_null();
    boolean that_present_is_allow_null = true && that.isSetIs_allow_null();
    if (this_present_is_allow_null || that_present_is_allow_null) {
      if (!(this_present_is_allow_null && that_present_is_allow_null))
        return false;
      if (this.is_allow_null != that.is_allow_null)
        return false;
    }

    boolean this_present_default_value = true && this.isSetDefault_value();
    boolean that_present_default_value = true && that.isSetDefault_value();
    if (this_present_default_value || that_present_default_value) {
      if (!(this_present_default_value && that_present_default_value))
        return false;
      if (!this.default_value.equals(that.default_value))
        return false;
    }

    boolean this_present_is_bloom_filter_column = true && this.isSetIs_bloom_filter_column();
    boolean that_present_is_bloom_filter_column = true && that.isSetIs_bloom_filter_column();
    if (this_present_is_bloom_filter_column || that_present_is_bloom_filter_column) {
      if (!(this_present_is_bloom_filter_column && that_present_is_bloom_filter_column))
        return false;
      if (this.is_bloom_filter_column != that.is_bloom_filter_column)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_column_name = true && (isSetColumn_name());
    list.add(present_column_name);
    if (present_column_name)
      list.add(column_name);

    boolean present_column_type = true && (isSetColumn_type());
    list.add(present_column_type);
    if (present_column_type)
      list.add(column_type);

    boolean present_aggregation_type = true && (isSetAggregation_type());
    list.add(present_aggregation_type);
    if (present_aggregation_type)
      list.add(aggregation_type.getValue());

    boolean present_is_key = true && (isSetIs_key());
    list.add(present_is_key);
    if (present_is_key)
      list.add(is_key);

    boolean present_is_allow_null = true && (isSetIs_allow_null());
    list.add(present_is_allow_null);
    if (present_is_allow_null)
      list.add(is_allow_null);

    boolean present_default_value = true && (isSetDefault_value());
    list.add(present_default_value);
    if (present_default_value)
      list.add(default_value);

    boolean present_is_bloom_filter_column = true && (isSetIs_bloom_filter_column());
    list.add(present_is_bloom_filter_column);
    if (present_is_bloom_filter_column)
      list.add(is_bloom_filter_column);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(other.isSetColumn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_type()).compareTo(other.isSetColumn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_type, other.column_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregation_type()).compareTo(other.isSetAggregation_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregation_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregation_type, other.aggregation_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_key()).compareTo(other.isSetIs_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_key, other.is_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_allow_null()).compareTo(other.isSetIs_allow_null());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_allow_null()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_allow_null, other.is_allow_null);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_value()).compareTo(other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value, other.default_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_bloom_filter_column()).compareTo(other.isSetIs_bloom_filter_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_bloom_filter_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_bloom_filter_column, other.is_bloom_filter_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumn(");
    boolean first = true;

    sb.append("column_name:");
    if (this.column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_type:");
    if (this.column_type == null) {
      sb.append("null");
    } else {
      sb.append(this.column_type);
    }
    first = false;
    if (isSetAggregation_type()) {
      if (!first) sb.append(", ");
      sb.append("aggregation_type:");
      if (this.aggregation_type == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregation_type);
      }
      first = false;
    }
    if (isSetIs_key()) {
      if (!first) sb.append(", ");
      sb.append("is_key:");
      sb.append(this.is_key);
      first = false;
    }
    if (isSetIs_allow_null()) {
      if (!first) sb.append(", ");
      sb.append("is_allow_null:");
      sb.append(this.is_allow_null);
      first = false;
    }
    if (isSetDefault_value()) {
      if (!first) sb.append(", ");
      sb.append("default_value:");
      if (this.default_value == null) {
        sb.append("null");
      } else {
        sb.append(this.default_value);
      }
      first = false;
    }
    if (isSetIs_bloom_filter_column()) {
      if (!first) sb.append(", ");
      sb.append("is_bloom_filter_column:");
      sb.append(this.is_bloom_filter_column);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
    }
    if (column_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (column_type != null) {
      column_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStandardSchemeFactory implements SchemeFactory {
    public TColumnStandardScheme getScheme() {
      return new TColumnStandardScheme();
    }
  }

  private static class TColumnStandardScheme extends StandardScheme<TColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_name = iprot.readString();
              struct.setColumn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_type = new com.baidu.palo.thrift.TColumnType();
              struct.column_type.read(iprot);
              struct.setColumn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aggregation_type = com.baidu.palo.thrift.TAggregationType.findByValue(iprot.readI32());
              struct.setAggregation_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_key = iprot.readBool();
              struct.setIs_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ALLOW_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_allow_null = iprot.readBool();
              struct.setIs_allow_nullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_value = iprot.readString();
              struct.setDefault_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_BLOOM_FILTER_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_bloom_filter_column = iprot.readBool();
              struct.setIs_bloom_filter_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_name != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.column_name);
        oprot.writeFieldEnd();
      }
      if (struct.column_type != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        struct.column_type.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.aggregation_type != null) {
        if (struct.isSetAggregation_type()) {
          oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.aggregation_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_key()) {
        oprot.writeFieldBegin(IS_KEY_FIELD_DESC);
        oprot.writeBool(struct.is_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_allow_null()) {
        oprot.writeFieldBegin(IS_ALLOW_NULL_FIELD_DESC);
        oprot.writeBool(struct.is_allow_null);
        oprot.writeFieldEnd();
      }
      if (struct.default_value != null) {
        if (struct.isSetDefault_value()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeString(struct.default_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_bloom_filter_column()) {
        oprot.writeFieldBegin(IS_BLOOM_FILTER_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.is_bloom_filter_column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnTupleSchemeFactory implements SchemeFactory {
    public TColumnTupleScheme getScheme() {
      return new TColumnTupleScheme();
    }
  }

  private static class TColumnTupleScheme extends TupleScheme<TColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.column_name);
      struct.column_type.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetAggregation_type()) {
        optionals.set(0);
      }
      if (struct.isSetIs_key()) {
        optionals.set(1);
      }
      if (struct.isSetIs_allow_null()) {
        optionals.set(2);
      }
      if (struct.isSetDefault_value()) {
        optionals.set(3);
      }
      if (struct.isSetIs_bloom_filter_column()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAggregation_type()) {
        oprot.writeI32(struct.aggregation_type.getValue());
      }
      if (struct.isSetIs_key()) {
        oprot.writeBool(struct.is_key);
      }
      if (struct.isSetIs_allow_null()) {
        oprot.writeBool(struct.is_allow_null);
      }
      if (struct.isSetDefault_value()) {
        oprot.writeString(struct.default_value);
      }
      if (struct.isSetIs_bloom_filter_column()) {
        oprot.writeBool(struct.is_bloom_filter_column);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.column_name = iprot.readString();
      struct.setColumn_nameIsSet(true);
      struct.column_type = new com.baidu.palo.thrift.TColumnType();
      struct.column_type.read(iprot);
      struct.setColumn_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.aggregation_type = com.baidu.palo.thrift.TAggregationType.findByValue(iprot.readI32());
        struct.setAggregation_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_key = iprot.readBool();
        struct.setIs_keyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_allow_null = iprot.readBool();
        struct.setIs_allow_nullIsSet(true);
      }
      if (incoming.get(3)) {
        struct.default_value = iprot.readString();
        struct.setDefault_valueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_bloom_filter_column = iprot.readBool();
        struct.setIs_bloom_filter_columnIsSet(true);
      }
    }
  }

}

