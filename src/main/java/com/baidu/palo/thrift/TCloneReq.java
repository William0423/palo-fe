/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class TCloneReq implements org.apache.thrift.TBase<TCloneReq, TCloneReq._Fields>, java.io.Serializable, Cloneable, Comparable<TCloneReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCloneReq");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_BACKENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("src_backends", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMMITTED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("committed_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COMMITTED_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("committed_version_hash", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCloneReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCloneReqTupleSchemeFactory());
  }

  public long tablet_id; // required
  public int schema_hash; // required
  public List<com.baidu.palo.thrift.TBackend> src_backends; // required
  /**
   * 
   * @see com.baidu.palo.thrift.TStorageMedium
   */
  public com.baidu.palo.thrift.TStorageMedium storage_medium; // optional
  public long committed_version; // optional
  public long committed_version_hash; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    SRC_BACKENDS((short)3, "src_backends"),
    /**
     * 
     * @see com.baidu.palo.thrift.TStorageMedium
     */
    STORAGE_MEDIUM((short)4, "storage_medium"),
    COMMITTED_VERSION((short)5, "committed_version"),
    COMMITTED_VERSION_HASH((short)6, "committed_version_hash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // SRC_BACKENDS
          return SRC_BACKENDS;
        case 4: // STORAGE_MEDIUM
          return STORAGE_MEDIUM;
        case 5: // COMMITTED_VERSION
          return COMMITTED_VERSION;
        case 6: // COMMITTED_VERSION_HASH
          return COMMITTED_VERSION_HASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __COMMITTED_VERSION_ISSET_ID = 2;
  private static final int __COMMITTED_VERSION_HASH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STORAGE_MEDIUM,_Fields.COMMITTED_VERSION,_Fields.COMMITTED_VERSION_HASH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.SRC_BACKENDS, new org.apache.thrift.meta_data.FieldMetaData("src_backends", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.baidu.palo.thrift.TBackend.class))));
    tmpMap.put(_Fields.STORAGE_MEDIUM, new org.apache.thrift.meta_data.FieldMetaData("storage_medium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TStorageMedium.class)));
    tmpMap.put(_Fields.COMMITTED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("committed_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.COMMITTED_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("committed_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCloneReq.class, metaDataMap);
  }

  public TCloneReq() {
  }

  public TCloneReq(
    long tablet_id,
    int schema_hash,
    List<com.baidu.palo.thrift.TBackend> src_backends)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.src_backends = src_backends;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCloneReq(TCloneReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    if (other.isSetSrc_backends()) {
      List<com.baidu.palo.thrift.TBackend> __this__src_backends = new ArrayList<com.baidu.palo.thrift.TBackend>(other.src_backends.size());
      for (com.baidu.palo.thrift.TBackend other_element : other.src_backends) {
        __this__src_backends.add(new com.baidu.palo.thrift.TBackend(other_element));
      }
      this.src_backends = __this__src_backends;
    }
    if (other.isSetStorage_medium()) {
      this.storage_medium = other.storage_medium;
    }
    this.committed_version = other.committed_version;
    this.committed_version_hash = other.committed_version_hash;
  }

  public TCloneReq deepCopy() {
    return new TCloneReq(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    this.src_backends = null;
    this.storage_medium = null;
    setCommitted_versionIsSet(false);
    this.committed_version = 0;
    setCommitted_version_hashIsSet(false);
    this.committed_version_hash = 0;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TCloneReq setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TCloneReq setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public int getSrc_backendsSize() {
    return (this.src_backends == null) ? 0 : this.src_backends.size();
  }

  public java.util.Iterator<com.baidu.palo.thrift.TBackend> getSrc_backendsIterator() {
    return (this.src_backends == null) ? null : this.src_backends.iterator();
  }

  public void addToSrc_backends(com.baidu.palo.thrift.TBackend elem) {
    if (this.src_backends == null) {
      this.src_backends = new ArrayList<com.baidu.palo.thrift.TBackend>();
    }
    this.src_backends.add(elem);
  }

  public List<com.baidu.palo.thrift.TBackend> getSrc_backends() {
    return this.src_backends;
  }

  public TCloneReq setSrc_backends(List<com.baidu.palo.thrift.TBackend> src_backends) {
    this.src_backends = src_backends;
    return this;
  }

  public void unsetSrc_backends() {
    this.src_backends = null;
  }

  /** Returns true if field src_backends is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_backends() {
    return this.src_backends != null;
  }

  public void setSrc_backendsIsSet(boolean value) {
    if (!value) {
      this.src_backends = null;
    }
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TStorageMedium
   */
  public com.baidu.palo.thrift.TStorageMedium getStorage_medium() {
    return this.storage_medium;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TStorageMedium
   */
  public TCloneReq setStorage_medium(com.baidu.palo.thrift.TStorageMedium storage_medium) {
    this.storage_medium = storage_medium;
    return this;
  }

  public void unsetStorage_medium() {
    this.storage_medium = null;
  }

  /** Returns true if field storage_medium is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium() {
    return this.storage_medium != null;
  }

  public void setStorage_mediumIsSet(boolean value) {
    if (!value) {
      this.storage_medium = null;
    }
  }

  public long getCommitted_version() {
    return this.committed_version;
  }

  public TCloneReq setCommitted_version(long committed_version) {
    this.committed_version = committed_version;
    setCommitted_versionIsSet(true);
    return this;
  }

  public void unsetCommitted_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITTED_VERSION_ISSET_ID);
  }

  /** Returns true if field committed_version is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitted_version() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITTED_VERSION_ISSET_ID);
  }

  public void setCommitted_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITTED_VERSION_ISSET_ID, value);
  }

  public long getCommitted_version_hash() {
    return this.committed_version_hash;
  }

  public TCloneReq setCommitted_version_hash(long committed_version_hash) {
    this.committed_version_hash = committed_version_hash;
    setCommitted_version_hashIsSet(true);
    return this;
  }

  public void unsetCommitted_version_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITTED_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field committed_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitted_version_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITTED_VERSION_HASH_ISSET_ID);
  }

  public void setCommitted_version_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITTED_VERSION_HASH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((Integer)value);
      }
      break;

    case SRC_BACKENDS:
      if (value == null) {
        unsetSrc_backends();
      } else {
        setSrc_backends((List<com.baidu.palo.thrift.TBackend>)value);
      }
      break;

    case STORAGE_MEDIUM:
      if (value == null) {
        unsetStorage_medium();
      } else {
        setStorage_medium((com.baidu.palo.thrift.TStorageMedium)value);
      }
      break;

    case COMMITTED_VERSION:
      if (value == null) {
        unsetCommitted_version();
      } else {
        setCommitted_version((Long)value);
      }
      break;

    case COMMITTED_VERSION_HASH:
      if (value == null) {
        unsetCommitted_version_hash();
      } else {
        setCommitted_version_hash((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case SRC_BACKENDS:
      return getSrc_backends();

    case STORAGE_MEDIUM:
      return getStorage_medium();

    case COMMITTED_VERSION:
      return getCommitted_version();

    case COMMITTED_VERSION_HASH:
      return getCommitted_version_hash();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case SRC_BACKENDS:
      return isSetSrc_backends();
    case STORAGE_MEDIUM:
      return isSetStorage_medium();
    case COMMITTED_VERSION:
      return isSetCommitted_version();
    case COMMITTED_VERSION_HASH:
      return isSetCommitted_version_hash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCloneReq)
      return this.equals((TCloneReq)that);
    return false;
  }

  public boolean equals(TCloneReq that) {
    if (that == null)
      return false;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_src_backends = true && this.isSetSrc_backends();
    boolean that_present_src_backends = true && that.isSetSrc_backends();
    if (this_present_src_backends || that_present_src_backends) {
      if (!(this_present_src_backends && that_present_src_backends))
        return false;
      if (!this.src_backends.equals(that.src_backends))
        return false;
    }

    boolean this_present_storage_medium = true && this.isSetStorage_medium();
    boolean that_present_storage_medium = true && that.isSetStorage_medium();
    if (this_present_storage_medium || that_present_storage_medium) {
      if (!(this_present_storage_medium && that_present_storage_medium))
        return false;
      if (!this.storage_medium.equals(that.storage_medium))
        return false;
    }

    boolean this_present_committed_version = true && this.isSetCommitted_version();
    boolean that_present_committed_version = true && that.isSetCommitted_version();
    if (this_present_committed_version || that_present_committed_version) {
      if (!(this_present_committed_version && that_present_committed_version))
        return false;
      if (this.committed_version != that.committed_version)
        return false;
    }

    boolean this_present_committed_version_hash = true && this.isSetCommitted_version_hash();
    boolean that_present_committed_version_hash = true && that.isSetCommitted_version_hash();
    if (this_present_committed_version_hash || that_present_committed_version_hash) {
      if (!(this_present_committed_version_hash && that_present_committed_version_hash))
        return false;
      if (this.committed_version_hash != that.committed_version_hash)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tablet_id = true;
    list.add(present_tablet_id);
    if (present_tablet_id)
      list.add(tablet_id);

    boolean present_schema_hash = true;
    list.add(present_schema_hash);
    if (present_schema_hash)
      list.add(schema_hash);

    boolean present_src_backends = true && (isSetSrc_backends());
    list.add(present_src_backends);
    if (present_src_backends)
      list.add(src_backends);

    boolean present_storage_medium = true && (isSetStorage_medium());
    list.add(present_storage_medium);
    if (present_storage_medium)
      list.add(storage_medium.getValue());

    boolean present_committed_version = true && (isSetCommitted_version());
    list.add(present_committed_version);
    if (present_committed_version)
      list.add(committed_version);

    boolean present_committed_version_hash = true && (isSetCommitted_version_hash());
    list.add(present_committed_version_hash);
    if (present_committed_version_hash)
      list.add(committed_version_hash);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCloneReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTablet_id()).compareTo(other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_hash()).compareTo(other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_backends()).compareTo(other.isSetSrc_backends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_backends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_backends, other.src_backends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorage_medium()).compareTo(other.isSetStorage_medium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium, other.storage_medium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitted_version()).compareTo(other.isSetCommitted_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitted_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committed_version, other.committed_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitted_version_hash()).compareTo(other.isSetCommitted_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitted_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committed_version_hash, other.committed_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCloneReq(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_backends:");
    if (this.src_backends == null) {
      sb.append("null");
    } else {
      sb.append(this.src_backends);
    }
    first = false;
    if (isSetStorage_medium()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium:");
      if (this.storage_medium == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium);
      }
      first = false;
    }
    if (isSetCommitted_version()) {
      if (!first) sb.append(", ");
      sb.append("committed_version:");
      sb.append(this.committed_version);
      first = false;
    }
    if (isSetCommitted_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("committed_version_hash:");
      sb.append(this.committed_version_hash);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    if (src_backends == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_backends' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCloneReqStandardSchemeFactory implements SchemeFactory {
    public TCloneReqStandardScheme getScheme() {
      return new TCloneReqStandardScheme();
    }
  }

  private static class TCloneReqStandardScheme extends StandardScheme<TCloneReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCloneReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_BACKENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.src_backends = new ArrayList<com.baidu.palo.thrift.TBackend>(_list16.size);
                com.baidu.palo.thrift.TBackend _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new com.baidu.palo.thrift.TBackend();
                  _elem17.read(iprot);
                  struct.src_backends.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setSrc_backendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE_MEDIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_medium = com.baidu.palo.thrift.TStorageMedium.findByValue(iprot.readI32());
              struct.setStorage_mediumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMITTED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.committed_version = iprot.readI64();
              struct.setCommitted_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMITTED_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.committed_version_hash = iprot.readI64();
              struct.setCommitted_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCloneReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      if (struct.src_backends != null) {
        oprot.writeFieldBegin(SRC_BACKENDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.src_backends.size()));
          for (com.baidu.palo.thrift.TBackend _iter19 : struct.src_backends)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.storage_medium != null) {
        if (struct.isSetStorage_medium()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_FIELD_DESC);
          oprot.writeI32(struct.storage_medium.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommitted_version()) {
        oprot.writeFieldBegin(COMMITTED_VERSION_FIELD_DESC);
        oprot.writeI64(struct.committed_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommitted_version_hash()) {
        oprot.writeFieldBegin(COMMITTED_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.committed_version_hash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCloneReqTupleSchemeFactory implements SchemeFactory {
    public TCloneReqTupleScheme getScheme() {
      return new TCloneReqTupleScheme();
    }
  }

  private static class TCloneReqTupleScheme extends TupleScheme<TCloneReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCloneReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      {
        oprot.writeI32(struct.src_backends.size());
        for (com.baidu.palo.thrift.TBackend _iter20 : struct.src_backends)
        {
          _iter20.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetStorage_medium()) {
        optionals.set(0);
      }
      if (struct.isSetCommitted_version()) {
        optionals.set(1);
      }
      if (struct.isSetCommitted_version_hash()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStorage_medium()) {
        oprot.writeI32(struct.storage_medium.getValue());
      }
      if (struct.isSetCommitted_version()) {
        oprot.writeI64(struct.committed_version);
      }
      if (struct.isSetCommitted_version_hash()) {
        oprot.writeI64(struct.committed_version_hash);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCloneReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.src_backends = new ArrayList<com.baidu.palo.thrift.TBackend>(_list21.size);
        com.baidu.palo.thrift.TBackend _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new com.baidu.palo.thrift.TBackend();
          _elem22.read(iprot);
          struct.src_backends.add(_elem22);
        }
      }
      struct.setSrc_backendsIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.storage_medium = com.baidu.palo.thrift.TStorageMedium.findByValue(iprot.readI32());
        struct.setStorage_mediumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.committed_version = iprot.readI64();
        struct.setCommitted_versionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.committed_version_hash = iprot.readI64();
        struct.setCommitted_version_hashIsSet(true);
      }
    }
  }

}

