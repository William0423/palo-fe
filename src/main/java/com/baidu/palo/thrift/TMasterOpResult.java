/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class TMasterOpResult implements org.apache.thrift.TBase<TMasterOpResult, TMasterOpResult._Fields>, java.io.Serializable, Cloneable, Comparable<TMasterOpResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMasterOpResult");

  private static final org.apache.thrift.protocol.TField MAX_JOURNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("maxJournalId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("packet", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSet", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMasterOpResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMasterOpResultTupleSchemeFactory());
  }

  public long maxJournalId; // required
  public ByteBuffer packet; // required
  public TShowResultSet resultSet; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_JOURNAL_ID((short)1, "maxJournalId"),
    PACKET((short)2, "packet"),
    RESULT_SET((short)3, "resultSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_JOURNAL_ID
          return MAX_JOURNAL_ID;
        case 2: // PACKET
          return PACKET;
        case 3: // RESULT_SET
          return RESULT_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXJOURNALID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESULT_SET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_JOURNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("maxJournalId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PACKET, new org.apache.thrift.meta_data.FieldMetaData("packet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RESULT_SET, new org.apache.thrift.meta_data.FieldMetaData("resultSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowResultSet.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMasterOpResult.class, metaDataMap);
  }

  public TMasterOpResult() {
  }

  public TMasterOpResult(
    long maxJournalId,
    ByteBuffer packet)
  {
    this();
    this.maxJournalId = maxJournalId;
    setMaxJournalIdIsSet(true);
    this.packet = org.apache.thrift.TBaseHelper.copyBinary(packet);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMasterOpResult(TMasterOpResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxJournalId = other.maxJournalId;
    if (other.isSetPacket()) {
      this.packet = org.apache.thrift.TBaseHelper.copyBinary(other.packet);
    }
    if (other.isSetResultSet()) {
      this.resultSet = new TShowResultSet(other.resultSet);
    }
  }

  public TMasterOpResult deepCopy() {
    return new TMasterOpResult(this);
  }

  @Override
  public void clear() {
    setMaxJournalIdIsSet(false);
    this.maxJournalId = 0;
    this.packet = null;
    this.resultSet = null;
  }

  public long getMaxJournalId() {
    return this.maxJournalId;
  }

  public TMasterOpResult setMaxJournalId(long maxJournalId) {
    this.maxJournalId = maxJournalId;
    setMaxJournalIdIsSet(true);
    return this;
  }

  public void unsetMaxJournalId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXJOURNALID_ISSET_ID);
  }

  /** Returns true if field maxJournalId is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxJournalId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXJOURNALID_ISSET_ID);
  }

  public void setMaxJournalIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXJOURNALID_ISSET_ID, value);
  }

  public byte[] getPacket() {
    setPacket(org.apache.thrift.TBaseHelper.rightSize(packet));
    return packet == null ? null : packet.array();
  }

  public ByteBuffer bufferForPacket() {
    return org.apache.thrift.TBaseHelper.copyBinary(packet);
  }

  public TMasterOpResult setPacket(byte[] packet) {
    this.packet = packet == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(packet, packet.length));
    return this;
  }

  public TMasterOpResult setPacket(ByteBuffer packet) {
    this.packet = org.apache.thrift.TBaseHelper.copyBinary(packet);
    return this;
  }

  public void unsetPacket() {
    this.packet = null;
  }

  /** Returns true if field packet is set (has been assigned a value) and false otherwise */
  public boolean isSetPacket() {
    return this.packet != null;
  }

  public void setPacketIsSet(boolean value) {
    if (!value) {
      this.packet = null;
    }
  }

  public TShowResultSet getResultSet() {
    return this.resultSet;
  }

  public TMasterOpResult setResultSet(TShowResultSet resultSet) {
    this.resultSet = resultSet;
    return this;
  }

  public void unsetResultSet() {
    this.resultSet = null;
  }

  /** Returns true if field resultSet is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSet() {
    return this.resultSet != null;
  }

  public void setResultSetIsSet(boolean value) {
    if (!value) {
      this.resultSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_JOURNAL_ID:
      if (value == null) {
        unsetMaxJournalId();
      } else {
        setMaxJournalId((Long)value);
      }
      break;

    case PACKET:
      if (value == null) {
        unsetPacket();
      } else {
        setPacket((ByteBuffer)value);
      }
      break;

    case RESULT_SET:
      if (value == null) {
        unsetResultSet();
      } else {
        setResultSet((TShowResultSet)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_JOURNAL_ID:
      return getMaxJournalId();

    case PACKET:
      return getPacket();

    case RESULT_SET:
      return getResultSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_JOURNAL_ID:
      return isSetMaxJournalId();
    case PACKET:
      return isSetPacket();
    case RESULT_SET:
      return isSetResultSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMasterOpResult)
      return this.equals((TMasterOpResult)that);
    return false;
  }

  public boolean equals(TMasterOpResult that) {
    if (that == null)
      return false;

    boolean this_present_maxJournalId = true;
    boolean that_present_maxJournalId = true;
    if (this_present_maxJournalId || that_present_maxJournalId) {
      if (!(this_present_maxJournalId && that_present_maxJournalId))
        return false;
      if (this.maxJournalId != that.maxJournalId)
        return false;
    }

    boolean this_present_packet = true && this.isSetPacket();
    boolean that_present_packet = true && that.isSetPacket();
    if (this_present_packet || that_present_packet) {
      if (!(this_present_packet && that_present_packet))
        return false;
      if (!this.packet.equals(that.packet))
        return false;
    }

    boolean this_present_resultSet = true && this.isSetResultSet();
    boolean that_present_resultSet = true && that.isSetResultSet();
    if (this_present_resultSet || that_present_resultSet) {
      if (!(this_present_resultSet && that_present_resultSet))
        return false;
      if (!this.resultSet.equals(that.resultSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_maxJournalId = true;
    list.add(present_maxJournalId);
    if (present_maxJournalId)
      list.add(maxJournalId);

    boolean present_packet = true && (isSetPacket());
    list.add(present_packet);
    if (present_packet)
      list.add(packet);

    boolean present_resultSet = true && (isSetResultSet());
    list.add(present_resultSet);
    if (present_resultSet)
      list.add(resultSet);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMasterOpResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMaxJournalId()).compareTo(other.isSetMaxJournalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxJournalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxJournalId, other.maxJournalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacket()).compareTo(other.isSetPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packet, other.packet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultSet()).compareTo(other.isSetResultSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSet, other.resultSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMasterOpResult(");
    boolean first = true;

    sb.append("maxJournalId:");
    sb.append(this.maxJournalId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packet:");
    if (this.packet == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.packet, sb);
    }
    first = false;
    if (isSetResultSet()) {
      if (!first) sb.append(", ");
      sb.append("resultSet:");
      if (this.resultSet == null) {
        sb.append("null");
      } else {
        sb.append(this.resultSet);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'maxJournalId' because it's a primitive and you chose the non-beans generator.
    if (packet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'packet' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resultSet != null) {
      resultSet.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMasterOpResultStandardSchemeFactory implements SchemeFactory {
    public TMasterOpResultStandardScheme getScheme() {
      return new TMasterOpResultStandardScheme();
    }
  }

  private static class TMasterOpResultStandardScheme extends StandardScheme<TMasterOpResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMasterOpResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_JOURNAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxJournalId = iprot.readI64();
              struct.setMaxJournalIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packet = iprot.readBinary();
              struct.setPacketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultSet = new TShowResultSet();
              struct.resultSet.read(iprot);
              struct.setResultSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxJournalId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxJournalId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMasterOpResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_JOURNAL_ID_FIELD_DESC);
      oprot.writeI64(struct.maxJournalId);
      oprot.writeFieldEnd();
      if (struct.packet != null) {
        oprot.writeFieldBegin(PACKET_FIELD_DESC);
        oprot.writeBinary(struct.packet);
        oprot.writeFieldEnd();
      }
      if (struct.resultSet != null) {
        if (struct.isSetResultSet()) {
          oprot.writeFieldBegin(RESULT_SET_FIELD_DESC);
          struct.resultSet.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMasterOpResultTupleSchemeFactory implements SchemeFactory {
    public TMasterOpResultTupleScheme getScheme() {
      return new TMasterOpResultTupleScheme();
    }
  }

  private static class TMasterOpResultTupleScheme extends TupleScheme<TMasterOpResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMasterOpResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.maxJournalId);
      oprot.writeBinary(struct.packet);
      BitSet optionals = new BitSet();
      if (struct.isSetResultSet()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResultSet()) {
        struct.resultSet.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMasterOpResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.maxJournalId = iprot.readI64();
      struct.setMaxJournalIdIsSet(true);
      struct.packet = iprot.readBinary();
      struct.setPacketIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.resultSet = new TShowResultSet();
        struct.resultSet.read(iprot);
        struct.setResultSetIsSet(true);
      }
    }
  }

}

