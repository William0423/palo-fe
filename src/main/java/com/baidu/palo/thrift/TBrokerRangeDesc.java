/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.palo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-01")
public class TBrokerRangeDesc implements org.apache.thrift.TBase<TBrokerRangeDesc, TBrokerRangeDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TBrokerRangeDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBrokerRangeDesc");

  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("format_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPLITTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("splittable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("start_offset", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBrokerRangeDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBrokerRangeDescTupleSchemeFactory());
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TFileType
   */
  public com.baidu.palo.thrift.TFileType file_type; // required
  /**
   * 
   * @see TFileFormatType
   */
  public TFileFormatType format_type; // required
  public boolean splittable; // required
  public String path; // required
  public long start_offset; // required
  public long size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.baidu.palo.thrift.TFileType
     */
    FILE_TYPE((short)1, "file_type"),
    /**
     * 
     * @see TFileFormatType
     */
    FORMAT_TYPE((short)2, "format_type"),
    SPLITTABLE((short)3, "splittable"),
    PATH((short)4, "path"),
    START_OFFSET((short)5, "start_offset"),
    SIZE((short)6, "size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_TYPE
          return FILE_TYPE;
        case 2: // FORMAT_TYPE
          return FORMAT_TYPE;
        case 3: // SPLITTABLE
          return SPLITTABLE;
        case 4: // PATH
          return PATH;
        case 5: // START_OFFSET
          return START_OFFSET;
        case 6: // SIZE
          return SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPLITTABLE_ISSET_ID = 0;
  private static final int __START_OFFSET_ISSET_ID = 1;
  private static final int __SIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("file_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.baidu.palo.thrift.TFileType.class)));
    tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("format_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileFormatType.class)));
    tmpMap.put(_Fields.SPLITTABLE, new org.apache.thrift.meta_data.FieldMetaData("splittable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("start_offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBrokerRangeDesc.class, metaDataMap);
  }

  public TBrokerRangeDesc() {
  }

  public TBrokerRangeDesc(
    com.baidu.palo.thrift.TFileType file_type,
    TFileFormatType format_type,
    boolean splittable,
    String path,
    long start_offset,
    long size)
  {
    this();
    this.file_type = file_type;
    this.format_type = format_type;
    this.splittable = splittable;
    setSplittableIsSet(true);
    this.path = path;
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBrokerRangeDesc(TBrokerRangeDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_type()) {
      this.file_type = other.file_type;
    }
    if (other.isSetFormat_type()) {
      this.format_type = other.format_type;
    }
    this.splittable = other.splittable;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.start_offset = other.start_offset;
    this.size = other.size;
  }

  public TBrokerRangeDesc deepCopy() {
    return new TBrokerRangeDesc(this);
  }

  @Override
  public void clear() {
    this.file_type = null;
    this.format_type = null;
    setSplittableIsSet(false);
    this.splittable = false;
    this.path = null;
    setStart_offsetIsSet(false);
    this.start_offset = 0;
    setSizeIsSet(false);
    this.size = 0;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TFileType
   */
  public com.baidu.palo.thrift.TFileType getFile_type() {
    return this.file_type;
  }

  /**
   * 
   * @see com.baidu.palo.thrift.TFileType
   */
  public TBrokerRangeDesc setFile_type(com.baidu.palo.thrift.TFileType file_type) {
    this.file_type = file_type;
    return this;
  }

  public void unsetFile_type() {
    this.file_type = null;
  }

  /** Returns true if field file_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_type() {
    return this.file_type != null;
  }

  public void setFile_typeIsSet(boolean value) {
    if (!value) {
      this.file_type = null;
    }
  }

  /**
   * 
   * @see TFileFormatType
   */
  public TFileFormatType getFormat_type() {
    return this.format_type;
  }

  /**
   * 
   * @see TFileFormatType
   */
  public TBrokerRangeDesc setFormat_type(TFileFormatType format_type) {
    this.format_type = format_type;
    return this;
  }

  public void unsetFormat_type() {
    this.format_type = null;
  }

  /** Returns true if field format_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat_type() {
    return this.format_type != null;
  }

  public void setFormat_typeIsSet(boolean value) {
    if (!value) {
      this.format_type = null;
    }
  }

  public boolean isSplittable() {
    return this.splittable;
  }

  public TBrokerRangeDesc setSplittable(boolean splittable) {
    this.splittable = splittable;
    setSplittableIsSet(true);
    return this;
  }

  public void unsetSplittable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPLITTABLE_ISSET_ID);
  }

  /** Returns true if field splittable is set (has been assigned a value) and false otherwise */
  public boolean isSetSplittable() {
    return EncodingUtils.testBit(__isset_bitfield, __SPLITTABLE_ISSET_ID);
  }

  public void setSplittableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPLITTABLE_ISSET_ID, value);
  }

  public String getPath() {
    return this.path;
  }

  public TBrokerRangeDesc setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public long getStart_offset() {
    return this.start_offset;
  }

  public TBrokerRangeDesc setStart_offset(long start_offset) {
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    return this;
  }

  public void unsetStart_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  /** Returns true if field start_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  public void setStart_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_OFFSET_ISSET_ID, value);
  }

  public long getSize() {
    return this.size;
  }

  public TBrokerRangeDesc setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_TYPE:
      if (value == null) {
        unsetFile_type();
      } else {
        setFile_type((com.baidu.palo.thrift.TFileType)value);
      }
      break;

    case FORMAT_TYPE:
      if (value == null) {
        unsetFormat_type();
      } else {
        setFormat_type((TFileFormatType)value);
      }
      break;

    case SPLITTABLE:
      if (value == null) {
        unsetSplittable();
      } else {
        setSplittable((Boolean)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case START_OFFSET:
      if (value == null) {
        unsetStart_offset();
      } else {
        setStart_offset((Long)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_TYPE:
      return getFile_type();

    case FORMAT_TYPE:
      return getFormat_type();

    case SPLITTABLE:
      return isSplittable();

    case PATH:
      return getPath();

    case START_OFFSET:
      return getStart_offset();

    case SIZE:
      return getSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_TYPE:
      return isSetFile_type();
    case FORMAT_TYPE:
      return isSetFormat_type();
    case SPLITTABLE:
      return isSetSplittable();
    case PATH:
      return isSetPath();
    case START_OFFSET:
      return isSetStart_offset();
    case SIZE:
      return isSetSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBrokerRangeDesc)
      return this.equals((TBrokerRangeDesc)that);
    return false;
  }

  public boolean equals(TBrokerRangeDesc that) {
    if (that == null)
      return false;

    boolean this_present_file_type = true && this.isSetFile_type();
    boolean that_present_file_type = true && that.isSetFile_type();
    if (this_present_file_type || that_present_file_type) {
      if (!(this_present_file_type && that_present_file_type))
        return false;
      if (!this.file_type.equals(that.file_type))
        return false;
    }

    boolean this_present_format_type = true && this.isSetFormat_type();
    boolean that_present_format_type = true && that.isSetFormat_type();
    if (this_present_format_type || that_present_format_type) {
      if (!(this_present_format_type && that_present_format_type))
        return false;
      if (!this.format_type.equals(that.format_type))
        return false;
    }

    boolean this_present_splittable = true;
    boolean that_present_splittable = true;
    if (this_present_splittable || that_present_splittable) {
      if (!(this_present_splittable && that_present_splittable))
        return false;
      if (this.splittable != that.splittable)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_start_offset = true;
    boolean that_present_start_offset = true;
    if (this_present_start_offset || that_present_start_offset) {
      if (!(this_present_start_offset && that_present_start_offset))
        return false;
      if (this.start_offset != that.start_offset)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_file_type = true && (isSetFile_type());
    list.add(present_file_type);
    if (present_file_type)
      list.add(file_type.getValue());

    boolean present_format_type = true && (isSetFormat_type());
    list.add(present_format_type);
    if (present_format_type)
      list.add(format_type.getValue());

    boolean present_splittable = true;
    list.add(present_splittable);
    if (present_splittable)
      list.add(splittable);

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_start_offset = true;
    list.add(present_start_offset);
    if (present_start_offset)
      list.add(start_offset);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBrokerRangeDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFile_type()).compareTo(other.isSetFile_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_type, other.file_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat_type()).compareTo(other.isSetFormat_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_type, other.format_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplittable()).compareTo(other.isSetSplittable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplittable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splittable, other.splittable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_offset()).compareTo(other.isSetStart_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_offset, other.start_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBrokerRangeDesc(");
    boolean first = true;

    sb.append("file_type:");
    if (this.file_type == null) {
      sb.append("null");
    } else {
      sb.append(this.file_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("format_type:");
    if (this.format_type == null) {
      sb.append("null");
    } else {
      sb.append(this.format_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("splittable:");
    sb.append(this.splittable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_offset:");
    sb.append(this.start_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_type' was not present! Struct: " + toString());
    }
    if (format_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'format_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'splittable' because it's a primitive and you chose the non-beans generator.
    if (path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'start_offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBrokerRangeDescStandardSchemeFactory implements SchemeFactory {
    public TBrokerRangeDescStandardScheme getScheme() {
      return new TBrokerRangeDescStandardScheme();
    }
  }

  private static class TBrokerRangeDescStandardScheme extends StandardScheme<TBrokerRangeDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_type = com.baidu.palo.thrift.TFileType.findByValue(iprot.readI32());
              struct.setFile_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format_type = com.baidu.palo.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormat_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPLITTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.splittable = iprot.readBool();
              struct.setSplittableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_offset = iprot.readI64();
              struct.setStart_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSplittable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'splittable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart_offset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_type != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.file_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.format_type != null) {
        oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.format_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLITTABLE_FIELD_DESC);
      oprot.writeBool(struct.splittable);
      oprot.writeFieldEnd();
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.start_offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBrokerRangeDescTupleSchemeFactory implements SchemeFactory {
    public TBrokerRangeDescTupleScheme getScheme() {
      return new TBrokerRangeDescTupleScheme();
    }
  }

  private static class TBrokerRangeDescTupleScheme extends TupleScheme<TBrokerRangeDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.file_type.getValue());
      oprot.writeI32(struct.format_type.getValue());
      oprot.writeBool(struct.splittable);
      oprot.writeString(struct.path);
      oprot.writeI64(struct.start_offset);
      oprot.writeI64(struct.size);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.file_type = com.baidu.palo.thrift.TFileType.findByValue(iprot.readI32());
      struct.setFile_typeIsSet(true);
      struct.format_type = com.baidu.palo.thrift.TFileFormatType.findByValue(iprot.readI32());
      struct.setFormat_typeIsSet(true);
      struct.splittable = iprot.readBool();
      struct.setSplittableIsSet(true);
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.start_offset = iprot.readI64();
      struct.setStart_offsetIsSet(true);
      struct.size = iprot.readI64();
      struct.setSizeIsSet(true);
    }
  }

}

