
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Tue May 01 02:06:14 CST 2018
//----------------------------------------------------

package com.baidu.palo.analysis;

import com.baidu.palo.common.Version;
import com.baidu.palo.common.AnalysisException;
import com.baidu.palo.catalog.AccessPrivilege;
import com.baidu.palo.catalog.Column;
import com.baidu.palo.catalog.KeysType;
import com.baidu.palo.catalog.PrimitiveType;
import com.baidu.palo.catalog.ColumnType;
import com.baidu.palo.catalog.Type;
import com.baidu.palo.catalog.View;
import com.baidu.palo.catalog.AggregateType;
import com.baidu.palo.analysis.PartitionKeyDesc;
import com.baidu.palo.analysis.UnionStmt.UnionOperand;
import com.baidu.palo.analysis.UnionStmt.Qualifier;
import com.baidu.palo.mysql.MysqlPassword;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;
import java_cup.runtime.Symbol;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/** CUP v0.11a czt01 beta generated parser.
  * @version Tue May 01 02:06:14 CST 2018
  */
public class SqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u02eb\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\002\000\002\113\003\000\002\113\005\000\002\114\003" +
    "\000\002\114\005\000\002\026\006\000\002\027\006\000" +
    "\002\011\006\000\002\011\005\000\002\011\006\000\002" +
    "\011\011\000\002\011\007\000\002\011\006\000\002\060" +
    "\002\000\002\060\004\000\002\263\003\000\002\263\005" +
    "\000\002\255\002\000\002\255\004\000\002\255\004\000" +
    "\002\254\002\000\002\254\004\000\002\256\002\000\002" +
    "\256\003\000\002\256\004\000\002\244\002\000\002\244" +
    "\007\000\002\261\010\000\002\261\011\000\002\261\013" +
    "\000\002\261\007\000\002\261\006\000\002\261\010\000" +
    "\002\261\011\000\002\261\003\000\002\261\006\000\002" +
    "\261\006\000\002\261\011\000\002\261\004\000\002\261" +
    "\006\000\002\261\006\000\002\261\006\000\002\257\005" +
    "\000\002\257\006\000\002\257\007\000\002\257\005\000" +
    "\002\257\005\000\002\257\005\000\002\257\005\000\002" +
    "\257\005\000\002\257\005\000\002\257\005\000\002\257" +
    "\006\000\002\257\006\000\002\257\006\000\002\257\006" +
    "\000\002\260\004\000\002\262\005\000\002\262\005\000" +
    "\002\022\003\000\002\020\006\000\002\020\014\000\002" +
    "\020\015\000\002\020\020\000\002\020\006\000\002\020" +
    "\011\000\002\020\011\000\002\061\003\000\002\061\006" +
    "\000\002\061\007\000\002\251\002\000\002\251\003\000" +
    "\002\057\003\000\002\217\003\000\002\217\005\000\002" +
    "\006\004\000\002\032\011\000\002\007\013\000\002\237" +
    "\003\000\002\237\005\000\002\236\003\000\002\236\005" +
    "\000\002\235\017\000\002\245\002\000\002\245\006\000" +
    "\002\250\002\000\002\250\003\000\002\247\002\000\002" +
    "\247\006\000\002\243\002\000\002\243\005\000\002\246" +
    "\002\000\002\246\006\000\002\240\002\000\002\240\004" +
    "\000\002\242\002\000\002\242\005\000\002\242\010\000" +
    "\002\241\002\000\002\241\004\000\002\016\010\000\002" +
    "\017\010\000\002\014\006\000\002\014\006\000\002\014" +
    "\005\000\002\014\006\000\002\014\005\000\002\014\006" +
    "\000\002\015\005\000\002\015\005\000\002\015\007\000" +
    "\002\220\002\000\002\220\003\000\002\220\003\000\002" +
    "\220\003\000\002\220\003\000\002\220\003\000\002\221" +
    "\002\000\002\221\013\000\002\222\002\000\002\222\011" +
    "\000\002\222\006\000\002\223\002\000\002\223\004\000" +
    "\002\224\002\000\002\224\007\000\002\224\007\000\002" +
    "\224\007\000\002\224\007\000\002\227\002\000\002\227" +
    "\003\000\002\230\005\000\002\230\003\000\002\226\012" +
    "\000\002\225\003\000\002\225\005\000\002\302\002\000" +
    "\002\302\005\000\002\211\002\000\002\211\005\000\002" +
    "\210\005\000\002\210\007\000\002\212\002\000\002\212" +
    "\006\000\002\213\002\000\002\213\007\000\002\215\003" +
    "\000\002\215\005\000\002\216\003\000\002\216\006\000" +
    "\002\216\003\000\002\216\006\000\002\216\003\000\002" +
    "\216\006\000\002\216\003\000\002\216\006\000\002\216" +
    "\003\000\002\216\006\000\002\216\003\000\002\216\003" +
    "\000\002\216\003\000\002\216\010\000\002\216\003\000" +
    "\002\216\003\000\002\216\003\000\002\216\006\000\002" +
    "\216\006\000\002\216\003\000\002\300\002\000\002\300" +
    "\004\000\002\300\004\000\002\253\002\000\002\253\003" +
    "\000\002\214\011\000\002\252\002\000\002\252\003\000" +
    "\002\252\004\000\002\301\002\000\002\301\004\000\002" +
    "\303\002\000\002\303\004\000\002\304\002\000\002\304" +
    "\005\000\002\305\002\000\002\305\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\005\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\004\000\002" +
    "\005\007\000\002\005\005\000\002\005\005\000\002\005" +
    "\006\000\002\005\005\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\010\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\007" +
    "\000\002\005\007\000\002\005\004\000\002\005\004\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\004\000\002\005\006\000\002\005\003\000\002\005" +
    "\005\000\002\005\006\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\275" +
    "\002\000\002\275\004\000\002\276\002\000\002\276\004" +
    "\000\002\050\004\000\002\050\003\000\002\271\003\000" +
    "\002\271\003\000\002\272\003\000\002\272\003\000\002" +
    "\051\002\000\002\051\004\000\002\273\002\000\002\273" +
    "\004\000\002\274\003\000\002\274\003\000\002\046\002" +
    "\000\002\046\003\000\002\277\003\000\002\277\003\000" +
    "\002\044\003\000\002\044\003\000\002\041\002\000\002" +
    "\041\003\000\002\047\002\000\002\047\004\000\002\047" +
    "\004\000\002\306\003\000\002\306\003\000\002\010\004" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\040\003\000\002\040\003\000\002\023\004\000\002" +
    "\024\005\000\002\024\007\000\002\024\005\000\002\024" +
    "\004\000\002\024\004\000\002\025\011\000\002\062\004" +
    "\000\002\062\004\000\002\156\004\000\002\156\002\000" +
    "\002\160\007\000\002\160\007\000\002\160\012\000\002" +
    "\160\012\000\002\157\003\000\002\157\005\000\002\065" +
    "\005\000\002\065\007\000\002\065\007\000\002\065\006" +
    "\000\002\065\010\000\002\065\012\000\002\065\012\000" +
    "\002\063\003\000\002\063\005\000\002\064\003\000\002" +
    "\064\005\000\002\170\003\000\002\170\004\000\002\170" +
    "\004\000\002\030\004\000\002\012\004\000\002\066\010" +
    "\000\002\067\004\000\002\070\003\000\002\071\011\000" +
    "\002\072\011\000\002\171\002\000\002\171\005\000\002" +
    "\172\003\000\002\172\005\000\002\173\003\000\002\173" +
    "\005\000\002\173\005\000\002\173\011\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\021\004\000" +
    "\002\021\006\000\002\207\003\000\002\207\005\000\002" +
    "\202\005\000\002\202\005\000\002\205\004\000\002\205" +
    "\004\000\002\205\004\000\002\206\004\000\002\206\004" +
    "\000\002\204\002\000\002\204\004\000\002\203\003\000" +
    "\002\203\005\000\002\177\004\000\002\177\003\000\002" +
    "\200\005\000\002\201\005\000\002\201\006\000\002\201" +
    "\007\000\002\201\010\000\002\201\004\000\002\201\005" +
    "\000\002\201\005\000\002\201\005\000\002\201\007\000" +
    "\002\267\003\000\002\270\003\000\002\270\006\000\002" +
    "\174\003\000\002\174\003\000\002\174\003\000\002\175" +
    "\002\000\002\175\003\000\002\175\003\000\002\175\003" +
    "\000\002\176\004\000\002\176\004\000\002\176\004\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\005\000\002\053\005\000\002\055" +
    "\004\000\002\055\004\000\002\054\005\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\037\004\000\002\037" +
    "\011\000\002\073\004\000\002\073\005\000\002\073\005" +
    "\000\002\074\003\000\002\074\003\000\002\075\005\000" +
    "\002\075\005\000\002\075\005\000\002\075\003\000\002" +
    "\076\005\000\002\076\003\000\002\107\002\000\002\107" +
    "\004\000\002\107\003\000\002\107\004\000\002\107\003" +
    "\000\002\077\005\000\002\077\007\000\002\115\003\000" +
    "\002\115\005\000\002\116\003\000\002\116\005\000\002" +
    "\153\004\000\002\152\004\000\002\152\006\000\002\152" +
    "\007\000\002\152\011\000\002\152\013\000\002\154\003" +
    "\000\002\154\003\000\002\162\006\000\002\155\005\000" +
    "\002\110\002\000\002\110\003\000\002\110\004\000\002" +
    "\110\004\000\002\112\002\000\002\112\006\000\002\163" +
    "\004\000\002\163\005\000\002\163\004\000\002\163\005" +
    "\000\002\163\005\000\002\163\005\000\002\163\005\000" +
    "\002\163\005\000\002\163\005\000\002\163\004\000\002" +
    "\042\003\000\002\042\002\000\002\043\003\000\002\043" +
    "\002\000\002\164\003\000\002\164\005\000\002\164\002" +
    "\000\002\165\005\000\002\165\002\000\002\111\003\000" +
    "\002\111\005\000\002\105\003\000\002\105\005\000\002" +
    "\117\004\000\002\117\002\000\002\127\005\000\002\127" +
    "\002\000\002\131\004\000\002\131\002\000\002\133\005" +
    "\000\002\133\002\000\002\132\003\000\002\132\005\000" +
    "\002\134\003\000\002\134\004\000\002\134\004\000\002" +
    "\135\004\000\002\135\002\000\002\135\006\000\002\135" +
    "\006\000\002\136\010\000\002\136\010\000\002\136\013" +
    "\000\002\136\011\000\002\136\014\000\002\142\007\000" +
    "\002\142\006\000\002\143\006\000\002\143\007\000\002" +
    "\137\004\000\002\137\002\000\002\167\004\000\002\167" +
    "\004\000\002\100\003\000\002\100\003\000\002\145\005" +
    "\000\002\145\006\000\002\126\004\000\002\101\003\000" +
    "\002\101\005\000\002\101\006\000\002\101\003\000\002" +
    "\101\003\000\002\101\004\000\002\101\004\000\002\101" +
    "\010\000\002\101\003\000\002\101\006\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\005\000\002\101\006\000\002" +
    "\101\005\000\002\101\005\000\002\101\005\000\002\101" +
    "\006\000\002\101\003\000\002\101\005\000\002\101\006" +
    "\000\002\106\003\000\002\106\005\000\002\140\011\000" +
    "\002\130\005\000\002\130\002\000\002\146\004\000\002" +
    "\146\007\000\002\146\002\000\002\147\003\000\002\147" +
    "\003\000\002\150\004\000\002\150\004\000\002\150\004" +
    "\000\002\150\004\000\002\150\004\000\002\102\005\000" +
    "\002\102\005\000\002\102\005\000\002\102\005\000\002" +
    "\102\005\000\002\102\005\000\002\102\005\000\002\102" +
    "\005\000\002\102\005\000\002\102\004\000\002\103\007" +
    "\000\002\103\007\000\002\103\007\000\002\103\012\000" +
    "\002\141\003\000\002\141\003\000\002\141\003\000\002" +
    "\141\003\000\002\141\003\000\002\141\003\000\002\141" +
    "\003\000\002\141\003\000\002\141\004\000\002\141\003" +
    "\000\002\144\003\000\002\144\004\000\002\144\003\000" +
    "\002\144\004\000\002\144\004\000\002\120\005\000\002" +
    "\120\006\000\002\120\006\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\005\000\002\122\005\000" +
    "\002\122\006\000\002\122\006\000\002\122\006\000\002" +
    "\122\006\000\002\122\005\000\002\122\005\000\002\122" +
    "\007\000\002\125\005\000\002\125\005\000\002\125\006" +
    "\000\002\125\006\000\002\121\007\000\002\121\007\000" +
    "\002\121\010\000\002\121\010\000\002\124\007\000\002" +
    "\124\010\000\002\124\005\000\002\124\006\000\002\161" +
    "\005\000\002\161\005\000\002\123\005\000\002\123\005" +
    "\000\002\123\004\000\002\123\004\000\002\151\003\000" +
    "\002\151\005\000\002\151\007\000\002\166\003\000\002" +
    "\166\003\000\002\166\003\000\002\166\003\000\002\166" +
    "\003\000\002\166\003\000\002\166\003\000\002\166\003" +
    "\000\002\166\003\000\002\166\003\000\002\166\003\000" +
    "\002\166\003\000\002\234\003\000\002\234\003\000\002" +
    "\231\005\000\002\231\003\000\002\232\005\000\002\232" +
    "\003\000\002\233\005\000\002\233\003\000\002\031\005" +
    "\000\002\031\004\000\002\031\006\000\002\031\006\000" +
    "\002\033\002\000\002\033\005\000\002\034\002\000\002" +
    "\034\003\000\002\035\002\000\002\035\005\000\002\035" +
    "\004\000\002\036\002\000\002\036\003\000\002\036\004" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\264\003\000\002\264\003\000\002\264\003\000" +
    "\002\264\003\000\002\264\003\000\002\264\003\000\002" +
    "\264\003\000\002\264\003\000\002\264\003\000\002\265" +
    "\003\000\002\265\003\000\002\266\003\000\002\266\003" +
    "" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    loadTableFromFile("action_table");

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u05ab\000\074\002\067\003\074\004\056\006\020\007" +
    "\034\010\025\011\021\012\035\013\055\014\041\015\044" +
    "\016\045\017\005\020\066\021\006\022\057\023\072\025" +
    "\071\026\050\027\033\030\073\031\023\032\040\040\031" +
    "\062\065\066\047\071\037\072\064\156\061\001\001\000" +
    "\002\001\001\000\010\264\212\265\u01f8\266\u05a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0537\041" +
    "\u0548\045\u0531\046\u0534\050\u0546\175\u0541\277\u053c\001\001" +
    "\000\006\264\212\265\u0526\001\001\000\012\157\u050d\160" +
    "\u050c\264\212\265\u050a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u04e0\001\001\000" +
    "\006\264\212\265\u04df\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\231\u0439\234\u0437\264\212\265\u0436\001\001\000" +
    "\002\001\001\000\016\062\u041a\066\u041b\115\u041c\156\061" +
    "\264\212\265\150\001\001\000\004\034\u0419\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u03dd\001\001" +
    "\000\002\001\001\000\004\305\u0309\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\u026e\063\u026f\064\u026c\065\u026a\073\u026b\001" +
    "\001\000\020\050\321\174\316\201\317\205\320\264\212" +
    "\265\312\267\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\116\305\264\212\265\304\001\001\000\002\001" +
    "\001\000\004\303\301\001\001\000\004\303\277\001\001" +
    "\000\004\303\275\001\001\000\004\303\121\001\001\000" +
    "\002\001\001\000\010\115\243\264\212\265\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\264\212\265\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\115\276\264\212\265\150\001\001" +
    "\000\002\001\001\000\006\264\212\265\300\001\001\000" +
    "\002\001\001\000\006\264\212\265\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\264\212\265\307\001\001\000\002\001\001" +
    "\000\010\264\212\265\u01f8\266\u025f\001\001\000\010\053" +
    "\u025e\054\u022b\055\u0229\001\001\000\002\001\001\000\004" +
    "\060\u0253\001\001\000\014\052\u024b\264\212\265\u01f8\266" +
    "\u0248\271\u0249\001\001\000\004\052\u023e\001\001\000\014" +
    "\200\u0226\206\u0228\264\212\265\312\267\u0223\001\001\000" +
    "\004\204\u021b\001\001\000\002\001\001\000\012\264\212" +
    "\265\u01f8\266\u01f6\272\u0219\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\104\333\141\351\264\212\265\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\100\376" +
    "\101\371\102\357\103\363\116\u010c\120\356\121\u0113\122" +
    "\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\161\u0215\001\001\000" +
    "\002\001\001\000\056\100\u0212\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\100\u020a\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115" +
    "\161\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\100\u0201\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\056\100\u0200\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\100\u01d9" +
    "\101\371\102\357\103\363\116\u010c\120\356\121\u0113\122" +
    "\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\100\u01c4\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\143" +
    "\u01c3\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\062\u0135\100\u014a\101\u01b5" +
    "\102\357\103\363\116\u010c\120\u01b4\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\156\061\161\u0138\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\100\u017f\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\116\u0117\264\212\265\304" +
    "\001\001\000\002\001\001\000\060\100\u0119\101\371\102" +
    "\357\103\363\106\u011a\116\u010c\120\356\121\u0113\122\u0109" +
    "\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141" +
    "\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212" +
    "\265\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\100\u011d\101\371\102\357\103\363\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u0179\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\056\100\u0178\101\371\102\357\103\363\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\002\001\001\000" +
    "\056\100\u0167\101\371\102\357\103\363\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\056\100\u0166\101" +
    "\371\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109" +
    "\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141" +
    "\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212" +
    "\265\u0100\001\001\000\056\100\u0165\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145" +
    "\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\002\001\001\000\056\100\u0160\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145" +
    "\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\056\100\u015e\101\371\102\357\103\363\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\056\100\u0158" +
    "\101\371\102\357\103\363\116\u010c\120\356\121\u0113\122" +
    "\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\056\100\u0156\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\056\100\u0155\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115" +
    "\161\u010f\167\u010d\264\212\265\u0100\001\001\000\056\100" +
    "\u0150\101\371\102\357\103\363\116\u010c\120\356\121\u0113" +
    "\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140" +
    "\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d" +
    "\264\212\265\u0100\001\001\000\056\100\u014a\101\u0149\102" +
    "\357\103\363\116\u010c\120\u0148\121\u0113\122\u0109\123\u0104" +
    "\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142" +
    "\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100" +
    "\001\001\000\056\100\u0147\101\371\102\357\103\363\116" +
    "\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364" +
    "\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151" +
    "\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000\002" +
    "\001\001\000\056\100\u0143\101\371\102\357\103\363\116" +
    "\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364" +
    "\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151" +
    "\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000\056" +
    "\100\u0142\101\371\102\357\103\363\116\u010c\120\356\121" +
    "\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373" +
    "\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167" +
    "\u010d\264\212\265\u0100\001\001\000\056\100\u0140\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\056\100\u013e\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\004\161\u0133\001\001\000\002\001\001\000\064\062\u0135" +
    "\100\u0137\101\371\102\357\103\363\105\u0136\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\156" +
    "\061\161\u0138\167\u010d\264\212\265\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\100\u013c\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\100\u0141\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145" +
    "\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\100\u014c\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\056\100\u014e\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\056\100\u0151\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\006\264\212\265\u0152\001\001" +
    "\000\002\001\001\000\056\100\u0154\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145" +
    "\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\100\u015b\101\371\102\357\103\363\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\002\001\001\000" +
    "\056\100\u015a\101\371\102\357\103\363\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u015d\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\100\u0161\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\002\001\001\000\006\264\212\265\u0162" +
    "\001\001\000\002\001\001\000\056\100\u0164\101\371\102" +
    "\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104" +
    "\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142" +
    "\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\100\u014a\101\u0173\102\357" +
    "\103\363\116\u010c\120\u0172\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\056\100\u0171\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115" +
    "\161\u010f\167\u010d\264\212\265\u0100\001\001\000\056\100" +
    "\u0170\101\371\102\357\103\363\116\u010c\120\356\121\u0113" +
    "\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140" +
    "\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d" +
    "\264\212\265\u0100\001\001\000\004\161\u016c\001\001\000" +
    "\002\001\001\000\064\062\u0135\100\u0137\101\371\102\357" +
    "\103\363\105\u016e\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\156\061\161\u0138\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u0175\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\056\100\u0177\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\100\u0137" +
    "\101\371\102\357\103\363\105\u0182\116\u010c\120\356\121" +
    "\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373" +
    "\140\u0102\141\u010b\142\u0103\144\u0184\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\100\u0137\101\371\102\357\103" +
    "\363\105\u018a\116\u010c\120\356\121\u0113\122\u0109\123\u0104" +
    "\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142" +
    "\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\100" +
    "\u0137\101\371\102\357\103\363\105\u0187\116\u010c\120\356" +
    "\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136" +
    "\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f" +
    "\167\u010d\264\212\265\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\100\u013c\101\371\102\357\103\363\116\u010c\120\356\121" +
    "\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373" +
    "\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167" +
    "\u010d\264\212\265\u0100\001\001\000\056\100\u018d\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\006\264\212\265\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\130\u0195\001\001\000\002" +
    "\001\001\000\004\133\u0196\001\001\000\006\146\u01a1\147" +
    "\u01a3\001\001\000\002\001\001\000\062\100\u019a\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\132\u0199\134\u019b\136\373" +
    "\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167" +
    "\u010d\264\212\265\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\100\u019a\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\134\u019f\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\100\u01a4\101\371\102\357\103\363\116" +
    "\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364" +
    "\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\150" +
    "\u01a6\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\100\u01a4\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\150\u01a9\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\060\100\u01a4\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\150\u01ab\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\100\u0137\101\371\102\357" +
    "\103\363\105\u01b3\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\176" +
    "\u01ba\264\212\265\u01b9\001\001\000\002\001\001\000\006" +
    "\264\212\265\u01c1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\100\u01d0\101" +
    "\371\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109" +
    "\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141" +
    "\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212" +
    "\265\u0100\001\001\000\004\137\u01ce\001\001\000\004\143" +
    "\u01c5\001\001\000\004\137\u01c6\001\001\000\002\001\001" +
    "\000\056\100\u01cc\101\371\102\357\103\363\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\056\100\u01c9" +
    "\101\371\102\357\103\363\116\u010c\120\356\121\u0113\122" +
    "\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\056\100\u01cb" +
    "\101\371\102\357\103\363\116\u010c\120\356\121\u0113\122" +
    "\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u01d2\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\006\264\212\265\u01d4\001\001\000\002" +
    "\001\001\000\006\264\212\265\u01d6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\100\u01db\101\371\102\357\103\363\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001\001" +
    "\000\004\166\u01e2\001\001\000\002\001\001\000\006\050" +
    "\u01f5\051\u01f2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\100\u014a\101\u01ef\102\357\103\363\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u014a\101\u01fb\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\012\264\212\265\u01f8\266\u01f6\272\u01f7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\u01f5" +
    "\051\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\264\212\265\u0202" +
    "\001\001\000\002\001\001\000\062\100\u0137\101\371\102" +
    "\357\103\363\105\u0204\116\u010c\120\356\121\u0113\122\u0109" +
    "\123\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141" +
    "\u010b\142\u0103\144\u0205\145\u0107\151\u0115\161\u010f\167\u010d" +
    "\264\212\265\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\100\u0137\101\371\102\357" +
    "\103\363\105\u0208\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\100\u0210\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103" +
    "\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\062\u0135\156\061\161\u0217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\050\321\174" +
    "\u021c\177\u021e\201\u021d\203\u021f\264\212\265\312\267\326" +
    "\001\001\000\002\001\001\000\012\200\u0222\264\212\265" +
    "\312\267\u0223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\050\321\174\u021c\177\u0221\201" +
    "\u021d\264\212\265\312\267\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u0224\001\001\000\012\104" +
    "\u0225\141\351\264\212\265\334\001\001\000\002\001\001" +
    "\000\004\204\u023c\001\001\000\010\053\u022a\054\u022b\055" +
    "\u0229\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u0231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0239\001\001\000\002\001" +
    "\001\000\004\054\u023b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\270\u023f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0246\001\001\000\004\270\u0247\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\273\u024e\001\001\000\002\001" +
    "\001\000\056\100\u024c\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115" +
    "\161\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001" +
    "\001\000\012\264\212\265\u01f8\266\u024f\274\u0250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\057\u025d\264\212\265\u01f8\266\u025c" +
    "\001\001\000\006\202\u0254\207\u0256\001\001\000\002\001" +
    "\001\000\004\052\u0259\001\001\000\002\001\001\000\004" +
    "\202\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\u0268\001\001\000" +
    "\012\176\u0261\264\212\265\312\267\u0262\001\001\000\010" +
    "\264\212\265\312\267\u0265\001\001\000\004\052\u0263\001" +
    "\001\000\012\104\u0264\141\351\264\212\265\334\001\001" +
    "\000\002\001\001\000\004\052\u0266\001\001\000\012\104" +
    "\u0267\141\351\264\212\265\334\001\001\000\002\001\001" +
    "\000\004\141\u0269\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\135\u02a3\153\u02a5\001\001\000\004\170\u0292" +
    "\001\001\000\066\074\u0279\075\u0274\076\u0278\077\u0273\100" +
    "\u0276\101\371\102\357\103\363\116\u010c\120\356\121\u0113" +
    "\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373\140" +
    "\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d" +
    "\264\212\265\u0277\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\u0271\156\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\074\u028b\075\u0274\076\u0278\077\u0273\100\u0276\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0277\001\001\000\004\273\u0284\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\074\u027c\075\u0274\076\u0278\077\u0273\100\u0276\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0277\001\001\000\002\001\001\000\062\076\u027e\077\u0273" +
    "\100\u0276\101\371\102\357\103\363\116\u010c\120\356\121" +
    "\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373" +
    "\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167" +
    "\u010d\264\212\265\u0277\001\001\000\002\001\001\000\006" +
    "\264\212\265\u0280\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\264\212\265\u01d6\001\001\000\002\001\001" +
    "\000\010\107\u0285\264\212\265\u0287\001\001\000\002\001" +
    "\001\000\006\264\212\265\u0289\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\076\u028d\077\u0273\100\u0276\101\371" +
    "\102\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123" +
    "\u0104\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b" +
    "\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265" +
    "\u0277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\u026e\063\u0293\073\u026b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\100\u019a\101\371\102\357" +
    "\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124" +
    "\u0110\125\364\126\360\132\u029a\134\u019b\136\373\140\u0102" +
    "\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264" +
    "\212\265\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\u02ec\001\001\000\020\115\u02aa\152\u02a7\154\u02ab\155\u02a9" +
    "\162\u02ac\264\212\265\150\001\001\000\006\042\u02ca\163" +
    "\u02c2\001\001\000\006\062\u02bf\156\061\001\001\000\002" +
    "\001\001\000\004\112\u02b5\001\001\000\004\165\u02ad\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\111\u02b0" +
    "\264\212\265\u02af\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\264\212\265\u02b3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\110\u02b9\264" +
    "\212\265\u02b7\001\001\000\006\264\212\265\u02bb\001\001" +
    "\000\002\001\001\000\006\264\212\265\u02ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\111\u02bd\264\212\265\u02af\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\110\u02c1\264\212" +
    "\265\u02b7\001\001\000\002\001\001\000\004\164\u02e0\001" +
    "\001\000\004\043\u02db\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u02d2\001\001\000\002\001\001\000" +
    "\004\043\u02cf\001\001\000\016\115\u02aa\154\u02cc\155\u02a9" +
    "\162\u02ac\264\212\265\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\165\u02cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\115\u02aa\154\u02e4" +
    "\155\u02a9\162\u02ac\264\212\265\150\001\001\000\010\111" +
    "\u02e2\264\212\265\u02af\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\165\u02e5\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\100\u02e8\101\371\102\357\103\363" +
    "\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125" +
    "\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107" +
    "\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001\000" +
    "\002\001\001\000\010\111\u02ea\264\212\265\u02af\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\127\u02ef\001" +
    "\001\000\056\100\u02ee\101\371\102\357\103\363\116\u010c" +
    "\120\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126" +
    "\360\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115" +
    "\161\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001" +
    "\001\000\004\131\u02f3\001\001\000\002\001\001\000\060" +
    "\100\u0137\101\371\102\357\103\363\105\u02f2\116\u010c\120" +
    "\356\121\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360" +
    "\136\373\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161" +
    "\u010f\167\u010d\264\212\265\u0100\001\001\000\002\001\001" +
    "\000\004\133\u02f6\001\001\000\056\100\u02f5\101\371\102" +
    "\357\103\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104" +
    "\124\u0110\125\364\126\360\136\373\140\u0102\141\u010b\142" +
    "\u0103\145\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100" +
    "\001\001\000\002\001\001\000\004\135\u02f7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\116\u03cd\264\212\265\304\001" +
    "\001\000\014\057\u03c5\061\u03c4\264\212\265\u01f8\266\u025c" +
    "\001\001\000\002\001\001\000\006\264\212\265\u03b3\001" +
    "\001\000\004\304\u03b1\001\001\000\002\001\001\000\004" +
    "\304\u03a9\001\001\000\002\001\001\000\004\304\u030c\001" +
    "\001\000\002\001\001\000\010\115\u030d\264\212\265\150" +
    "\001\001\000\002\001\001\000\012\214\u0311\215\u0310\264" +
    "\212\265\u030f\001\001\000\004\216\u0373\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\214\u036b\264\212\265" +
    "\u030f\001\001\000\004\302\u0315\001\001\000\002\001\001" +
    "\000\004\224\u031a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\221\u031b" +
    "\001\001\000\004\222\u0343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\111\u0320\264\212" +
    "\265\u02af\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\226\u0323\227\u0324\230\u0326\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\304\u0329\001\001\000\002\001" +
    "\001\000\004\226\u0328\001\001\000\002\001\001\000\006" +
    "\264\212\265\u032a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\225\u032e\001\001\000\004" +
    "\211\u0337\001\001\000\002\001\001\000\004\232\u0331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\210\u0338\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\212" +
    "\u0344\001\001\000\004\213\u0349\001\001\000\002\001\001" +
    "\000\004\210\u0347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\210\u034d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\223\u0358\001\001\000\002" +
    "\001\001\000\010\111\u0353\264\212\265\u02af\001\001\000" +
    "\002\001\001\000\004\223\u0355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\111\u035b\264\212\265\u02af\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\111\u035f\264\212\265\u02af\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\111\u0363\264" +
    "\212\265\u02af\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\111\u0367\264\212\265\u02af\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\264\212" +
    "\265\u036a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\253\u0387\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\220\u038b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\252" +
    "\u038f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\300\u0392\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\301\u0396\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u03aa\264\212\265" +
    "\150\001\001\000\004\243\u03ab\001\001\000\002\001\001" +
    "\000\010\111\u03ad\264\212\265\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\062\u03b0\156\061\001\001" +
    "\000\002\001\001\000\006\264\212\265\u03b2\001\001\000" +
    "\002\001\001\000\004\212\u03b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\116\u03b9\264\212\265\304\001\001\000\002\001\001" +
    "\000\006\216\u03bc\217\u03bb\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\216\u03c3\001\001\000\004\216\u03bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\212" +
    "\u03c2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\251\u03cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\216\u03bc\217\u03cf\001\001\000\002\001\001" +
    "\000\004\216\u03d1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\212\u03d4\001\001\000\002\001\001\000\012" +
    "\067\u03d7\115\u03d6\264\212\265\150\001\001\000\004\112" +
    "\u03dc\001\001\000\004\243\u03d8\001\001\000\004\164\u03d9" +
    "\001\001\000\010\062\u03da\070\u03db\156\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\u03e3\275\u03ef\001" +
    "\001\000\002\001\001\000\006\044\u03e3\275\u03e8\001\001" +
    "\000\006\044\u03e3\275\u03e4\001\001\000\006\264\212\265" +
    "\u03e7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\306" +
    "\u03ec\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\115\u03ee\264\212\265\150\001\001\000" +
    "\002\001\001\000\004\047\u03f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\100\u03f3\101\371\102\357\103" +
    "\363\116\u010c\120\356\121\u0113\122\u0109\123\u0104\124\u0110" +
    "\125\364\126\360\136\373\140\u0102\141\u010b\142\u0103\145" +
    "\u0107\151\u0115\161\u010f\167\u010d\264\212\265\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\232\u03f6\001" +
    "\001\000\002\001\001\000\004\033\u03f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\264\212\265\u0401\001\001\000\006\264\212" +
    "\265\u0400\001\001\000\010\115\u03ff\264\212\265\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\115\u0403\264\212\265\150\001\001\000\002\001" +
    "\001\000\010\113\u0406\264\212\265\u0405\001\001\000\002" +
    "\001\001\000\010\114\u0408\264\212\265\u0407\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\264\212\265\u040a" +
    "\001\001\000\002\001\001\000\006\264\212\265\u040c\001" +
    "\001\000\002\001\001\000\012\115\u02aa\155\u040e\264\212" +
    "\265\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\212\u0411\001\001\000\004\242\u0413\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\264\212\265\u01f8\266" +
    "\u0415\001\001\000\002\001\001\000\004\210\u0417\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\237\u0420\264\212\265\u041f\001\001\000" +
    "\002\001\001\000\004\171\u0421\001\001\000\002\001\001" +
    "\000\012\172\u0423\173\u0425\264\212\265\u0424\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\264\212\265\u042d\001\001\000\006\264\212\265\u0428\001" +
    "\001\000\002\001\001\000\006\264\212\265\u042a\001\001" +
    "\000\002\001\001\000\006\264\212\265\u042c\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\173\u0430\264\212" +
    "\265\u0424\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\212\u0433\001\001\000\002\001\001" +
    "\000\006\264\212\265\u0435\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\234\u043f\264\212\265\u0436\001\001\000" +
    "\006\264\212\265\u043c\001\001\000\002\001\001\000\012" +
    "\057\u043e\264\212\265\u01f8\266\u025c\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\113\u0441\264\212\265\u0405" +
    "\001\001\000\010\114\u0442\264\212\265\u0407\001\001\000" +
    "\002\001\001\000\006\264\212\265\u04cc\001\001\000\004" +
    "\257\u04a6\001\001\000\006\264\212\265\u04a2\001\001\000" +
    "\006\264\212\265\u049b\001\001\000\010\115\u0448\264\212" +
    "\265\150\001\001\000\010\212\u0449\261\u044d\263\u044e\001" +
    "\001\000\002\001\001\000\004\226\u047e\001\001\000\002" +
    "\001\001\000\006\264\212\265\u046a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\214\u0458\264\212\265\u030f\001\001\000\006\264" +
    "\212\265\u0453\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\210\u0456\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\256\u045b\001\001\000\002\001\001\000\006" +
    "\264\212\265\u0460\001\001\000\004\254\u045c\001\001\000" +
    "\004\212\u045f\001\001\000\006\264\212\265\u045e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\111\u0463\264\212\265\u02af\001\001" +
    "\000\002\001\001\000\004\254\u0465\001\001\000\004\212" +
    "\u0466\001\001\000\002\001\001\000\006\212\u0449\261\u0468" +
    "\001\001\000\002\001\001\000\006\264\212\265\u0471\001" +
    "\001\000\002\001\001\000\006\264\212\265\u046f\001\001" +
    "\000\006\264\212\265\u046d\001\001\000\006\264\212\265" +
    "\u046e\001\001\000\002\001\001\000\006\264\212\265\u0470" +
    "\001\001\000\002\001\001\000\006\264\212\265\u0472\001" +
    "\001\000\002\001\001\000\006\264\212\265\u047a\001\001" +
    "\000\006\264\212\265\u0478\001\001\000\004\303\u0476\001" +
    "\001\000\006\264\212\265\u0477\001\001\000\002\001\001" +
    "\000\004\212\u0479\001\001\000\002\001\001\000\004\254" +
    "\u047b\001\001\000\004\212\u047c\001\001\000\002\001\001" +
    "\000\010\214\u048f\264\212\265\u030f\001\001\000\004\222" +
    "\u048c\001\001\000\006\264\212\265\u0480\001\001\000\002" +
    "\001\001\000\010\111\u0482\264\212\265\u02af\001\001\000" +
    "\002\001\001\000\004\244\u0484\001\001\000\004\254\u048a" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\111" +
    "\u0488\264\212\265\u02af\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\212\u048b\001\001\000\002\001\001\000" +
    "\004\212\u048d\001\001\000\002\001\001\000\012\214\u0311" +
    "\215\u0497\264\212\265\u030f\001\001\000\004\256\u0490\001" +
    "\001\000\004\255\u0491\001\001\000\004\212\u0496\001\001" +
    "\000\006\264\212\265\u0495\001\001\000\006\264\212\265" +
    "\u0494\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\255\u0499\001\001\000" +
    "\004\212\u049a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\264\212\265\u049e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\212\u04a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\264\212\265\u04aa\001" +
    "\001\000\004\052\u04ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\232\u04ae\001\001\000\002\001\001\000" +
    "\004\232\u04ba\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\264\212\265\u01f8\266\u04b4\001" +
    "\001\000\004\232\u04b5\001\001\000\002\001\001\000\004" +
    "\232\u04b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\264\212\265\u04bc" +
    "\001\001\000\004\232\u04bd\001\001\000\002\001\001\000" +
    "\004\232\u04bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\232\u04ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\264\212\265\u01f8\266\u04c5\001\001\000\004" +
    "\232\u04c6\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\264\212\265\u01f8\266\u04c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\262\u04cd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\232\u04d1\001\001\000\002\001\001\000\004\232" +
    "\u04d3\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\264\212\265\u04d6\001\001\000\002\001\001\000\012\057" +
    "\u04d8\264\212\265\u01f8\266\u025c\001\001\000\002\001\001" +
    "\000\010\115\u04da\264\212\265\150\001\001\000\002\001" +
    "\001\000\006\264\212\265\u04dc\001\001\000\004\117\u04dd" +
    "\001\001\000\004\212\u04de\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u04e1\001\001\000\004\036\u04e2" +
    "\001\001\000\002\001\001\000\010\237\u04e4\264\212\265" +
    "\u041f\001\001\000\002\001\001\000\006\235\u04e6\236\u04e8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\235\u04f0\001\001\000\004\242\u04eb\001\001" +
    "\000\004\240\u04ec\001\001\000\004\212\u04ef\001\001\000" +
    "\010\264\212\265\u01f8\266\u04ee\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\232\u04f3\001\001\000\002\001\001\000\004\250\u04f6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\264\212\265\u04f9\001\001\000\004\245\u04fb" +
    "\001\001\000\002\001\001\000\004\247\u04fc\001\001\000" +
    "\004\243\u0501\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\246\u0502\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\100\u0137" +
    "\101\371\102\357\103\363\105\u0505\116\u010c\120\356\121" +
    "\u0113\122\u0109\123\u0104\124\u0110\125\364\126\360\136\373" +
    "\140\u0102\141\u010b\142\u0103\145\u0107\151\u0115\161\u010f\167" +
    "\u010d\264\212\265\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\111\u0508\264\212\265\u02af\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\160" +
    "\u050f\264\212\265\u050a\001\001\000\002\001\001\000\010" +
    "\111\u0515\264\212\265\u02af\001\001\000\002\001\001\000" +
    "\006\062\u0513\156\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\u0519\156\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\111\u0520\264\212\265\u02af\001" +
    "\001\000\002\001\001\000\006\062\u051e\156\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\062\u0524\156\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u03e3\275\u05a4\001\001\000\002\001\001" +
    "\000\004\135\u059e\001\001\000\002\001\001\000\006\044" +
    "\u03e3\275\u0597\001\001\000\002\001\001\000\004\135\u0596" +
    "\001\001\000\004\060\u0594\001\001\000\002\001\001\000" +
    "\006\044\u03e3\275\u058d\001\001\000\004\044\u0588\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u03e3\275\u0586\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u057b" +
    "\001\001\000\006\044\u03e3\275\u0579\001\001\000\006\044" +
    "\u03e3\275\u0575\001\001\000\004\047\u0574\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u056c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0559\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u03e3\275" +
    "\u0557\001\001\000\004\047\u0558\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\264\212\265\u055f\001\001\000" +
    "\010\115\u055e\264\212\265\150\001\001\000\010\115\u055d" +
    "\264\212\265\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\u03e3" +
    "\275\u056a\001\001\000\004\044\u0566\001\001\000\006\044" +
    "\u03e3\275\u0564\001\001\000\004\047\u0565\001\001\000\002" +
    "\001\001\000\010\115\u0567\264\212\265\150\001\001\000" +
    "\006\044\u03e3\275\u0568\001\001\000\004\047\u0569\001\001" +
    "\000\002\001\001\000\004\047\u056b\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\u03e3\275\u056e\001\001" +
    "\000\004\047\u056f\001\001\000\002\001\001\000\004\047" +
    "\u0573\001\001\000\004\047\u0572\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u0576\001" +
    "\001\000\004\133\u0577\001\001\000\004\135\u0578\001\001" +
    "\000\002\001\001\000\004\047\u057a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u057d\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u0580\264\212\265" +
    "\150\001\001\000\002\001\001\000\004\306\u0582\001\001" +
    "\000\006\044\u03e3\275\u0583\001\001\000\002\001\001\000" +
    "\010\115\u0585\264\212\265\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\115\u02aa\154" +
    "\u0589\155\u02a9\162\u02ac\264\212\265\150\001\001\000\006" +
    "\044\u03e3\275\u058a\001\001\000\004\117\u058b\001\001\000" +
    "\002\001\001\000\006\044\u03e3\275\u0591\001\001\000\004" +
    "\047\u058e\001\001\000\004\133\u058f\001\001\000\004\135" +
    "\u0590\001\001\000\002\001\001\000\004\047\u0592\001\001" +
    "\000\004\135\u0593\001\001\000\002\001\001\000\004\047" +
    "\u0595\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0598\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u05a0\264\212\265" +
    "\150\001\001\000\004\276\u05a2\001\001\000\006\264\212" +
    "\265\u05a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u05a5\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\237\u05a8\264\212\265\u041f\001\001\000\004\171" +
    "\u05a9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\212\u05ac\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}


  /** Load external table from file. */
  private static short[][] loadTableFromFile(String tableName)
  {
    String tableFileName = tableName + ".dat";
    java.io.InputStream is = SqlParser.class.getResourceAsStream(tableFileName);
    if (is == null) {
      throw new RuntimeException("Cannot find external parser table " + tableFileName);
    }

    try {
      try {

        java.io.ObjectInputStream in = new java.io.ObjectInputStream(is);
        try {
          return (short[][]) in.readObject();
        } finally {
          in.close();
        }

      } finally {
        is.close();
      }
    } catch (Exception e) {
      throw new RuntimeException("Cannot load external parser table " + tableFileName, e);
    }
  }
  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}



    private Symbol errorToken;
    public boolean isVerbose = false;
    public String wild;
    public Expr where;

    // List of expected tokens ids from current parsing state for generating syntax error message
    private final List<Integer> expectedTokenIds = Lists.newArrayList();

    // To avoid reporting trivial tokens as expected tokens in error messages
    private boolean reportExpectedToken(Integer tokenId) {
        if (SqlScanner.isKeyword(tokenId) ||
                tokenId.intValue() == SqlParserSymbols.COMMA ||
                tokenId.intValue() == SqlParserSymbols.IDENT) {
            return true;
        } else {
            return false;
        }
    }

    private String getErrorTypeMessage(int lastTokenId) {
        String msg = null;
        switch(lastTokenId) {
            case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
                msg = "Unmatched string literal";
                break;
            case SqlParserSymbols.NUMERIC_OVERFLOW:
                msg = "Numeric overflow";
                break;
            default:
                msg = "Syntax error";
                break;
        }
        return msg;
    }

    // Override to save error token, just update error information.
    @Override
    public void syntax_error(Symbol token) {
        errorToken = token;

        // derive expected tokens from current parsing state
        expectedTokenIds.clear();
        int state = ((Symbol)stack.peek()).parse_state;
        // get row of actions table corresponding to current parsing state
        // the row consists of pairs of <tokenId, actionId>
        // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
        // the last pair is a special error action
        short[] row = action_tab[state];
        short tokenId;
        // the expected tokens are all the symbols with a
        // corresponding action from the current parsing state
        for (int i = 0; i < row.length-2; ++i) {
            // Get tokenId and skip actionId
            tokenId = row[i++];
            expectedTokenIds.add(Integer.valueOf(tokenId));
        }
    }

    // Override to keep it from calling report_fatal_error()
    // This exception is not AnalysisException because we don't want this report to client.
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws AnalysisException {
        throw new AnalysisException(getErrorTypeMessage(cur_token.sym));
    }


    // Manually throw a parse error on a given symbol for special circumstances.
    public void parseError(String symbolName, int symbolId) throws AnalysisException {
        Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
                ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
        // Call syntax error to gather information about expected tokens, etc.
        // syntax_error does not throw an exception
        syntax_error(errorToken);

        unrecovered_syntax_error(errorToken);
    }

    // Returns error string, consisting of the original
    // stmt with a '^' under the offending token. Assumes
    // that parse() has been called and threw an exception
    public String getErrorMsg(String stmt) {
        if (errorToken == null || stmt == null) {
            return null;
        }
        String[] lines = stmt.split("\n");
        StringBuffer result = new StringBuffer();
        result.append(getErrorTypeMessage(errorToken.sym) + " at:\n");

        // print lines up to and including the one with the error
        for (int i = 0; i < errorToken.left; ++i) {
            result.append(lines[i]);
            result.append('\n');
        }
        // print error indicator
        for (int i = 0; i < errorToken.right - 1; ++i) {
            result.append(' ');
        }
        result.append("^\n");
        // print remaining lines
        for (int i = errorToken.left; i < lines.length; ++i) {
            result.append(lines[i]);
            result.append('\n');
        }

        // only report encountered and expected tokens for syntax errors
        if (errorToken.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
                errorToken.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
            return result.toString();
        }

        // append last encountered token
        result.append("Encountered: ");
        String lastToken = SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken.sym));
        if (lastToken != null) {
        	result.append(lastToken);
        } else {
        	result.append("Unknown last token with id: " + errorToken.sym);
        }
        // Append expected tokens
        result.append('\n');
        result.append("Expected: ");
        String expectedToken = null;
        Integer tokenId = null;
        for (int i = 0; i < expectedTokenIds.size(); ++i) {
            tokenId = expectedTokenIds.get(i);
             // keywords hints
            if (SqlScanner.isKeyword(lastToken) && tokenId.intValue() == SqlParserSymbols.IDENT) {
            	result.append(String.format("%s is keyword, maybe `%s`", lastToken, lastToken) + ", ");
            	continue;
            }

			if (reportExpectedToken(tokenId)) {
                expectedToken = SqlScanner.tokenIdMap.get(tokenId);
                result.append(expectedToken + ", ");
            }
        }
        // remove trailing ", "
        result.delete(result.length()-2, result.length());
        result.append('\n');

        return result.toString();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 746: // ident_or_text ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case746(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 745: // ident_or_text ::= ident 
            {
               CUP$SqlParser$result = case745(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 744: // ident ::= keyword 
            {
               CUP$SqlParser$result = case744(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 743: // ident ::= IDENT 
            {
               CUP$SqlParser$result = case743(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 742: // keyword ::= KW_FREE 
            {
               CUP$SqlParser$result = case742(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 741: // keyword ::= KW_MAX 
            {
               CUP$SqlParser$result = case741(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 740: // keyword ::= KW_MIN 
            {
               CUP$SqlParser$result = case740(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 739: // keyword ::= KW_SUM 
            {
               CUP$SqlParser$result = case739(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 738: // keyword ::= KW_COUNT 
            {
               CUP$SqlParser$result = case738(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 737: // keyword ::= KW_MIGRATIONS 
            {
               CUP$SqlParser$result = case737(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 736: // keyword ::= KW_MIGRATE 
            {
               CUP$SqlParser$result = case736(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 735: // keyword ::= KW_LINK 
            {
               CUP$SqlParser$result = case735(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 734: // keyword ::= KW_CLUSTERS 
            {
               CUP$SqlParser$result = case734(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 733: // keyword ::= KW_CLUSTER 
            {
               CUP$SqlParser$result = case733(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 732: // keyword ::= KW_WORK 
            {
               CUP$SqlParser$result = case732(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 731: // keyword ::= KW_WARNINGS 
            {
               CUP$SqlParser$result = case731(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 730: // keyword ::= KW_VIEW 
            {
               CUP$SqlParser$result = case730(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 729: // keyword ::= KW_VARIABLES 
            {
               CUP$SqlParser$result = case729(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 728: // keyword ::= KW_USER 
            {
               CUP$SqlParser$result = case728(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 727: // keyword ::= KW_UNCOMMITTED 
            {
               CUP$SqlParser$result = case727(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 726: // keyword ::= KW_TYPES 
            {
               CUP$SqlParser$result = case726(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 725: // keyword ::= KW_TRIGGERS 
            {
               CUP$SqlParser$result = case725(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 724: // keyword ::= KW_TRANSACTION 
            {
               CUP$SqlParser$result = case724(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 723: // keyword ::= KW_TIMESTAMP 
            {
               CUP$SqlParser$result = case723(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 722: // keyword ::= KW_THAN 
            {
               CUP$SqlParser$result = case722(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 721: // keyword ::= KW_TABLES 
            {
               CUP$SqlParser$result = case721(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 720: // keyword ::= KW_STRING 
            {
               CUP$SqlParser$result = case720(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 719: // keyword ::= KW_STORAGE 
            {
               CUP$SqlParser$result = case719(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 718: // keyword ::= KW_STATUS 
            {
               CUP$SqlParser$result = case718(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 717: // keyword ::= KW_START 
            {
               CUP$SqlParser$result = case717(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 716: // keyword ::= KW_SPLIT 
            {
               CUP$SqlParser$result = case716(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 715: // keyword ::= KW_SONAME 
            {
               CUP$SqlParser$result = case715(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 714: // keyword ::= KW_SNAPSHOT 
            {
               CUP$SqlParser$result = case714(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 713: // keyword ::= KW_SESSION 
            {
               CUP$SqlParser$result = case713(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 712: // keyword ::= KW_SERIALIZABLE 
            {
               CUP$SqlParser$result = case712(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 711: // keyword ::= KW_ROLLUP 
            {
               CUP$SqlParser$result = case711(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 710: // keyword ::= KW_ROLLBACK 
            {
               CUP$SqlParser$result = case710(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 709: // keyword ::= KW_RESTORE 
            {
               CUP$SqlParser$result = case709(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 708: // keyword ::= KW_RESOURCE 
            {
               CUP$SqlParser$result = case708(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 707: // keyword ::= KW_REPEATABLE 
            {
               CUP$SqlParser$result = case707(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 706: // keyword ::= KW_RECOVER 
            {
               CUP$SqlParser$result = case706(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 705: // keyword ::= KW_RANDOM 
            {
               CUP$SqlParser$result = case705(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 704: // keyword ::= KW_QUOTA 
            {
               CUP$SqlParser$result = case704(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 703: // keyword ::= KW_QUERY 
            {
               CUP$SqlParser$result = case703(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 702: // keyword ::= KW_PROPERTY 
            {
               CUP$SqlParser$result = case702(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 701: // keyword ::= KW_PROPERTIES 
            {
               CUP$SqlParser$result = case701(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 700: // keyword ::= KW_PROCESSLIST 
            {
               CUP$SqlParser$result = case700(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 699: // keyword ::= KW_PROC 
            {
               CUP$SqlParser$result = case699(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 698: // keyword ::= KW_PLUGINS 
            {
               CUP$SqlParser$result = case698(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 697: // keyword ::= KW_PLUGIN 
            {
               CUP$SqlParser$result = case697(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 696: // keyword ::= KW_PASSWORD 
            {
               CUP$SqlParser$result = case696(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 695: // keyword ::= KW_PARTITIONS 
            {
               CUP$SqlParser$result = case695(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 694: // keyword ::= KW_OPEN 
            {
               CUP$SqlParser$result = case694(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 693: // keyword ::= KW_ONLY 
            {
               CUP$SqlParser$result = case693(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 692: // keyword ::= KW_OFFSET 
            {
               CUP$SqlParser$result = case692(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 691: // keyword ::= KW_NO 
            {
               CUP$SqlParser$result = case691(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 690: // keyword ::= KW_NEGATIVE 
            {
               CUP$SqlParser$result = case690(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 689: // keyword ::= KW_NAMES 
            {
               CUP$SqlParser$result = case689(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 688: // keyword ::= KW_NAME 
            {
               CUP$SqlParser$result = case688(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 687: // keyword ::= KW_MODIFY 
            {
               CUP$SqlParser$result = case687(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 686: // keyword ::= KW_MERGE 
            {
               CUP$SqlParser$result = case686(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 685: // keyword ::= KW_LOCAL 
            {
               CUP$SqlParser$result = case685(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 684: // keyword ::= KW_LEVEL 
            {
               CUP$SqlParser$result = case684(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 683: // keyword ::= KW_LESS 
            {
               CUP$SqlParser$result = case683(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 682: // keyword ::= KW_LABEL 
            {
               CUP$SqlParser$result = case682(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 681: // keyword ::= KW_ISOLATION 
            {
               CUP$SqlParser$result = case681(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 680: // keyword ::= KW_ISNULL 
            {
               CUP$SqlParser$result = case680(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 679: // keyword ::= KW_INDEXES 
            {
               CUP$SqlParser$result = case679(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 678: // keyword ::= KW_IDENTIFIED 
            {
               CUP$SqlParser$result = case678(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 677: // keyword ::= KW_HELP 
            {
               CUP$SqlParser$result = case677(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 676: // keyword ::= KW_HASH 
            {
               CUP$SqlParser$result = case676(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 675: // keyword ::= KW_GLOBAL 
            {
               CUP$SqlParser$result = case675(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 674: // keyword ::= KW_EXTERNAL 
            {
               CUP$SqlParser$result = case674(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 673: // keyword ::= KW_EVENTS 
            {
               CUP$SqlParser$result = case673(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 672: // keyword ::= KW_ERRORS 
            {
               CUP$SqlParser$result = case672(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 671: // keyword ::= KW_ENGINES 
            {
               CUP$SqlParser$result = case671(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 670: // keyword ::= KW_ENGINE 
            {
               CUP$SqlParser$result = case670(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 669: // keyword ::= KW_END 
            {
               CUP$SqlParser$result = case669(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 668: // keyword ::= KW_FUNCTION 
            {
               CUP$SqlParser$result = case668(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 667: // keyword ::= KW_FIRST 
            {
               CUP$SqlParser$result = case667(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 666: // keyword ::= KW_BUCKETS 
            {
               CUP$SqlParser$result = case666(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 665: // keyword ::= KW_DISTINCTPCSA 
            {
               CUP$SqlParser$result = case665(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 664: // keyword ::= KW_DISTINCTPC 
            {
               CUP$SqlParser$result = case664(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 663: // keyword ::= KW_DATETIME 
            {
               CUP$SqlParser$result = case663(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 662: // keyword ::= KW_DATE 
            {
               CUP$SqlParser$result = case662(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 661: // keyword ::= KW_DATA 
            {
               CUP$SqlParser$result = case661(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 660: // keyword ::= KW_CONNECTION_ID 
            {
               CUP$SqlParser$result = case660(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 659: // keyword ::= KW_CONNECTION 
            {
               CUP$SqlParser$result = case659(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 658: // keyword ::= KW_COMMIT 
            {
               CUP$SqlParser$result = case658(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 657: // keyword ::= KW_COLLATION 
            {
               CUP$SqlParser$result = case657(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 656: // keyword ::= KW_CONSISTENT 
            {
               CUP$SqlParser$result = case656(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 655: // keyword ::= KW_COMMITTED 
            {
               CUP$SqlParser$result = case655(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 654: // keyword ::= KW_COMMENT 
            {
               CUP$SqlParser$result = case654(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 653: // keyword ::= KW_COLUMNS 
            {
               CUP$SqlParser$result = case653(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 652: // keyword ::= KW_CHARSET 
            {
               CUP$SqlParser$result = case652(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 651: // keyword ::= KW_CHAIN 
            {
               CUP$SqlParser$result = case651(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 650: // keyword ::= KW_BACKENDS 
            {
               CUP$SqlParser$result = case650(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 649: // keyword ::= KW_BROKER 
            {
               CUP$SqlParser$result = case649(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 648: // keyword ::= KW_BOOLEAN 
            {
               CUP$SqlParser$result = case648(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 647: // keyword ::= KW_BEGIN 
            {
               CUP$SqlParser$result = case647(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 646: // keyword ::= KW_BACKUP 
            {
               CUP$SqlParser$result = case646(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 645: // keyword ::= KW_AUTHORS 
            {
               CUP$SqlParser$result = case645(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 644: // keyword ::= KW_AGGREGATE 
            {
               CUP$SqlParser$result = case644(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 643: // keyword ::= KW_AFTER 
            {
               CUP$SqlParser$result = case643(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 642: // opt_release ::= KW_NO KW_RELEASE 
            {
               CUP$SqlParser$result = case642(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 641: // opt_release ::= KW_RELEASE 
            {
               CUP$SqlParser$result = case641(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 640: // opt_release ::= 
            {
               CUP$SqlParser$result = case640(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 639: // opt_chain ::= KW_AND KW_CHAIN 
            {
               CUP$SqlParser$result = case639(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 638: // opt_chain ::= KW_AND KW_NO KW_CHAIN 
            {
               CUP$SqlParser$result = case638(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 637: // opt_chain ::= 
            {
               CUP$SqlParser$result = case637(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 636: // opt_work ::= KW_WORK 
            {
               CUP$SqlParser$result = case636(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 635: // opt_work ::= 
            {
               CUP$SqlParser$result = case635(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 634: // opt_with_consistent_snapshot ::= KW_WITH KW_CONSISTENT KW_SNAPSHOT 
            {
               CUP$SqlParser$result = case634(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 633: // opt_with_consistent_snapshot ::= 
            {
               CUP$SqlParser$result = case633(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 632: // unsupported_stmt ::= KW_ROLLBACK opt_work opt_chain opt_release 
            {
               CUP$SqlParser$result = case632(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 631: // unsupported_stmt ::= KW_COMMIT opt_work opt_chain opt_release 
            {
               CUP$SqlParser$result = case631(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 630: // unsupported_stmt ::= KW_BEGIN opt_work 
            {
               CUP$SqlParser$result = case630(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 629: // unsupported_stmt ::= KW_START KW_TRANSACTION opt_with_consistent_snapshot 
            {
               CUP$SqlParser$result = case629(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 628: // integer_list ::= INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case628(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 627: // integer_list ::= integer_list COMMA INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case627(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // string_list ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case626(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // string_list ::= string_list COMMA STRING_LITERAL 
            {
               CUP$SqlParser$result = case625(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // privilege_list ::= privilege_type 
            {
               CUP$SqlParser$result = case624(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // privilege_list ::= privilege_list COMMA privilege_type 
            {
               CUP$SqlParser$result = case623(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // privilege_type ::= KW_ALL 
            {
               CUP$SqlParser$result = case622(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // privilege_type ::= ident 
            {
               CUP$SqlParser$result = case621(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // primitive_type ::= KW_HLL 
            {
               CUP$SqlParser$result = case620(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // primitive_type ::= KW_DECIMAL 
            {
               CUP$SqlParser$result = case619(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // primitive_type ::= KW_DATETIME 
            {
               CUP$SqlParser$result = case618(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // primitive_type ::= KW_DATE 
            {
               CUP$SqlParser$result = case617(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // primitive_type ::= KW_DOUBLE 
            {
               CUP$SqlParser$result = case616(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // primitive_type ::= KW_FLOAT 
            {
               CUP$SqlParser$result = case615(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // primitive_type ::= KW_BOOLEAN 
            {
               CUP$SqlParser$result = case614(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // primitive_type ::= KW_LARGEINT 
            {
               CUP$SqlParser$result = case613(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // primitive_type ::= KW_BIGINT 
            {
               CUP$SqlParser$result = case612(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // primitive_type ::= KW_INT 
            {
               CUP$SqlParser$result = case611(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // primitive_type ::= KW_SMALLINT 
            {
               CUP$SqlParser$result = case610(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // primitive_type ::= KW_TINYINT 
            {
               CUP$SqlParser$result = case609(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // column_ref ::= ident DOT ident DOT ident 
            {
               CUP$SqlParser$result = case608(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // column_ref ::= ident DOT ident 
            {
               CUP$SqlParser$result = case607(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // column_ref ::= ident 
            {
               CUP$SqlParser$result = case606(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // compound_predicate ::= NOT expr 
            {
               CUP$SqlParser$result = case605(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // compound_predicate ::= KW_NOT expr 
            {
               CUP$SqlParser$result = case604(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // compound_predicate ::= expr KW_OR expr 
            {
               CUP$SqlParser$result = case603(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // compound_predicate ::= expr KW_AND expr 
            {
               CUP$SqlParser$result = case602(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // subquery ::= LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case601(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // subquery ::= LPAREN subquery RPAREN 
            {
               CUP$SqlParser$result = case600(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // in_predicate ::= expr KW_NOT KW_IN subquery 
            {
               CUP$SqlParser$result = case599(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // in_predicate ::= expr KW_IN subquery 
            {
               CUP$SqlParser$result = case598(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // in_predicate ::= expr KW_NOT KW_IN LPAREN expr_list RPAREN 
            {
               CUP$SqlParser$result = case597(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // in_predicate ::= expr KW_IN LPAREN expr_list RPAREN 
            {
               CUP$SqlParser$result = case596(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // between_predicate ::= expr KW_NOT KW_BETWEEN predicate KW_AND expr 
            {
               CUP$SqlParser$result = case595(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // between_predicate ::= expr KW_NOT KW_BETWEEN non_pred_expr KW_AND expr 
            {
               CUP$SqlParser$result = case594(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // between_predicate ::= expr KW_BETWEEN predicate KW_AND expr 
            {
               CUP$SqlParser$result = case593(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // between_predicate ::= expr KW_BETWEEN non_pred_expr KW_AND expr 
            {
               CUP$SqlParser$result = case592(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // like_predicate ::= expr KW_NOT KW_REGEXP expr 
            {
               CUP$SqlParser$result = case591(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // like_predicate ::= expr KW_NOT KW_LIKE expr 
            {
               CUP$SqlParser$result = case590(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // like_predicate ::= expr KW_REGEXP expr 
            {
               CUP$SqlParser$result = case589(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // like_predicate ::= expr KW_LIKE expr 
            {
               CUP$SqlParser$result = case588(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // comparison_predicate ::= expr LESSTHAN EQUAL GREATERTHAN expr 
            {
               CUP$SqlParser$result = case587(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // comparison_predicate ::= expr GREATERTHAN expr 
            {
               CUP$SqlParser$result = case586(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // comparison_predicate ::= expr LESSTHAN expr 
            {
               CUP$SqlParser$result = case585(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // comparison_predicate ::= expr GREATERTHAN EQUAL expr 
            {
               CUP$SqlParser$result = case584(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // comparison_predicate ::= expr LESSTHAN EQUAL expr 
            {
               CUP$SqlParser$result = case583(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // comparison_predicate ::= expr LESSTHAN GREATERTHAN expr 
            {
               CUP$SqlParser$result = case582(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // comparison_predicate ::= expr NOT EQUAL expr 
            {
               CUP$SqlParser$result = case581(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // comparison_predicate ::= expr EQUAL expr 
            {
               CUP$SqlParser$result = case580(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // predicate ::= LPAREN predicate RPAREN 
            {
               CUP$SqlParser$result = case579(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // predicate ::= like_predicate 
            {
               CUP$SqlParser$result = case578(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // predicate ::= exists_predicate 
            {
               CUP$SqlParser$result = case577(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // predicate ::= in_predicate 
            {
               CUP$SqlParser$result = case576(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // predicate ::= compound_predicate 
            {
               CUP$SqlParser$result = case575(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // predicate ::= comparison_predicate 
            {
               CUP$SqlParser$result = case574(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // predicate ::= between_predicate 
            {
               CUP$SqlParser$result = case573(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // predicate ::= expr KW_IS KW_NOT KW_NULL 
            {
               CUP$SqlParser$result = case572(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // predicate ::= KW_ISNULL LPAREN expr RPAREN 
            {
               CUP$SqlParser$result = case571(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // predicate ::= expr KW_IS KW_NULL 
            {
               CUP$SqlParser$result = case570(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // function_params ::= KW_DISTINCT expr_list 
            {
               CUP$SqlParser$result = case569(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // function_params ::= KW_ALL expr_list 
            {
               CUP$SqlParser$result = case568(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // function_params ::= expr_list 
            {
               CUP$SqlParser$result = case567(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // function_params ::= KW_ALL STAR 
            {
               CUP$SqlParser$result = case566(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // function_params ::= STAR 
            {
               CUP$SqlParser$result = case565(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // literal ::= NUMERIC_OVERFLOW 
            {
               CUP$SqlParser$result = case564(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // literal ::= UNMATCHED_STRING_LITERAL expr 
            {
               CUP$SqlParser$result = case563(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // literal ::= KW_NULL 
            {
               CUP$SqlParser$result = case562(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // literal ::= KW_FALSE 
            {
               CUP$SqlParser$result = case561(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // literal ::= KW_TRUE 
            {
               CUP$SqlParser$result = case560(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // literal ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case559(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // literal ::= DECIMAL_LITERAL 
            {
               CUP$SqlParser$result = case558(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // literal ::= FLOATINGPOINT_LITERAL 
            {
               CUP$SqlParser$result = case557(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // literal ::= LARGE_INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case556(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // literal ::= INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case555(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // timestamp_arithmetic_expr ::= function_name LPAREN expr_list COMMA KW_INTERVAL expr ident RPAREN 
            {
               CUP$SqlParser$result = case554(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // timestamp_arithmetic_expr ::= expr SUBTRACT KW_INTERVAL expr ident 
            {
               CUP$SqlParser$result = case553(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // timestamp_arithmetic_expr ::= expr ADD KW_INTERVAL expr ident 
            {
               CUP$SqlParser$result = case552(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // timestamp_arithmetic_expr ::= KW_INTERVAL expr ident ADD expr 
            {
               CUP$SqlParser$result = case551(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // arithmetic_expr ::= BITNOT expr 
            {
               CUP$SqlParser$result = case550(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // arithmetic_expr ::= expr BITXOR expr 
            {
               CUP$SqlParser$result = case549(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // arithmetic_expr ::= expr BITOR expr 
            {
               CUP$SqlParser$result = case548(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // arithmetic_expr ::= expr BITAND expr 
            {
               CUP$SqlParser$result = case547(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // arithmetic_expr ::= expr SUBTRACT expr 
            {
               CUP$SqlParser$result = case546(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // arithmetic_expr ::= expr ADD expr 
            {
               CUP$SqlParser$result = case545(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // arithmetic_expr ::= expr KW_DIV expr 
            {
               CUP$SqlParser$result = case544(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // arithmetic_expr ::= expr MOD expr 
            {
               CUP$SqlParser$result = case543(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // arithmetic_expr ::= expr DIVIDE expr 
            {
               CUP$SqlParser$result = case542(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // arithmetic_expr ::= expr STAR expr 
            {
               CUP$SqlParser$result = case541(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // window_boundary ::= expr KW_FOLLOWING 
            {
               CUP$SqlParser$result = case540(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // window_boundary ::= expr KW_PRECEDING 
            {
               CUP$SqlParser$result = case539(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // window_boundary ::= KW_CURRENT KW_ROW 
            {
               CUP$SqlParser$result = case538(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // window_boundary ::= KW_UNBOUNDED KW_FOLLOWING 
            {
               CUP$SqlParser$result = case537(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // window_boundary ::= KW_UNBOUNDED KW_PRECEDING 
            {
               CUP$SqlParser$result = case536(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // window_type ::= KW_RANGE 
            {
               CUP$SqlParser$result = case535(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // window_type ::= KW_ROWS 
            {
               CUP$SqlParser$result = case534(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // opt_window_clause ::= 
            {
               CUP$SqlParser$result = case533(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // opt_window_clause ::= window_type KW_BETWEEN window_boundary KW_AND window_boundary 
            {
               CUP$SqlParser$result = case532(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // opt_window_clause ::= window_type window_boundary 
            {
               CUP$SqlParser$result = case531(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // opt_partition_by_clause ::= 
            {
               CUP$SqlParser$result = case530(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // opt_partition_by_clause ::= KW_PARTITION KW_BY expr_list 
            {
               CUP$SqlParser$result = case529(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // analytic_expr ::= function_call_expr KW_OVER LPAREN opt_partition_by_clause order_by_clause opt_window_clause RPAREN 
            {
               CUP$SqlParser$result = case528(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // func_arg_list ::= func_arg_list COMMA expr 
            {
               CUP$SqlParser$result = case527(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // func_arg_list ::= expr 
            {
               CUP$SqlParser$result = case526(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // non_pred_expr ::= KW_NULL KW_IS KW_NOT KW_NULL 
            {
               CUP$SqlParser$result = case525(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // non_pred_expr ::= KW_NULL KW_IS KW_NULL 
            {
               CUP$SqlParser$result = case524(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // non_pred_expr ::= subquery 
            {
               CUP$SqlParser$result = case523(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // non_pred_expr ::= KW_PASSWORD LPAREN STRING_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case522(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // non_pred_expr ::= KW_CONNECTION_ID LPAREN RPAREN 
            {
               CUP$SqlParser$result = case521(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // non_pred_expr ::= KW_CURRENT_USER LPAREN RPAREN 
            {
               CUP$SqlParser$result = case520(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // non_pred_expr ::= KW_DATABASE LPAREN RPAREN 
            {
               CUP$SqlParser$result = case519(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // non_pred_expr ::= KW_TRIM LPAREN function_params RPAREN 
            {
               CUP$SqlParser$result = case518(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // non_pred_expr ::= LPAREN non_pred_expr RPAREN 
            {
               CUP$SqlParser$result = case517(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // non_pred_expr ::= arithmetic_expr 
            {
               CUP$SqlParser$result = case516(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // non_pred_expr ::= timestamp_arithmetic_expr 
            {
               CUP$SqlParser$result = case515(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // non_pred_expr ::= column_ref 
            {
               CUP$SqlParser$result = case514(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // non_pred_expr ::= case_expr 
            {
               CUP$SqlParser$result = case513(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // non_pred_expr ::= cast_expr 
            {
               CUP$SqlParser$result = case512(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // non_pred_expr ::= KW_IF LPAREN expr_list RPAREN 
            {
               CUP$SqlParser$result = case511(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // non_pred_expr ::= analytic_expr 
            {
               CUP$SqlParser$result = case510(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // non_pred_expr ::= KW_EXTRACT LPAREN function_name KW_FROM func_arg_list RPAREN 
            {
               CUP$SqlParser$result = case509(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // non_pred_expr ::= KW_TIMESTAMP STRING_LITERAL 
            {
               CUP$SqlParser$result = case508(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // non_pred_expr ::= KW_DATE STRING_LITERAL 
            {
               CUP$SqlParser$result = case507(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // non_pred_expr ::= function_call_expr 
            {
               CUP$SqlParser$result = case506(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // non_pred_expr ::= literal 
            {
               CUP$SqlParser$result = case505(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // non_pred_expr ::= AT AT var_ident_type ident 
            {
               CUP$SqlParser$result = case504(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // non_pred_expr ::= AT AT ident 
            {
               CUP$SqlParser$result = case503(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // non_pred_expr ::= sign_chain_expr 
            {
               CUP$SqlParser$result = case502(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // exists_predicate ::= KW_EXISTS subquery 
            {
               CUP$SqlParser$result = case501(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // function_call_expr ::= function_name LPAREN function_params RPAREN 
            {
               CUP$SqlParser$result = case500(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // function_call_expr ::= function_name LPAREN RPAREN 
            {
               CUP$SqlParser$result = case499(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // expr ::= predicate 
            {
               CUP$SqlParser$result = case498(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // expr ::= non_pred_expr 
            {
               CUP$SqlParser$result = case497(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // sign_chain_expr ::= ADD expr 
            {
               CUP$SqlParser$result = case496(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // sign_chain_expr ::= SUBTRACT expr 
            {
               CUP$SqlParser$result = case495(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // case_else_clause ::= 
            {
               CUP$SqlParser$result = case494(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // case_else_clause ::= KW_ELSE expr 
            {
               CUP$SqlParser$result = case493(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // case_when_clause_list ::= case_when_clause_list KW_WHEN expr KW_THEN expr 
            {
               CUP$SqlParser$result = case492(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // case_when_clause_list ::= KW_WHEN expr KW_THEN expr 
            {
               CUP$SqlParser$result = case491(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // case_expr ::= KW_CASE case_when_clause_list case_else_clause KW_END 
            {
               CUP$SqlParser$result = case490(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // case_expr ::= KW_CASE expr case_when_clause_list case_else_clause KW_END 
            {
               CUP$SqlParser$result = case489(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // cast_expr ::= KW_CAST LPAREN expr KW_AS KW_CHAR LPAREN non_pred_expr RPAREN opt_charset_name RPAREN 
            {
               CUP$SqlParser$result = case488(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // cast_expr ::= KW_CAST LPAREN expr KW_AS KW_CHAR opt_charset_name RPAREN 
            {
               CUP$SqlParser$result = case487(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // cast_expr ::= KW_CAST LPAREN expr KW_AS primitive_type LPAREN non_pred_expr RPAREN RPAREN 
            {
               CUP$SqlParser$result = case486(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // cast_expr ::= KW_CAST LPAREN expr KW_AS primitive_type RPAREN 
            {
               CUP$SqlParser$result = case485(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // cast_expr ::= KW_CAST LPAREN expr KW_AS KW_STRING RPAREN 
            {
               CUP$SqlParser$result = case484(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // limit_clause ::= KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case483(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // limit_clause ::= KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case482(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // limit_clause ::= 
            {
               CUP$SqlParser$result = case481(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // limit_clause ::= KW_LIMIT INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case480(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // order_by_element ::= expr KW_DESC 
            {
               CUP$SqlParser$result = case479(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // order_by_element ::= expr KW_ASC 
            {
               CUP$SqlParser$result = case478(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // order_by_element ::= expr 
            {
               CUP$SqlParser$result = case477(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // order_by_elements ::= order_by_elements COMMA order_by_element 
            {
               CUP$SqlParser$result = case476(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // order_by_elements ::= order_by_element 
            {
               CUP$SqlParser$result = case475(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // order_by_clause ::= 
            {
               CUP$SqlParser$result = case474(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // order_by_clause ::= KW_ORDER KW_BY order_by_elements 
            {
               CUP$SqlParser$result = case473(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // having_clause ::= 
            {
               CUP$SqlParser$result = case472(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // having_clause ::= KW_HAVING expr 
            {
               CUP$SqlParser$result = case471(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // group_by_clause ::= 
            {
               CUP$SqlParser$result = case470(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // group_by_clause ::= KW_GROUP KW_BY expr_list 
            {
               CUP$SqlParser$result = case469(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // where_clause ::= 
            {
               CUP$SqlParser$result = case468(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // where_clause ::= KW_WHERE expr 
            {
               CUP$SqlParser$result = case467(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // expr_list ::= expr_list COMMA expr 
            {
               CUP$SqlParser$result = case466(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // expr_list ::= expr 
            {
               CUP$SqlParser$result = case465(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // ident_list ::= ident_list COMMA ident 
            {
               CUP$SqlParser$result = case464(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // ident_list ::= ident 
            {
               CUP$SqlParser$result = case463(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // opt_sort_hints ::= 
            {
               CUP$SqlParser$result = case462(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // opt_sort_hints ::= LBRACKET ident_list RBRACKET 
            {
               CUP$SqlParser$result = case461(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // opt_plan_hints ::= 
            {
               CUP$SqlParser$result = case460(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // opt_plan_hints ::= LBRACKET ident_list RBRACKET 
            {
               CUP$SqlParser$result = case459(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // opt_plan_hints ::= COMMENTED_PLAN_HINTS 
            {
               CUP$SqlParser$result = case458(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // opt_outer ::= 
            {
               CUP$SqlParser$result = case457(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // opt_outer ::= KW_OUTER 
            {
               CUP$SqlParser$result = case456(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // opt_inner ::= 
            {
               CUP$SqlParser$result = case455(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // opt_inner ::= KW_INNER 
            {
               CUP$SqlParser$result = case454(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // join_operator ::= KW_CROSS KW_JOIN 
            {
               CUP$SqlParser$result = case453(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // join_operator ::= KW_RIGHT KW_ANTI KW_JOIN 
            {
               CUP$SqlParser$result = case452(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // join_operator ::= KW_LEFT KW_ANTI KW_JOIN 
            {
               CUP$SqlParser$result = case451(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // join_operator ::= KW_RIGHT KW_SEMI KW_JOIN 
            {
               CUP$SqlParser$result = case450(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // join_operator ::= KW_LEFT KW_SEMI KW_JOIN 
            {
               CUP$SqlParser$result = case449(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // join_operator ::= KW_FULL opt_outer KW_JOIN 
            {
               CUP$SqlParser$result = case448(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // join_operator ::= KW_RIGHT opt_outer KW_JOIN 
            {
               CUP$SqlParser$result = case447(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // join_operator ::= KW_MERGE KW_JOIN 
            {
               CUP$SqlParser$result = case446(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // join_operator ::= KW_LEFT opt_outer KW_JOIN 
            {
               CUP$SqlParser$result = case445(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // join_operator ::= opt_inner KW_JOIN 
            {
               CUP$SqlParser$result = case444(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // opt_using_partition ::= KW_PARTITION LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case443(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // opt_using_partition ::= 
            {
               CUP$SqlParser$result = case442(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // opt_table_alias ::= EQUAL ident 
            {
               CUP$SqlParser$result = case441(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // opt_table_alias ::= KW_AS ident 
            {
               CUP$SqlParser$result = case440(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // opt_table_alias ::= ident 
            {
               CUP$SqlParser$result = case439(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // opt_table_alias ::= 
            {
               CUP$SqlParser$result = case438(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // base_table_ref ::= table_name opt_using_partition opt_table_alias 
            {
               CUP$SqlParser$result = case437(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // inline_view_ref ::= LPAREN query_stmt RPAREN opt_table_alias 
            {
               CUP$SqlParser$result = case436(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // table_ref ::= inline_view_ref 
            {
               CUP$SqlParser$result = case435(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // table_ref ::= base_table_ref 
            {
               CUP$SqlParser$result = case434(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints KW_USING LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case433(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints KW_ON expr 
            {
               CUP$SqlParser$result = case432(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints 
            {
               CUP$SqlParser$result = case431(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // table_ref_list ::= table_ref_list COMMA table_ref opt_sort_hints 
            {
               CUP$SqlParser$result = case430(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // table_ref_list ::= table_ref opt_sort_hints 
            {
               CUP$SqlParser$result = case429(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // from_clause ::= KW_FROM table_ref_list 
            {
               CUP$SqlParser$result = case428(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // function_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case427(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // function_name ::= ident 
            {
               CUP$SqlParser$result = case426(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // table_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case425(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // table_name ::= ident 
            {
               CUP$SqlParser$result = case424(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // star_expr ::= ident DOT ident DOT STAR 
            {
               CUP$SqlParser$result = case423(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // star_expr ::= ident DOT STAR 
            {
               CUP$SqlParser$result = case422(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // select_alias ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case421(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // select_alias ::= KW_AS STRING_LITERAL 
            {
               CUP$SqlParser$result = case420(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // select_alias ::= ident 
            {
               CUP$SqlParser$result = case419(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // select_alias ::= KW_AS ident 
            {
               CUP$SqlParser$result = case418(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // select_alias ::= 
            {
               CUP$SqlParser$result = case417(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // select_list_item ::= star_expr 
            {
               CUP$SqlParser$result = case416(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // select_list_item ::= expr opt_collate select_alias 
            {
               CUP$SqlParser$result = case415(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // select_sublist ::= select_list_item 
            {
               CUP$SqlParser$result = case414(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // select_sublist ::= STAR COMMA select_list_item 
            {
               CUP$SqlParser$result = case413(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // select_sublist ::= select_sublist COMMA STAR 
            {
               CUP$SqlParser$result = case412(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // select_sublist ::= select_sublist COMMA select_list_item 
            {
               CUP$SqlParser$result = case411(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // select_list ::= STAR 
            {
               CUP$SqlParser$result = case410(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // select_list ::= select_sublist 
            {
               CUP$SqlParser$result = case409(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // select_clause ::= KW_SELECT KW_DISTINCT select_list 
            {
               CUP$SqlParser$result = case408(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // select_clause ::= KW_SELECT KW_ALL select_list 
            {
               CUP$SqlParser$result = case407(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // select_clause ::= KW_SELECT select_list 
            {
               CUP$SqlParser$result = case406(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // select_stmt ::= select_clause from_clause where_clause group_by_clause having_clause order_by_clause limit_clause 
            {
               CUP$SqlParser$result = case405(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // select_stmt ::= select_clause limit_clause 
            {
               CUP$SqlParser$result = case404(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // set_expr_or_default ::= ident 
            {
               CUP$SqlParser$result = case403(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // set_expr_or_default ::= KW_ALL 
            {
               CUP$SqlParser$result = case402(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // set_expr_or_default ::= KW_ON 
            {
               CUP$SqlParser$result = case401(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // set_expr_or_default ::= KW_DEFAULT 
            {
               CUP$SqlParser$result = case400(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // set_expr_or_default ::= literal 
            {
               CUP$SqlParser$result = case399(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // isolation_types ::= KW_SERIALIZABLE 
            {
               CUP$SqlParser$result = case398(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // isolation_types ::= KW_REPEATABLE KW_READ 
            {
               CUP$SqlParser$result = case397(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // isolation_types ::= KW_READ KW_COMMITTED 
            {
               CUP$SqlParser$result = case396(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // isolation_types ::= KW_READ KW_UNCOMMITTED 
            {
               CUP$SqlParser$result = case395(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // isolation_level ::= KW_ISOLATION KW_LEVEL isolation_types 
            {
               CUP$SqlParser$result = case394(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // transaction_access_mode ::= KW_READ KW_WRITE 
            {
               CUP$SqlParser$result = case393(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // transaction_access_mode ::= KW_READ KW_ONLY 
            {
               CUP$SqlParser$result = case392(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // transaction_characteristics ::= isolation_level COMMA transaction_access_mode 
            {
               CUP$SqlParser$result = case391(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // transaction_characteristics ::= transaction_access_mode COMMA isolation_level 
            {
               CUP$SqlParser$result = case390(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // transaction_characteristics ::= isolation_level 
            {
               CUP$SqlParser$result = case389(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // transaction_characteristics ::= transaction_access_mode 
            {
               CUP$SqlParser$result = case388(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // equal ::= SET_VAR 
            {
               CUP$SqlParser$result = case387(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // equal ::= EQUAL 
            {
               CUP$SqlParser$result = case386(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // var_ident_type ::= KW_SESSION DOT 
            {
               CUP$SqlParser$result = case385(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // var_ident_type ::= KW_LOCAL DOT 
            {
               CUP$SqlParser$result = case384(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // var_ident_type ::= KW_GLOBAL DOT 
            {
               CUP$SqlParser$result = case383(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // opt_var_type ::= KW_SESSION 
            {
               CUP$SqlParser$result = case382(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // opt_var_type ::= KW_LOCAL 
            {
               CUP$SqlParser$result = case381(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // opt_var_type ::= KW_GLOBAL 
            {
               CUP$SqlParser$result = case380(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // opt_var_type ::= 
            {
               CUP$SqlParser$result = case379(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // option_type ::= KW_SESSION 
            {
               CUP$SqlParser$result = case378(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // option_type ::= KW_LOCAL 
            {
               CUP$SqlParser$result = case377(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // option_type ::= KW_GLOBAL 
            {
               CUP$SqlParser$result = case376(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // text_or_password ::= KW_PASSWORD LPAREN STRING_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case375(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // text_or_password ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case374(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // variable_name ::= ident 
            {
               CUP$SqlParser$result = case373(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // option_value_no_option_type ::= KW_PASSWORD KW_FOR STRING_LITERAL equal text_or_password 
            {
               CUP$SqlParser$result = case372(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // option_value_no_option_type ::= KW_PASSWORD equal text_or_password 
            {
               CUP$SqlParser$result = case371(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // option_value_no_option_type ::= KW_NAMES charset_name_or_default opt_collate 
            {
               CUP$SqlParser$result = case370(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // option_value_no_option_type ::= KW_NAMES equal expr 
            {
               CUP$SqlParser$result = case369(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // option_value_no_option_type ::= charset old_or_new_charset_name_or_default 
            {
               CUP$SqlParser$result = case368(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // option_value_no_option_type ::= AT AT var_ident_type variable_name equal set_expr_or_default 
            {
               CUP$SqlParser$result = case367(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // option_value_no_option_type ::= AT AT variable_name equal set_expr_or_default 
            {
               CUP$SqlParser$result = case366(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // option_value_no_option_type ::= AT ident_or_text equal literal 
            {
               CUP$SqlParser$result = case365(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // option_value_no_option_type ::= variable_name equal set_expr_or_default 
            {
               CUP$SqlParser$result = case364(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // option_value_follow_option_type ::= variable_name equal set_expr_or_default 
            {
               CUP$SqlParser$result = case363(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // option_value ::= option_value_no_option_type 
            {
               CUP$SqlParser$result = case362(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // option_value ::= option_type option_value_follow_option_type 
            {
               CUP$SqlParser$result = case361(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // option_value_list ::= option_value_list COMMA option_value 
            {
               CUP$SqlParser$result = case360(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // option_value_list ::= option_value 
            {
               CUP$SqlParser$result = case359(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // option_value_list_continued ::= COMMA option_value_list 
            {
               CUP$SqlParser$result = case358(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // option_value_list_continued ::= 
            {
               CUP$SqlParser$result = case357(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // start_option_value_list_following_option_type ::= KW_TRANSACTION transaction_characteristics 
            {
               CUP$SqlParser$result = case356(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // start_option_value_list_following_option_type ::= option_value_follow_option_type option_value_list_continued 
            {
               CUP$SqlParser$result = case355(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // start_option_value_list ::= option_type start_option_value_list_following_option_type 
            {
               CUP$SqlParser$result = case354(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // start_option_value_list ::= KW_TRANSACTION transaction_characteristics 
            {
               CUP$SqlParser$result = case353(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // start_option_value_list ::= option_value_no_option_type option_value_list_continued 
            {
               CUP$SqlParser$result = case352(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // user_property ::= STRING_LITERAL equal KW_NULL 
            {
               CUP$SqlParser$result = case351(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // user_property ::= STRING_LITERAL equal STRING_LITERAL 
            {
               CUP$SqlParser$result = case350(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // user_property_list ::= user_property_list COMMA user_property 
            {
               CUP$SqlParser$result = case349(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // user_property_list ::= user_property 
            {
               CUP$SqlParser$result = case348(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // set_stmt ::= KW_SET KW_PROPERTY opt_user user_property_list 
            {
               CUP$SqlParser$result = case347(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // set_stmt ::= KW_SET start_option_value_list 
            {
               CUP$SqlParser$result = case346(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // kill_stmt ::= KW_KILL KW_QUERY INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case345(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // kill_stmt ::= KW_KILL KW_CONNECTION INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case344(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // kill_stmt ::= KW_KILL INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case343(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // partition_name ::= ident DOT ident KW_AS ident DOT ident 
            {
               CUP$SqlParser$result = case342(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // partition_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case341(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // partition_name ::= ident KW_AS ident 
            {
               CUP$SqlParser$result = case340(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // partition_name ::= ident 
            {
               CUP$SqlParser$result = case339(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // partition_name_list ::= partition_name_list COMMA partition_name 
            {
               CUP$SqlParser$result = case338(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // partition_name_list ::= partition_name 
            {
               CUP$SqlParser$result = case337(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // opt_partition_name_list ::= LPAREN partition_name_list RPAREN 
            {
               CUP$SqlParser$result = case336(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // opt_partition_name_list ::= 
            {
               CUP$SqlParser$result = case335(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // restore_stmt ::= KW_RESTORE KW_LABEL job_label opt_partition_name_list KW_FROM STRING_LITERAL opt_properties 
            {
               CUP$SqlParser$result = case334(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // backup_stmt ::= KW_BACKUP KW_LABEL job_label opt_partition_name_list KW_INTO STRING_LITERAL opt_properties 
            {
               CUP$SqlParser$result = case333(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // insert_source ::= query_stmt 
            {
               CUP$SqlParser$result = case332(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // insert_target ::= table_name opt_using_partition 
            {
               CUP$SqlParser$result = case331(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // insert_stmt ::= KW_INSERT KW_INTO insert_target opt_col_list opt_plan_hints insert_source 
            {
               CUP$SqlParser$result = case330(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // use_stmt ::= KW_USE ident 
            {
               CUP$SqlParser$result = case329(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // enter_stmt ::= KW_ENTER ident 
            {
               CUP$SqlParser$result = case328(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // union_op ::= KW_UNION KW_ALL 
            {
               CUP$SqlParser$result = case327(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // union_op ::= KW_UNION KW_DISTINCT 
            {
               CUP$SqlParser$result = case326(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // union_op ::= KW_UNION 
            {
               CUP$SqlParser$result = case325(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // union_operand_list ::= union_operand_list union_op union_operand 
            {
               CUP$SqlParser$result = case324(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // union_operand_list ::= union_operand 
            {
               CUP$SqlParser$result = case323(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // union_operand ::= LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case322(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // union_operand ::= select_stmt 
            {
               CUP$SqlParser$result = case321(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case320(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case319(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case318(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements 
            {
               CUP$SqlParser$result = case317(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case316(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case315(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case314(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // with_view_def_list ::= with_view_def_list COMMA with_view_def 
            {
               CUP$SqlParser$result = case313(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // with_view_def_list ::= with_view_def 
            {
               CUP$SqlParser$result = case312(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // with_view_def ::= STRING_LITERAL LPAREN ident_list RPAREN KW_AS LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case311(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // with_view_def ::= ident LPAREN ident_list RPAREN KW_AS LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case310(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // with_view_def ::= STRING_LITERAL KW_AS LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case309(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // with_view_def ::= ident KW_AS LPAREN query_stmt RPAREN 
            {
               CUP$SqlParser$result = case308(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // opt_with_clause ::= 
            {
               CUP$SqlParser$result = case307(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // opt_with_clause ::= KW_WITH with_view_def_list 
            {
               CUP$SqlParser$result = case306(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // query_stmt ::= opt_with_clause union_with_order_by_or_limit 
            {
               CUP$SqlParser$result = case305(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // query_stmt ::= opt_with_clause union_operand_list 
            {
               CUP$SqlParser$result = case304(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // delete_stmt ::= KW_DELETE KW_FROM table_name KW_PARTITION ident where_clause opt_properties 
            {
               CUP$SqlParser$result = case303(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // cancel_param ::= KW_RESTORE opt_db 
            {
               CUP$SqlParser$result = case302(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // cancel_param ::= KW_BACKUP opt_db 
            {
               CUP$SqlParser$result = case301(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // cancel_param ::= KW_DECOMMISSION KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case300(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // cancel_param ::= KW_ALTER KW_TABLE opt_alter_type KW_FROM table_name 
            {
               CUP$SqlParser$result = case299(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // cancel_param ::= KW_LOAD opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case298(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // cancel_stmt ::= KW_CANCEL cancel_param 
            {
               CUP$SqlParser$result = case297(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // describe_command ::= KW_DESC 
            {
               CUP$SqlParser$result = case296(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // describe_command ::= KW_DESCRIBE 
            {
               CUP$SqlParser$result = case295(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // describe_stmt ::= describe_command insert_stmt 
            {
               CUP$SqlParser$result = case294(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // describe_stmt ::= describe_command query_stmt 
            {
               CUP$SqlParser$result = case293(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // describe_stmt ::= describe_command table_name KW_ALL 
            {
               CUP$SqlParser$result = case292(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // describe_stmt ::= describe_command table_name 
            {
               CUP$SqlParser$result = case291(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // opt_alter_type ::= KW_COLUMN 
            {
               CUP$SqlParser$result = case290(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // opt_alter_type ::= KW_ROLLUP 
            {
               CUP$SqlParser$result = case289(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // opt_wild_where ::= KW_WHERE expr 
            {
               CUP$SqlParser$result = case288(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // opt_wild_where ::= KW_LIKE STRING_LITERAL 
            {
               CUP$SqlParser$result = case287(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // opt_wild_where ::= 
            {
               CUP$SqlParser$result = case286(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // opt_full ::= KW_FULL 
            {
               CUP$SqlParser$result = case285(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // opt_full ::= 
            {
               CUP$SqlParser$result = case284(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // from_or_in ::= KW_IN 
            {
               CUP$SqlParser$result = case283(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // from_or_in ::= KW_FROM 
            {
               CUP$SqlParser$result = case282(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // procedure_or_function ::= KW_FUNCTION 
            {
               CUP$SqlParser$result = case281(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // procedure_or_function ::= KW_PROCEDURE 
            {
               CUP$SqlParser$result = case280(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // opt_storage ::= KW_STORAGE 
            {
               CUP$SqlParser$result = case279(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // opt_storage ::= 
            {
               CUP$SqlParser$result = case278(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // collation_name_or_default ::= KW_DEFAULT 
            {
               CUP$SqlParser$result = case277(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // collation_name_or_default ::= ident_or_text 
            {
               CUP$SqlParser$result = case276(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // opt_collate ::= KW_COLLATE collation_name_or_default 
            {
               CUP$SqlParser$result = case275(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // opt_collate ::= 
            {
               CUP$SqlParser$result = case274(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // opt_charset_name ::= charset old_or_new_charset_name_or_default 
            {
               CUP$SqlParser$result = case273(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // opt_charset_name ::= 
            {
               CUP$SqlParser$result = case272(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // old_or_new_charset_name_or_default ::= KW_DEFAULT 
            {
               CUP$SqlParser$result = case271(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // old_or_new_charset_name_or_default ::= ident_or_text 
            {
               CUP$SqlParser$result = case270(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // charset_name_or_default ::= KW_DEFAULT 
            {
               CUP$SqlParser$result = case269(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // charset_name_or_default ::= ident_or_text 
            {
               CUP$SqlParser$result = case268(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // charset ::= KW_CHARSET 
            {
               CUP$SqlParser$result = case267(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // charset ::= KW_CHAR KW_SET 
            {
               CUP$SqlParser$result = case266(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // opt_partition_name ::= KW_PARTITION ident 
            {
               CUP$SqlParser$result = case265(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // opt_partition_name ::= 
            {
               CUP$SqlParser$result = case264(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // opt_db ::= from_or_in ident 
            {
               CUP$SqlParser$result = case263(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // opt_db ::= 
            {
               CUP$SqlParser$result = case262(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // keys_or_index ::= KW_INDEXES 
            {
               CUP$SqlParser$result = case261(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // keys_or_index ::= KW_INDEX 
            {
               CUP$SqlParser$result = case260(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // keys_or_index ::= KW_KEY 
            {
               CUP$SqlParser$result = case259(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // show_param ::= KW_USER 
            {
               CUP$SqlParser$result = case258(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // show_param ::= KW_BACKENDS 
            {
               CUP$SqlParser$result = case257(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // show_param ::= KW_BROKER 
            {
               CUP$SqlParser$result = case256(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // show_param ::= KW_RESTORE opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case255(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // show_param ::= KW_BACKUP opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case254(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // show_param ::= KW_PROPERTY opt_user opt_wild_where 
            {
               CUP$SqlParser$result = case253(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // show_param ::= KW_TABLET KW_FROM table_name 
            {
               CUP$SqlParser$result = case252(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // show_param ::= KW_TABLET INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case251(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // show_param ::= KW_PARTITIONS KW_FROM table_name opt_partition_name 
            {
               CUP$SqlParser$result = case250(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // show_param ::= KW_DATA KW_FROM table_name 
            {
               CUP$SqlParser$result = case249(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // show_param ::= KW_DATA 
            {
               CUP$SqlParser$result = case248(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // show_param ::= KW_ALTER KW_TABLE opt_alter_type opt_db 
            {
               CUP$SqlParser$result = case247(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // show_param ::= KW_DELETE opt_db 
            {
               CUP$SqlParser$result = case246(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // show_param ::= KW_EXPORT opt_db opt_wild_where order_by_clause limit_clause 
            {
               CUP$SqlParser$result = case245(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // show_param ::= KW_LOAD opt_db opt_wild_where order_by_clause limit_clause 
            {
               CUP$SqlParser$result = case244(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // show_param ::= KW_LOAD KW_WARNINGS opt_db opt_wild_where limit_clause 
            {
               CUP$SqlParser$result = case243(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // show_param ::= KW_ERRORS limit_clause 
            {
               CUP$SqlParser$result = case242(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // show_param ::= KW_WARNINGS limit_clause 
            {
               CUP$SqlParser$result = case241(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // show_param ::= KW_COUNT LPAREN STAR RPAREN KW_ERRORS 
            {
               CUP$SqlParser$result = case240(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // show_param ::= KW_COUNT LPAREN STAR RPAREN KW_WARNINGS 
            {
               CUP$SqlParser$result = case239(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // show_param ::= KW_PROC STRING_LITERAL 
            {
               CUP$SqlParser$result = case238(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // show_param ::= charset opt_wild_where 
            {
               CUP$SqlParser$result = case237(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // show_param ::= KW_COLLATION opt_wild_where 
            {
               CUP$SqlParser$result = case236(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // show_param ::= opt_full KW_COLUMNS from_or_in table_name opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case235(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // show_param ::= KW_SCHEMAS opt_wild_where 
            {
               CUP$SqlParser$result = case234(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // show_param ::= KW_DATABASES opt_wild_where 
            {
               CUP$SqlParser$result = case233(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // show_param ::= KW_MIGRATIONS 
            {
               CUP$SqlParser$result = case232(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // show_param ::= KW_CLUSTERS 
            {
               CUP$SqlParser$result = case231(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // show_param ::= KW_CREATE KW_DATABASE ident 
            {
               CUP$SqlParser$result = case230(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // show_param ::= KW_CREATE KW_VIEW table_name 
            {
               CUP$SqlParser$result = case229(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // show_param ::= KW_CREATE KW_TABLE table_name 
            {
               CUP$SqlParser$result = case228(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // show_param ::= KW_AUTHORS 
            {
               CUP$SqlParser$result = case227(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // show_param ::= opt_storage KW_ENGINES 
            {
               CUP$SqlParser$result = case226(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // show_param ::= KW_PLUGINS 
            {
               CUP$SqlParser$result = case225(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // show_param ::= KW_EVENTS opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case224(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // show_param ::= opt_full KW_TRIGGERS opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case223(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // show_param ::= opt_var_type KW_STATUS opt_wild_where 
            {
               CUP$SqlParser$result = case222(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // show_param ::= procedure_or_function KW_STATUS opt_wild_where 
            {
               CUP$SqlParser$result = case221(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // show_param ::= keys_or_index from_or_in table_ref opt_db where_clause 
            {
               CUP$SqlParser$result = case220(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // show_param ::= opt_full KW_PROCESSLIST 
            {
               CUP$SqlParser$result = case219(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // show_param ::= opt_full KW_TABLES opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case218(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // show_param ::= KW_TABLE KW_STATUS opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case217(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // show_param ::= KW_OPEN KW_TABLES opt_db opt_wild_where 
            {
               CUP$SqlParser$result = case216(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // show_param ::= opt_var_type KW_VARIABLES opt_wild_where 
            {
               CUP$SqlParser$result = case215(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // show_param ::= KW_WHITELIST 
            {
               CUP$SqlParser$result = case214(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // show_stmt ::= KW_SHOW show_param 
            {
               CUP$SqlParser$result = case213(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // opt_external ::= KW_EXTERNAL 
            {
               CUP$SqlParser$result = case212(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // opt_external ::= 
            {
               CUP$SqlParser$result = case211(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // opt_if_not_exists ::= KW_IF KW_NOT KW_EXISTS 
            {
               CUP$SqlParser$result = case210(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // opt_if_not_exists ::= 
            {
               CUP$SqlParser$result = case209(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // opt_if_exists ::= KW_IF KW_EXISTS 
            {
               CUP$SqlParser$result = case208(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // opt_if_exists ::= 
            {
               CUP$SqlParser$result = case207(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // opt_comment ::= KW_COMMENT STRING_LITERAL 
            {
               CUP$SqlParser$result = case206(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // opt_comment ::= 
            {
               CUP$SqlParser$result = case205(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // opt_is_allow_null ::= KW_NOT KW_NULL 
            {
               CUP$SqlParser$result = case204(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // opt_is_allow_null ::= KW_NULL 
            {
               CUP$SqlParser$result = case203(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // opt_is_allow_null ::= 
            {
               CUP$SqlParser$result = case202(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // column_definition ::= ident column_type opt_is_key opt_agg_type opt_is_allow_null opt_default_value opt_comment 
            {
               CUP$SqlParser$result = case201(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // opt_is_key ::= KW_KEY 
            {
               CUP$SqlParser$result = case200(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // opt_is_key ::= 
            {
               CUP$SqlParser$result = case199(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // opt_default_value ::= KW_DEFAULT KW_NULL 
            {
               CUP$SqlParser$result = case198(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // opt_default_value ::= KW_DEFAULT STRING_LITERAL 
            {
               CUP$SqlParser$result = case197(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opt_default_value ::= 
            {
               CUP$SqlParser$result = case196(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // column_type ::= KW_HLL 
            {
               CUP$SqlParser$result = case195(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // column_type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case194(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // column_type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case193(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // column_type ::= KW_CHAR 
            {
               CUP$SqlParser$result = case192(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // column_type ::= KW_DATETIME 
            {
               CUP$SqlParser$result = case191(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // column_type ::= KW_DATE 
            {
               CUP$SqlParser$result = case190(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // column_type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case189(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // column_type ::= KW_DECIMAL 
            {
               CUP$SqlParser$result = case188(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // column_type ::= KW_DOUBLE 
            {
               CUP$SqlParser$result = case187(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // column_type ::= KW_FLOAT 
            {
               CUP$SqlParser$result = case186(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // column_type ::= KW_LARGEINT LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case185(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // column_type ::= KW_LARGEINT 
            {
               CUP$SqlParser$result = case184(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // column_type ::= KW_BIGINT LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case183(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // column_type ::= KW_BIGINT 
            {
               CUP$SqlParser$result = case182(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // column_type ::= KW_INT LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case181(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // column_type ::= KW_INT 
            {
               CUP$SqlParser$result = case180(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // column_type ::= KW_SMALLINT LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case179(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // column_type ::= KW_SMALLINT 
            {
               CUP$SqlParser$result = case178(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // column_type ::= KW_TINYINT LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case177(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // column_type ::= KW_TINYINT 
            {
               CUP$SqlParser$result = case176(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // column_definition_list ::= column_definition_list COMMA column_definition 
            {
               CUP$SqlParser$result = case175(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // column_definition_list ::= column_definition 
            {
               CUP$SqlParser$result = case174(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // opt_ext_properties ::= KW_BROKER KW_PROPERTIES LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case173(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // opt_ext_properties ::= 
            {
               CUP$SqlParser$result = case172(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // opt_properties ::= KW_PROPERTIES LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case171(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // opt_properties ::= 
            {
               CUP$SqlParser$result = case170(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // key_value_map ::= key_value_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
            {
               CUP$SqlParser$result = case169(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // key_value_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
            {
               CUP$SqlParser$result = case168(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // opt_key_value_map ::= LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case167(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // opt_key_value_map ::= 
            {
               CUP$SqlParser$result = case166(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // opt_engine ::= KW_ENGINE EQUAL ident 
            {
               CUP$SqlParser$result = case165(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // opt_engine ::= 
            {
               CUP$SqlParser$result = case164(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // partition_key_desc ::= LPAREN string_list RPAREN 
            {
               CUP$SqlParser$result = case163(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // partition_key_desc ::= KW_MAX_VALUE 
            {
               CUP$SqlParser$result = case162(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES KW_LESS KW_THAN partition_key_desc opt_key_value_map 
            {
               CUP$SqlParser$result = case161(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // single_range_partition_desc_list ::= single_range_partition_desc 
            {
               CUP$SqlParser$result = case160(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // single_range_partition_desc_list ::= single_range_partition_desc_list COMMA single_range_partition_desc 
            {
               CUP$SqlParser$result = case159(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opt_single_range_partition_desc_list ::= single_range_partition_desc_list 
            {
               CUP$SqlParser$result = case158(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opt_single_range_partition_desc_list ::= 
            {
               CUP$SqlParser$result = case157(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // opt_keys ::= KW_AGGREGATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case156(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // opt_keys ::= KW_UNIQUE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case155(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // opt_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case154(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // opt_keys ::= KW_PRIMARY KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case153(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // opt_keys ::= 
            {
               CUP$SqlParser$result = case152(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // opt_distribution_number ::= KW_BUCKETS INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case151(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // opt_distribution_number ::= 
            {
               CUP$SqlParser$result = case150(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // opt_distribution ::= KW_DISTRIBUTED KW_BY KW_RANDOM opt_distribution_number 
            {
               CUP$SqlParser$result = case149(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // opt_distribution ::= KW_DISTRIBUTED KW_BY KW_HASH LPAREN ident_list RPAREN opt_distribution_number 
            {
               CUP$SqlParser$result = case148(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // opt_distribution ::= 
            {
               CUP$SqlParser$result = case147(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // opt_partition ::= KW_PARTITION KW_BY KW_RANGE LPAREN ident_list RPAREN LPAREN opt_single_range_partition_desc_list RPAREN 
            {
               CUP$SqlParser$result = case146(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // opt_partition ::= 
            {
               CUP$SqlParser$result = case145(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // opt_agg_type ::= KW_HLL_UNION 
            {
               CUP$SqlParser$result = case144(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // opt_agg_type ::= KW_REPLACE 
            {
               CUP$SqlParser$result = case143(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // opt_agg_type ::= KW_MIN 
            {
               CUP$SqlParser$result = case142(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // opt_agg_type ::= KW_MAX 
            {
               CUP$SqlParser$result = case141(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // opt_agg_type ::= KW_SUM 
            {
               CUP$SqlParser$result = case140(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // opt_agg_type ::= 
            {
               CUP$SqlParser$result = case139(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // recover_stmt ::= KW_RECOVER KW_PARTITION ident KW_FROM table_name 
            {
               CUP$SqlParser$result = case138(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // recover_stmt ::= KW_RECOVER KW_TABLE table_name 
            {
               CUP$SqlParser$result = case137(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // recover_stmt ::= KW_RECOVER KW_DATABASE ident 
            {
               CUP$SqlParser$result = case136(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // drop_stmt ::= KW_DROP KW_VIEW opt_if_exists table_name 
            {
               CUP$SqlParser$result = case135(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // drop_stmt ::= KW_DROP KW_USER STRING_LITERAL 
            {
               CUP$SqlParser$result = case134(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // drop_stmt ::= KW_DROP KW_TABLE opt_if_exists table_name 
            {
               CUP$SqlParser$result = case133(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // drop_stmt ::= KW_DROP KW_FUNCTION function_name 
            {
               CUP$SqlParser$result = case132(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // drop_stmt ::= KW_DROP KW_CLUSTER opt_if_exists ident 
            {
               CUP$SqlParser$result = case131(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // drop_stmt ::= KW_DROP KW_DATABASE opt_if_exists ident 
            {
               CUP$SqlParser$result = case130(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // revoke_stmt ::= KW_REVOKE KW_ALL KW_ON ident KW_FROM user 
            {
               CUP$SqlParser$result = case129(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // grant_stmt ::= KW_GRANT privilege_list KW_ON ident KW_TO user 
            {
               CUP$SqlParser$result = case128(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // opt_cluster ::= KW_BY ident_or_text 
            {
               CUP$SqlParser$result = case127(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // opt_cluster ::= 
            {
               CUP$SqlParser$result = case126(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // opt_broker ::= KW_WITH KW_BROKER ident_or_text LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case125(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // opt_broker ::= KW_WITH KW_BROKER ident_or_text 
            {
               CUP$SqlParser$result = case124(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // opt_broker ::= 
            {
               CUP$SqlParser$result = case123(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opt_system ::= KW_BY ident_or_text 
            {
               CUP$SqlParser$result = case122(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // opt_system ::= 
            {
               CUP$SqlParser$result = case121(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opt_col_mapping_list ::= KW_SET LPAREN expr_list RPAREN 
            {
               CUP$SqlParser$result = case120(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // opt_col_mapping_list ::= 
            {
               CUP$SqlParser$result = case119(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // opt_col_list ::= LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case118(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // opt_col_list ::= 
            {
               CUP$SqlParser$result = case117(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // opt_field_term ::= KW_COLUMNS KW_TERMINATED KW_BY STRING_LITERAL 
            {
               CUP$SqlParser$result = case116(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opt_field_term ::= 
            {
               CUP$SqlParser$result = case115(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opt_negative ::= KW_NEGATIVE 
            {
               CUP$SqlParser$result = case114(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opt_negative ::= 
            {
               CUP$SqlParser$result = case113(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt_partitions ::= KW_PARTITION LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case112(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opt_partitions ::= 
            {
               CUP$SqlParser$result = case111(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // data_desc ::= KW_DATA KW_INFILE LPAREN string_list RPAREN opt_negative KW_INTO KW_TABLE ident opt_partitions opt_field_term opt_col_list opt_col_mapping_list 
            {
               CUP$SqlParser$result = case110(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // data_desc_list ::= data_desc_list COMMA data_desc 
            {
               CUP$SqlParser$result = case109(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // data_desc_list ::= data_desc 
            {
               CUP$SqlParser$result = case108(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // job_label ::= ident DOT ident 
            {
               CUP$SqlParser$result = case107(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // job_label ::= ident 
            {
               CUP$SqlParser$result = case106(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // load_stmt ::= KW_LOAD KW_LABEL job_label LPAREN data_desc_list RPAREN opt_broker opt_system opt_properties 
            {
               CUP$SqlParser$result = case105(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // export_stmt ::= KW_EXPORT KW_TABLE base_table_ref KW_TO STRING_LITERAL opt_properties opt_broker 
            {
               CUP$SqlParser$result = case104(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // help_stmt ::= KW_HELP ident_or_text 
            {
               CUP$SqlParser$result = case103(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // column_type_list ::= column_type_list COMMA column_type 
            {
               CUP$SqlParser$result = case102(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // column_type_list ::= column_type 
            {
               CUP$SqlParser$result = case101(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // user ::= ident_or_text 
            {
               CUP$SqlParser$result = case100(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_super_user ::= KW_SUPERUSER 
            {
               CUP$SqlParser$result = case99(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opt_super_user ::= 
            {
               CUP$SqlParser$result = case98(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // grant_user ::= user KW_IDENTIFIED KW_BY KW_PASSWORD STRING_LITERAL 
            {
               CUP$SqlParser$result = case97(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // grant_user ::= user KW_IDENTIFIED KW_BY STRING_LITERAL 
            {
               CUP$SqlParser$result = case96(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // grant_user ::= user 
            {
               CUP$SqlParser$result = case95(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // create_stmt ::= KW_CREATE KW_CLUSTER ident opt_properties KW_IDENTIFIED KW_BY STRING_LITERAL 
            {
               CUP$SqlParser$result = case94(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // create_stmt ::= KW_CREATE KW_VIEW opt_if_not_exists table_name opt_col_list KW_AS query_stmt 
            {
               CUP$SqlParser$result = case93(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // create_stmt ::= KW_CREATE KW_USER grant_user opt_super_user 
            {
               CUP$SqlParser$result = case92(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list RPAREN opt_engine opt_keys opt_partition opt_distribution opt_properties opt_ext_properties 
            {
               CUP$SqlParser$result = case91(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // create_stmt ::= KW_CREATE KW_AGGREGATE KW_FUNCTION function_name LPAREN column_type_list RPAREN column_type KW_SONAME STRING_LITERAL opt_properties 
            {
               CUP$SqlParser$result = case90(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // create_stmt ::= KW_CREATE KW_FUNCTION function_name LPAREN column_type_list RPAREN column_type KW_SONAME STRING_LITERAL opt_properties 
            {
               CUP$SqlParser$result = case89(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // create_stmt ::= KW_CREATE KW_DATABASE opt_if_not_exists ident 
            {
               CUP$SqlParser$result = case88(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sync_stmt ::= KW_SYNC 
            {
               CUP$SqlParser$result = case87(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alter_user_clause ::= KW_DELETE KW_WHITELIST string_list 
            {
               CUP$SqlParser$result = case86(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alter_user_clause ::= KW_ADD KW_WHITELIST string_list 
            {
               CUP$SqlParser$result = case85(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alter_cluster_clause ::= KW_MODIFY opt_properties 
            {
               CUP$SqlParser$result = case84(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // alter_system_clause ::= KW_SET ident equal STRING_LITERAL 
            {
               CUP$SqlParser$result = case83(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alter_system_clause ::= KW_DROP KW_ALL KW_BROKER ident_or_text 
            {
               CUP$SqlParser$result = case82(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alter_system_clause ::= KW_DROP KW_BROKER ident_or_text string_list 
            {
               CUP$SqlParser$result = case81(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // alter_system_clause ::= KW_ADD KW_BROKER ident_or_text string_list 
            {
               CUP$SqlParser$result = case80(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alter_system_clause ::= KW_DROP KW_FOLLOWER STRING_LITERAL 
            {
               CUP$SqlParser$result = case79(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // alter_system_clause ::= KW_ADD KW_FOLLOWER STRING_LITERAL 
            {
               CUP$SqlParser$result = case78(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // alter_system_clause ::= KW_DROP KW_OBSERVER STRING_LITERAL 
            {
               CUP$SqlParser$result = case77(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // alter_system_clause ::= KW_ADD KW_OBSERVER STRING_LITERAL 
            {
               CUP$SqlParser$result = case76(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // alter_system_clause ::= KW_DECOMMISSION KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case75(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // alter_system_clause ::= KW_DROPP KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case74(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alter_system_clause ::= KW_DROP KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case73(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // alter_system_clause ::= KW_ADD KW_BACKEND KW_TO ident string_list 
            {
               CUP$SqlParser$result = case72(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // alter_system_clause ::= KW_ADD KW_FREE KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case71(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // alter_system_clause ::= KW_ADD KW_BACKEND string_list 
            {
               CUP$SqlParser$result = case70(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // alter_table_clause ::= KW_RENAME KW_COLUMN ident ident 
            {
               CUP$SqlParser$result = case69(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // alter_table_clause ::= KW_RENAME KW_PARTITION ident ident 
            {
               CUP$SqlParser$result = case68(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alter_table_clause ::= KW_RENAME KW_ROLLUP ident ident 
            {
               CUP$SqlParser$result = case67(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // alter_table_clause ::= KW_RENAME ident 
            {
               CUP$SqlParser$result = case66(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // alter_table_clause ::= KW_MODIFY KW_PARTITION ident KW_SET LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case65(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // alter_table_clause ::= KW_DROP KW_PARTITION opt_if_exists ident 
            {
               CUP$SqlParser$result = case64(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // alter_table_clause ::= KW_ADD single_range_partition_desc opt_distribution opt_properties 
            {
               CUP$SqlParser$result = case63(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // alter_table_clause ::= opt_properties 
            {
               CUP$SqlParser$result = case62(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // alter_table_clause ::= KW_ORDER KW_BY LPAREN ident_list RPAREN opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case61(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // alter_table_clause ::= KW_MODIFY KW_COLUMN column_definition opt_col_pos opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case60(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // alter_table_clause ::= KW_DROP KW_ROLLUP ident opt_properties 
            {
               CUP$SqlParser$result = case59(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // alter_table_clause ::= KW_DROP KW_COLUMN ident opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case58(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // alter_table_clause ::= KW_ADD KW_ROLLUP ident LPAREN ident_list RPAREN opt_dup_keys opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case57(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // alter_table_clause ::= KW_ADD KW_COLUMN LPAREN column_definition_list RPAREN opt_to_rollup opt_properties 
            {
               CUP$SqlParser$result = case56(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // alter_table_clause ::= KW_ADD KW_COLUMN column_definition opt_col_pos opt_to_rollup opt_properties 
            {
               CUP$SqlParser$result = case55(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_dup_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case54(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_dup_keys ::= 
            {
               CUP$SqlParser$result = case53(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_col_pos ::= KW_AFTER ident 
            {
               CUP$SqlParser$result = case52(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_col_pos ::= KW_FIRST 
            {
               CUP$SqlParser$result = case51(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_col_pos ::= 
            {
               CUP$SqlParser$result = case50(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_from_rollup ::= KW_FROM ident 
            {
               CUP$SqlParser$result = case49(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_from_rollup ::= 
            {
               CUP$SqlParser$result = case48(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opt_to_rollup ::= KW_IN ident 
            {
               CUP$SqlParser$result = case47(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opt_to_rollup ::= KW_TO ident 
            {
               CUP$SqlParser$result = case46(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opt_to_rollup ::= 
            {
               CUP$SqlParser$result = case45(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // alter_table_clause_list ::= alter_table_clause_list COMMA alter_table_clause 
            {
               CUP$SqlParser$result = case44(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // alter_table_clause_list ::= alter_table_clause 
            {
               CUP$SqlParser$result = case43(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opt_user ::= KW_FOR user 
            {
               CUP$SqlParser$result = case42(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_user ::= 
            {
               CUP$SqlParser$result = case41(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alter_stmt ::= KW_ALTER KW_USER ident alter_user_clause 
            {
               CUP$SqlParser$result = case40(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alter_stmt ::= KW_ALTER KW_DATABASE ident KW_RENAME ident 
            {
               CUP$SqlParser$result = case39(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alter_stmt ::= KW_ALTER KW_DATABASE ident KW_SET KW_DATA KW_QUOTA INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case38(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // alter_stmt ::= KW_ALTER KW_CLUSTER ident opt_properties 
            {
               CUP$SqlParser$result = case37(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // alter_stmt ::= KW_ALTER KW_SYSTEM alter_system_clause 
            {
               CUP$SqlParser$result = case36(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // alter_stmt ::= KW_ALTER KW_TABLE table_name alter_table_clause_list 
            {
               CUP$SqlParser$result = case35(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // migrate_stmt ::= KW_MIGRATE KW_DATABASE cluster_name des_cluster_name 
            {
               CUP$SqlParser$result = case34(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // link_stmt ::= KW_LINK KW_DATABASE cluster_name des_cluster_name 
            {
               CUP$SqlParser$result = case33(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // des_cluster_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case32(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // des_cluster_name ::= ident 
            {
               CUP$SqlParser$result = case31(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cluster_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case30(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cluster_name ::= ident 
            {
               CUP$SqlParser$result = case29(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= 
            {
               CUP$SqlParser$result = case28(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= export_stmt 
            {
               CUP$SqlParser$result = case27(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= unsupported_stmt 
            {
               CUP$SqlParser$result = case26(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= restore_stmt 
            {
               CUP$SqlParser$result = case25(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= backup_stmt 
            {
               CUP$SqlParser$result = case24(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= insert_stmt 
            {
               CUP$SqlParser$result = case23(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= sync_stmt 
            {
               CUP$SqlParser$result = case22(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= delete_stmt 
            {
               CUP$SqlParser$result = case21(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= cancel_stmt 
            {
               CUP$SqlParser$result = case20(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= load_stmt 
            {
               CUP$SqlParser$result = case19(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= help_stmt 
            {
               CUP$SqlParser$result = case18(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= revoke_stmt 
            {
               CUP$SqlParser$result = case17(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= grant_stmt 
            {
               CUP$SqlParser$result = case16(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= show_stmt 
            {
               CUP$SqlParser$result = case15(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= describe_stmt 
            {
               CUP$SqlParser$result = case14(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= kill_stmt 
            {
               CUP$SqlParser$result = case13(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= set_stmt 
            {
               CUP$SqlParser$result = case12(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= use_stmt 
            {
               CUP$SqlParser$result = case11(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= recover_stmt 
            {
               CUP$SqlParser$result = case10(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= drop_stmt 
            {
               CUP$SqlParser$result = case9(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= query_stmt 
            {
               CUP$SqlParser$result = case8(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= enter_stmt 
            {
               CUP$SqlParser$result = case7(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= migrate_stmt 
            {
               CUP$SqlParser$result = case6(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= link_stmt 
            {
               CUP$SqlParser$result = case5(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= create_stmt 
            {
               CUP$SqlParser$result = case4(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= alter_stmt 
            {
               CUP$SqlParser$result = case3(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // query ::= stmt SEMICOLON 
            {
               CUP$SqlParser$result = case2(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // query ::= stmt 
            {
               CUP$SqlParser$result = case1(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= query EOF 
            {
               CUP$SqlParser$result = case0(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
    //ident_or_text ::= STRING_LITERAL 
    java_cup.runtime.Symbol case746(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int textleft = CUP$SqlParser$stack.peek().left;
		int textright = CUP$SqlParser$stack.peek().right;
		String text = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = text;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_or_text",180, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //ident_or_text ::= ident 
    java_cup.runtime.Symbol case745(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_or_text",180, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //ident ::= keyword 
    java_cup.runtime.Symbol case744(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident",179, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //ident ::= IDENT 
    java_cup.runtime.Symbol case743(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident",179, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_FREE 
    java_cup.runtime.Symbol case742(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MAX 
    java_cup.runtime.Symbol case741(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MIN 
    java_cup.runtime.Symbol case740(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SUM 
    java_cup.runtime.Symbol case739(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COUNT 
    java_cup.runtime.Symbol case738(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MIGRATIONS 
    java_cup.runtime.Symbol case737(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MIGRATE 
    java_cup.runtime.Symbol case736(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_LINK 
    java_cup.runtime.Symbol case735(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CLUSTERS 
    java_cup.runtime.Symbol case734(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CLUSTER 
    java_cup.runtime.Symbol case733(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_WORK 
    java_cup.runtime.Symbol case732(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_WARNINGS 
    java_cup.runtime.Symbol case731(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_VIEW 
    java_cup.runtime.Symbol case730(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_VARIABLES 
    java_cup.runtime.Symbol case729(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_USER 
    java_cup.runtime.Symbol case728(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_UNCOMMITTED 
    java_cup.runtime.Symbol case727(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_TYPES 
    java_cup.runtime.Symbol case726(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_TRIGGERS 
    java_cup.runtime.Symbol case725(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_TRANSACTION 
    java_cup.runtime.Symbol case724(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_TIMESTAMP 
    java_cup.runtime.Symbol case723(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_THAN 
    java_cup.runtime.Symbol case722(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_TABLES 
    java_cup.runtime.Symbol case721(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_STRING 
    java_cup.runtime.Symbol case720(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_STORAGE 
    java_cup.runtime.Symbol case719(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_STATUS 
    java_cup.runtime.Symbol case718(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_START 
    java_cup.runtime.Symbol case717(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SPLIT 
    java_cup.runtime.Symbol case716(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SONAME 
    java_cup.runtime.Symbol case715(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SNAPSHOT 
    java_cup.runtime.Symbol case714(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SESSION 
    java_cup.runtime.Symbol case713(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_SERIALIZABLE 
    java_cup.runtime.Symbol case712(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ROLLUP 
    java_cup.runtime.Symbol case711(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ROLLBACK 
    java_cup.runtime.Symbol case710(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_RESTORE 
    java_cup.runtime.Symbol case709(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_RESOURCE 
    java_cup.runtime.Symbol case708(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_REPEATABLE 
    java_cup.runtime.Symbol case707(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_RECOVER 
    java_cup.runtime.Symbol case706(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_RANDOM 
    java_cup.runtime.Symbol case705(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_QUOTA 
    java_cup.runtime.Symbol case704(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_QUERY 
    java_cup.runtime.Symbol case703(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PROPERTY 
    java_cup.runtime.Symbol case702(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PROPERTIES 
    java_cup.runtime.Symbol case701(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PROCESSLIST 
    java_cup.runtime.Symbol case700(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PROC 
    java_cup.runtime.Symbol case699(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PLUGINS 
    java_cup.runtime.Symbol case698(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PLUGIN 
    java_cup.runtime.Symbol case697(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PASSWORD 
    java_cup.runtime.Symbol case696(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_PARTITIONS 
    java_cup.runtime.Symbol case695(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_OPEN 
    java_cup.runtime.Symbol case694(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ONLY 
    java_cup.runtime.Symbol case693(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_OFFSET 
    java_cup.runtime.Symbol case692(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_NO 
    java_cup.runtime.Symbol case691(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_NEGATIVE 
    java_cup.runtime.Symbol case690(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_NAMES 
    java_cup.runtime.Symbol case689(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_NAME 
    java_cup.runtime.Symbol case688(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MODIFY 
    java_cup.runtime.Symbol case687(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_MERGE 
    java_cup.runtime.Symbol case686(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_LOCAL 
    java_cup.runtime.Symbol case685(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_LEVEL 
    java_cup.runtime.Symbol case684(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_LESS 
    java_cup.runtime.Symbol case683(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_LABEL 
    java_cup.runtime.Symbol case682(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ISOLATION 
    java_cup.runtime.Symbol case681(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ISNULL 
    java_cup.runtime.Symbol case680(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_INDEXES 
    java_cup.runtime.Symbol case679(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_IDENTIFIED 
    java_cup.runtime.Symbol case678(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_HELP 
    java_cup.runtime.Symbol case677(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_HASH 
    java_cup.runtime.Symbol case676(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_GLOBAL 
    java_cup.runtime.Symbol case675(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_EXTERNAL 
    java_cup.runtime.Symbol case674(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_EVENTS 
    java_cup.runtime.Symbol case673(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ERRORS 
    java_cup.runtime.Symbol case672(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ENGINES 
    java_cup.runtime.Symbol case671(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_ENGINE 
    java_cup.runtime.Symbol case670(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_END 
    java_cup.runtime.Symbol case669(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_FUNCTION 
    java_cup.runtime.Symbol case668(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_FIRST 
    java_cup.runtime.Symbol case667(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BUCKETS 
    java_cup.runtime.Symbol case666(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_DISTINCTPCSA 
    java_cup.runtime.Symbol case665(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_DISTINCTPC 
    java_cup.runtime.Symbol case664(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_DATETIME 
    java_cup.runtime.Symbol case663(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_DATE 
    java_cup.runtime.Symbol case662(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_DATA 
    java_cup.runtime.Symbol case661(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CONNECTION_ID 
    java_cup.runtime.Symbol case660(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CONNECTION 
    java_cup.runtime.Symbol case659(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COMMIT 
    java_cup.runtime.Symbol case658(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COLLATION 
    java_cup.runtime.Symbol case657(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CONSISTENT 
    java_cup.runtime.Symbol case656(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COMMITTED 
    java_cup.runtime.Symbol case655(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COMMENT 
    java_cup.runtime.Symbol case654(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_COLUMNS 
    java_cup.runtime.Symbol case653(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CHARSET 
    java_cup.runtime.Symbol case652(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_CHAIN 
    java_cup.runtime.Symbol case651(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BACKENDS 
    java_cup.runtime.Symbol case650(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BROKER 
    java_cup.runtime.Symbol case649(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BOOLEAN 
    java_cup.runtime.Symbol case648(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BEGIN 
    java_cup.runtime.Symbol case647(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_BACKUP 
    java_cup.runtime.Symbol case646(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_AUTHORS 
    java_cup.runtime.Symbol case645(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_AGGREGATE 
    java_cup.runtime.Symbol case644(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keyword ::= KW_AFTER 
    java_cup.runtime.Symbol case643(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",178, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_release ::= KW_NO KW_RELEASE 
    java_cup.runtime.Symbol case642(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_release",28, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_release ::= KW_RELEASE 
    java_cup.runtime.Symbol case641(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_release",28, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_release ::= 
    java_cup.runtime.Symbol case640(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_release",28, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_chain ::= KW_AND KW_CHAIN 
    java_cup.runtime.Symbol case639(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_chain",27, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_chain ::= KW_AND KW_NO KW_CHAIN 
    java_cup.runtime.Symbol case638(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_chain",27, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_chain ::= 
    java_cup.runtime.Symbol case637(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_chain",27, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_work ::= KW_WORK 
    java_cup.runtime.Symbol case636(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_work",26, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_work ::= 
    java_cup.runtime.Symbol case635(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_work",26, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_with_consistent_snapshot ::= KW_WITH KW_CONSISTENT KW_SNAPSHOT 
    java_cup.runtime.Symbol case634(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_consistent_snapshot",25, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_with_consistent_snapshot ::= 
    java_cup.runtime.Symbol case633(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_consistent_snapshot",25, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //unsupported_stmt ::= KW_ROLLBACK opt_work opt_chain opt_release 
    java_cup.runtime.Symbol case632(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new UnsupportedStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("unsupported_stmt",23, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //unsupported_stmt ::= KW_COMMIT opt_work opt_chain opt_release 
    java_cup.runtime.Symbol case631(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new UnsupportedStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("unsupported_stmt",23, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //unsupported_stmt ::= KW_BEGIN opt_work 
    java_cup.runtime.Symbol case630(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int workleft = CUP$SqlParser$stack.peek().left;
		int workright = CUP$SqlParser$stack.peek().right;
		Object work = (Object) CUP$SqlParser$stack.peek().value;
		
        RESULT = new UnsupportedStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("unsupported_stmt",23, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //unsupported_stmt ::= KW_START KW_TRANSACTION opt_with_consistent_snapshot 
    java_cup.runtime.Symbol case629(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int vleft = CUP$SqlParser$stack.peek().left;
		int vright = CUP$SqlParser$stack.peek().right;
		Object v = (Object) CUP$SqlParser$stack.peek().value;
		
        RESULT = new UnsupportedStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("unsupported_stmt",23, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //integer_list ::= INTEGER_LITERAL 
    java_cup.runtime.Symbol case628(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<Long> RESULT =null;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		Long item = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(item);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("integer_list",153, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //integer_list ::= integer_list COMMA INTEGER_LITERAL 
    java_cup.runtime.Symbol case627(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<Long> RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<Long> l = (List<Long>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		Long item = (Long) CUP$SqlParser$stack.peek().value;
		
        l.add(item);
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("integer_list",153, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //string_list ::= STRING_LITERAL 
    java_cup.runtime.Symbol case626(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		String item = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(item);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("string_list",152, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //string_list ::= string_list COMMA STRING_LITERAL 
    java_cup.runtime.Symbol case625(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<String> l = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		String item = (String) CUP$SqlParser$stack.peek().value;
		
        l.add(item);
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("string_list",152, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //privilege_list ::= privilege_type 
    java_cup.runtime.Symbol case624(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AccessPrivilege> RESULT =null;
		int privleft = CUP$SqlParser$stack.peek().left;
		int privright = CUP$SqlParser$stack.peek().right;
		AccessPrivilege priv = (AccessPrivilege) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(priv);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_list",151, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //privilege_list ::= privilege_list COMMA privilege_type 
    java_cup.runtime.Symbol case623(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AccessPrivilege> RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AccessPrivilege> l = (List<AccessPrivilege>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int privleft = CUP$SqlParser$stack.peek().left;
		int privright = CUP$SqlParser$stack.peek().right;
		AccessPrivilege priv = (AccessPrivilege) CUP$SqlParser$stack.peek().value;
		
        l.add(priv);
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_list",151, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //privilege_type ::= KW_ALL 
    java_cup.runtime.Symbol case622(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AccessPrivilege RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = AccessPrivilege.ALL;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_type",154, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //privilege_type ::= ident 
    java_cup.runtime.Symbol case621(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AccessPrivilege RESULT =null;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		String name = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = AccessPrivilege.fromName(name);
        if (RESULT == null) {
            throw new AnalysisException("Unknown privilege type " + name);
        }
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("privilege_type",154, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_HLL 
    java_cup.runtime.Symbol case620(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.HLL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_DECIMAL 
    java_cup.runtime.Symbol case619(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DECIMAL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_DATETIME 
    java_cup.runtime.Symbol case618(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DATETIME; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_DATE 
    java_cup.runtime.Symbol case617(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DATE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_DOUBLE 
    java_cup.runtime.Symbol case616(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DOUBLE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_FLOAT 
    java_cup.runtime.Symbol case615(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.FLOAT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_BOOLEAN 
    java_cup.runtime.Symbol case614(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BOOLEAN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_LARGEINT 
    java_cup.runtime.Symbol case613(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.LARGEINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_BIGINT 
    java_cup.runtime.Symbol case612(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BIGINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_INT 
    java_cup.runtime.Symbol case611(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.INT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_SMALLINT 
    java_cup.runtime.Symbol case610(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.SMALLINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //primitive_type ::= KW_TINYINT 
    java_cup.runtime.Symbol case609(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.TINYINT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("primitive_type",116, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_ref ::= ident DOT ident DOT ident 
    java_cup.runtime.Symbol case608(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SlotRef RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int colleft = CUP$SqlParser$stack.peek().left;
		int colright = CUP$SqlParser$stack.peek().right;
		String col = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new SlotRef(new TableName(db, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",103, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_ref ::= ident DOT ident 
    java_cup.runtime.Symbol case607(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SlotRef RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int colleft = CUP$SqlParser$stack.peek().left;
		int colright = CUP$SqlParser$stack.peek().right;
		String col = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new SlotRef(new TableName(null, tbl), col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",103, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_ref ::= ident 
    java_cup.runtime.Symbol case606(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SlotRef RESULT =null;
		int colleft = CUP$SqlParser$stack.peek().left;
		int colright = CUP$SqlParser$stack.peek().right;
		String col = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new SlotRef(null, col); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_ref",103, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //compound_predicate ::= NOT expr 
    java_cup.runtime.Symbol case605(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",81, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //compound_predicate ::= KW_NOT expr 
    java_cup.runtime.Symbol case604(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",81, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //compound_predicate ::= expr KW_OR expr 
    java_cup.runtime.Symbol case603(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",81, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //compound_predicate ::= expr KW_AND expr 
    java_cup.runtime.Symbol case602(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("compound_predicate",81, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //subquery ::= LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case601(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Subquery RESULT =null;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new Subquery(query); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",111, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //subquery ::= LPAREN subquery RPAREN 
    java_cup.runtime.Symbol case600(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Subquery RESULT =null;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Subquery query = (Subquery) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("subquery",111, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //in_predicate ::= expr KW_NOT KW_IN subquery 
    java_cup.runtime.Symbol case599(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int sleft = CUP$SqlParser$stack.peek().left;
		int sright = CUP$SqlParser$stack.peek().right;
		Subquery s = (Subquery) CUP$SqlParser$stack.peek().value;
		 RESULT = new InPredicate(e, s, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",82, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //in_predicate ::= expr KW_IN subquery 
    java_cup.runtime.Symbol case598(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int sleft = CUP$SqlParser$stack.peek().left;
		int sright = CUP$SqlParser$stack.peek().right;
		Subquery s = (Subquery) CUP$SqlParser$stack.peek().value;
		 RESULT = new InPredicate(e, s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",82, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //in_predicate ::= expr KW_NOT KW_IN LPAREN expr_list RPAREN 
    java_cup.runtime.Symbol case597(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<Expr> l = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new InPredicate(e, l, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",82, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //in_predicate ::= expr KW_IN LPAREN expr_list RPAREN 
    java_cup.runtime.Symbol case596(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<Expr> l = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new InPredicate(e, l, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("in_predicate",82, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //between_predicate ::= expr KW_NOT KW_BETWEEN predicate KW_AND expr 
    java_cup.runtime.Symbol case595(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int e2left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e2right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Predicate e2 = (Predicate) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e3left = CUP$SqlParser$stack.peek().left;
		int e3right = CUP$SqlParser$stack.peek().right;
		Expr e3 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",79, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //between_predicate ::= expr KW_NOT KW_BETWEEN non_pred_expr KW_AND expr 
    java_cup.runtime.Symbol case594(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int e2left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e2right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e2 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e3left = CUP$SqlParser$stack.peek().left;
		int e3right = CUP$SqlParser$stack.peek().right;
		Expr e3 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",79, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //between_predicate ::= expr KW_BETWEEN predicate KW_AND expr 
    java_cup.runtime.Symbol case593(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int e2left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e2right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Predicate e2 = (Predicate) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e3left = CUP$SqlParser$stack.peek().left;
		int e3right = CUP$SqlParser$stack.peek().right;
		Expr e3 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",79, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //between_predicate ::= expr KW_BETWEEN non_pred_expr KW_AND expr 
    java_cup.runtime.Symbol case592(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int e2left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e2right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e2 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e3left = CUP$SqlParser$stack.peek().left;
		int e3right = CUP$SqlParser$stack.peek().right;
		Expr e3 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("between_predicate",79, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //like_predicate ::= expr KW_NOT KW_REGEXP expr 
    java_cup.runtime.Symbol case591(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",83, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //like_predicate ::= expr KW_NOT KW_LIKE expr 
    java_cup.runtime.Symbol case590(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.LIKE, e1, e2), null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",83, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //like_predicate ::= expr KW_REGEXP expr 
    java_cup.runtime.Symbol case589(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",83, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //like_predicate ::= expr KW_LIKE expr 
    java_cup.runtime.Symbol case588(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("like_predicate",83, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr LESSTHAN EQUAL GREATERTHAN expr 
    java_cup.runtime.Symbol case587(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr GREATERTHAN expr 
    java_cup.runtime.Symbol case586(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr LESSTHAN expr 
    java_cup.runtime.Symbol case585(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr GREATERTHAN EQUAL expr 
    java_cup.runtime.Symbol case584(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr LESSTHAN EQUAL expr 
    java_cup.runtime.Symbol case583(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr LESSTHAN GREATERTHAN expr 
    java_cup.runtime.Symbol case582(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr NOT EQUAL expr 
    java_cup.runtime.Symbol case581(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //comparison_predicate ::= expr EQUAL expr 
    java_cup.runtime.Symbol case580(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Object op = (Object) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",80, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= LPAREN predicate RPAREN 
    java_cup.runtime.Symbol case579(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int pright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Predicate p = (Predicate) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= like_predicate 
    java_cup.runtime.Symbol case578(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= exists_predicate 
    java_cup.runtime.Symbol case577(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= in_predicate 
    java_cup.runtime.Symbol case576(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= compound_predicate 
    java_cup.runtime.Symbol case575(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= comparison_predicate 
    java_cup.runtime.Symbol case574(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= between_predicate 
    java_cup.runtime.Symbol case573(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= expr KW_IS KW_NOT KW_NULL 
    java_cup.runtime.Symbol case572(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		 RESULT = new IsNullPredicate(e, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= KW_ISNULL LPAREN expr RPAREN 
    java_cup.runtime.Symbol case571(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new IsNullPredicate(e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //predicate ::= expr KW_IS KW_NULL 
    java_cup.runtime.Symbol case570(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		 RESULT = new IsNullPredicate(e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("predicate",78, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_params ::= KW_DISTINCT expr_list 
    java_cup.runtime.Symbol case569(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionParams RESULT =null;
		int distinctleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int distinctright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String distinct = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int exprsleft = CUP$SqlParser$stack.peek().left;
		int exprsright = CUP$SqlParser$stack.peek().right;
		ArrayList<Expr> exprs = (ArrayList<Expr>) CUP$SqlParser$stack.peek().value;
		 RESULT = new FunctionParams(true, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",98, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_params ::= KW_ALL expr_list 
    java_cup.runtime.Symbol case568(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionParams RESULT =null;
		int exprsleft = CUP$SqlParser$stack.peek().left;
		int exprsright = CUP$SqlParser$stack.peek().right;
		ArrayList<Expr> exprs = (ArrayList<Expr>) CUP$SqlParser$stack.peek().value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",98, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_params ::= expr_list 
    java_cup.runtime.Symbol case567(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionParams RESULT =null;
		int exprsleft = CUP$SqlParser$stack.peek().left;
		int exprsright = CUP$SqlParser$stack.peek().right;
		ArrayList<Expr> exprs = (ArrayList<Expr>) CUP$SqlParser$stack.peek().value;
		 RESULT = new FunctionParams(false, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",98, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_params ::= KW_ALL STAR 
    java_cup.runtime.Symbol case566(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",98, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_params ::= STAR 
    java_cup.runtime.Symbol case565(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionParams RESULT =null;
		 RESULT = FunctionParams.createStarParam(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_params",98, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= NUMERIC_OVERFLOW 
    java_cup.runtime.Symbol case564(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= UNMATCHED_STRING_LITERAL expr 
    java_cup.runtime.Symbol case563(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String l = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= KW_NULL 
    java_cup.runtime.Symbol case562(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= KW_FALSE 
    java_cup.runtime.Symbol case561(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= KW_TRUE 
    java_cup.runtime.Symbol case560(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= STRING_LITERAL 
    java_cup.runtime.Symbol case559(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new StringLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= DECIMAL_LITERAL 
    java_cup.runtime.Symbol case558(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		BigDecimal l = (BigDecimal) CUP$SqlParser$stack.peek().value;
		 RESULT = new DecimalLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= FLOATINGPOINT_LITERAL 
    java_cup.runtime.Symbol case557(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		Double l = (Double) CUP$SqlParser$stack.peek().value;
		 RESULT = new FloatLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= LARGE_INTEGER_LITERAL 
    java_cup.runtime.Symbol case556(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new LargeIntLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //literal ::= INTEGER_LITERAL 
    java_cup.runtime.Symbol case555(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		Long l = (Long) CUP$SqlParser$stack.peek().value;
		 RESULT = new IntLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("literal",95, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //timestamp_arithmetic_expr ::= function_name LPAREN expr_list COMMA KW_INTERVAL expr ident RPAREN 
    java_cup.runtime.Symbol case554(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int functionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int functionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		FunctionName functionName = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		ArrayList<Expr> l = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int vleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int vright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr v = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int uleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int uright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String u = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    if (l.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    if (functionName.getDb() != null) {
      // This function should not fully qualified
      throw new Exception("interval should not be qualified by database name");
    }

    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), l.get(0), v, u);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",65, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //timestamp_arithmetic_expr ::= expr SUBTRACT KW_INTERVAL expr ident 
    java_cup.runtime.Symbol case553(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int tleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr t = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int vleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int vright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr v = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int uleft = CUP$SqlParser$stack.peek().left;
		int uright = CUP$SqlParser$stack.peek().right;
		String u = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",65, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //timestamp_arithmetic_expr ::= expr ADD KW_INTERVAL expr ident 
    java_cup.runtime.Symbol case552(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int tleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr t = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int vleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int vright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr v = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int uleft = CUP$SqlParser$stack.peek().left;
		int uright = CUP$SqlParser$stack.peek().right;
		String u = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",65, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //timestamp_arithmetic_expr ::= KW_INTERVAL expr ident ADD expr 
    java_cup.runtime.Symbol case551(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int vleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int vright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr v = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int uleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int uright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String u = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tleft = CUP$SqlParser$stack.peek().left;
		int tright = CUP$SqlParser$stack.peek().right;
		Expr t = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",65, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= BITNOT expr 
    java_cup.runtime.Symbol case550(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr BITXOR expr 
    java_cup.runtime.Symbol case549(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr BITOR expr 
    java_cup.runtime.Symbol case548(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr BITAND expr 
    java_cup.runtime.Symbol case547(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr SUBTRACT expr 
    java_cup.runtime.Symbol case546(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr ADD expr 
    java_cup.runtime.Symbol case545(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr KW_DIV expr 
    java_cup.runtime.Symbol case544(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr MOD expr 
    java_cup.runtime.Symbol case543(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr DIVIDE expr 
    java_cup.runtime.Symbol case542(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //arithmetic_expr ::= expr STAR expr 
    java_cup.runtime.Symbol case541(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int e2left = CUP$SqlParser$stack.peek().left;
		int e2right = CUP$SqlParser$stack.peek().right;
		Expr e2 = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",64, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_boundary ::= expr KW_FOLLOWING 
    java_cup.runtime.Symbol case540(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Boundary RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.FOLLOWING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",102, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_boundary ::= expr KW_PRECEDING 
    java_cup.runtime.Symbol case539(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Boundary RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.PRECEDING, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",102, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_boundary ::= KW_CURRENT KW_ROW 
    java_cup.runtime.Symbol case538(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.CURRENT_ROW, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",102, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_boundary ::= KW_UNBOUNDED KW_FOLLOWING 
    java_cup.runtime.Symbol case537(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_FOLLOWING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",102, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_boundary ::= KW_UNBOUNDED KW_PRECEDING 
    java_cup.runtime.Symbol case536(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Boundary RESULT =null;
		
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_PRECEDING, null);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_boundary",102, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_type ::= KW_RANGE 
    java_cup.runtime.Symbol case535(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.RANGE; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",101, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //window_type ::= KW_ROWS 
    java_cup.runtime.Symbol case534(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow.Type RESULT =null;
		 RESULT = AnalyticWindow.Type.ROWS; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("window_type",101, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_window_clause ::= 
    java_cup.runtime.Symbol case533(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",100, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_window_clause ::= window_type KW_BETWEEN window_boundary KW_AND window_boundary 
    java_cup.runtime.Symbol case532(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow RESULT =null;
		int tleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		AnalyticWindow.Boundary l = (AnalyticWindow.Boundary) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rleft = CUP$SqlParser$stack.peek().left;
		int rright = CUP$SqlParser$stack.peek().right;
		AnalyticWindow.Boundary r = (AnalyticWindow.Boundary) CUP$SqlParser$stack.peek().value;
		 RESULT = new AnalyticWindow(t, l, r); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",100, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_window_clause ::= window_type window_boundary 
    java_cup.runtime.Symbol case531(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AnalyticWindow RESULT =null;
		int tleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		AnalyticWindow.Type t = (AnalyticWindow.Type) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int bleft = CUP$SqlParser$stack.peek().left;
		int bright = CUP$SqlParser$stack.peek().right;
		AnalyticWindow.Boundary b = (AnalyticWindow.Boundary) CUP$SqlParser$stack.peek().value;
		 RESULT = new AnalyticWindow(t, b); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_window_clause",100, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_by_clause ::= 
    java_cup.runtime.Symbol case530(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",86, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_by_clause ::= KW_PARTITION KW_BY expr_list 
    java_cup.runtime.Symbol case529(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		ArrayList<Expr> l = (ArrayList<Expr>) CUP$SqlParser$stack.peek().value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_by_clause",86, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //analytic_expr ::= function_call_expr KW_OVER LPAREN opt_partition_by_clause order_by_clause opt_window_clause RPAREN 
    java_cup.runtime.Symbol case528(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int pleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int pright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<Expr> p = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int oleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int oright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<OrderByElement> o = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int wleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int wright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		AnalyticWindow w = (AnalyticWindow) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    // Handle cases where function_call_expr resulted in a plain Expr
    if (!(e instanceof FunctionCallExpr)) {
      parser.parseError("over", SqlParserSymbols.KW_OVER);
    }
    FunctionCallExpr f = (FunctionCallExpr)e;
    f.setIsAnalyticFnCall(true);
    RESULT = new AnalyticExpr(f, p, o, w);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("analytic_expr",94, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //func_arg_list ::= func_arg_list COMMA expr 
    java_cup.runtime.Symbol case527(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<Expr> list = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		Expr item = (Expr) CUP$SqlParser$stack.peek().value;
		
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("func_arg_list",68, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //func_arg_list ::= expr 
    java_cup.runtime.Symbol case526(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		Expr item = (Expr) CUP$SqlParser$stack.peek().value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(item);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("func_arg_list",68, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_NULL KW_IS KW_NOT KW_NULL 
    java_cup.runtime.Symbol case525(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_NULL KW_IS KW_NULL 
    java_cup.runtime.Symbol case524(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= subquery 
    java_cup.runtime.Symbol case523(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int sleft = CUP$SqlParser$stack.peek().left;
		int sright = CUP$SqlParser$stack.peek().right;
		Subquery s = (Subquery) CUP$SqlParser$stack.peek().value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_PASSWORD LPAREN STRING_LITERAL RPAREN 
    java_cup.runtime.Symbol case522(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int textleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int textright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String text = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = new StringLiteral(new String(MysqlPassword.makeScrambledPassword(text)));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_CONNECTION_ID LPAREN RPAREN 
    java_cup.runtime.Symbol case521(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = new InformationFunction("CONNECTION_ID"); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_CURRENT_USER LPAREN RPAREN 
    java_cup.runtime.Symbol case520(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = new InformationFunction("CURRENT_USER"); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_DATABASE LPAREN RPAREN 
    java_cup.runtime.Symbol case519(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = new InformationFunction("DATABASE"); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_TRIM LPAREN function_params RPAREN 
    java_cup.runtime.Symbol case518(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int idleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int idright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String id = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int paramsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int paramsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		FunctionParams params = (FunctionParams) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new FunctionCallExpr(new FunctionName(null, id), params); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= LPAREN non_pred_expr RPAREN 
    java_cup.runtime.Symbol case517(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= arithmetic_expr 
    java_cup.runtime.Symbol case516(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= timestamp_arithmetic_expr 
    java_cup.runtime.Symbol case515(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= column_ref 
    java_cup.runtime.Symbol case514(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int cleft = CUP$SqlParser$stack.peek().left;
		int cright = CUP$SqlParser$stack.peek().right;
		SlotRef c = (SlotRef) CUP$SqlParser$stack.peek().value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= case_expr 
    java_cup.runtime.Symbol case513(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int cleft = CUP$SqlParser$stack.peek().left;
		int cright = CUP$SqlParser$stack.peek().right;
		CaseExpr c = (CaseExpr) CUP$SqlParser$stack.peek().value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= cast_expr 
    java_cup.runtime.Symbol case512(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int cleft = CUP$SqlParser$stack.peek().left;
		int cright = CUP$SqlParser$stack.peek().right;
		Expr c = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_IF LPAREN expr_list RPAREN 
    java_cup.runtime.Symbol case511(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int exprsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int exprsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new FunctionCallExpr("if", exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= analytic_expr 
    java_cup.runtime.Symbol case510(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_EXTRACT LPAREN function_name KW_FROM func_arg_list RPAREN 
    java_cup.runtime.Symbol case509(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int fn_nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int fn_nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		FunctionName fn_name = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int exprsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int exprsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new FunctionCallExpr(fn_name, exprs); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_TIMESTAMP STRING_LITERAL 
    java_cup.runtime.Symbol case508(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new StringLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= KW_DATE STRING_LITERAL 
    java_cup.runtime.Symbol case507(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new StringLiteral(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= function_call_expr 
    java_cup.runtime.Symbol case506(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= literal 
    java_cup.runtime.Symbol case505(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		LiteralExpr l = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= AT AT var_ident_type ident 
    java_cup.runtime.Symbol case504(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SetType type = (SetType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT = new SysVariableDesc(l, type);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= AT AT ident 
    java_cup.runtime.Symbol case503(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT = new SysVariableDesc(l);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //non_pred_expr ::= sign_chain_expr 
    java_cup.runtime.Symbol case502(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",63, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //exists_predicate ::= KW_EXISTS subquery 
    java_cup.runtime.Symbol case501(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Predicate RESULT =null;
		int sleft = CUP$SqlParser$stack.peek().left;
		int sright = CUP$SqlParser$stack.peek().right;
		Subquery s = (Subquery) CUP$SqlParser$stack.peek().value;
		 RESULT = new ExistsPredicate(s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("exists_predicate",84, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_call_expr ::= function_name LPAREN function_params RPAREN 
    java_cup.runtime.Symbol case500(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int fn_nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int fn_nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		FunctionName fn_name = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int paramsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int paramsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		FunctionParams params = (FunctionParams) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new FunctionCallExpr(fn_name, params); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",99, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_call_expr ::= function_name LPAREN RPAREN 
    java_cup.runtime.Symbol case499(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int fn_nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int fn_nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		FunctionName fn_name = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		 RESULT = new FunctionCallExpr(fn_name, new ArrayList<Expr>()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_call_expr",99, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //expr ::= predicate 
    java_cup.runtime.Symbol case498(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int pleft = CUP$SqlParser$stack.peek().left;
		int pright = CUP$SqlParser$stack.peek().right;
		Predicate p = (Predicate) CUP$SqlParser$stack.peek().value;
		 RESULT = p; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",62, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //expr ::= non_pred_expr 
    java_cup.runtime.Symbol case497(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",62, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //sign_chain_expr ::= ADD expr 
    java_cup.runtime.Symbol case496(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",117, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //sign_chain_expr ::= SUBTRACT expr 
    java_cup.runtime.Symbol case495(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
    // integrate signs into literals
    if (e.isLiteral() && e.getType().isNumericType()) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, new IntLiteral((long)-1), e);
    }
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",117, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_else_clause ::= 
    java_cup.runtime.Symbol case494(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",93, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_else_clause ::= KW_ELSE expr 
    java_cup.runtime.Symbol case493(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_else_clause",93, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_when_clause_list ::= case_when_clause_list KW_WHEN expr KW_THEN expr 
    java_cup.runtime.Symbol case492(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<CaseWhenClause> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<CaseWhenClause> list = (ArrayList<CaseWhenClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int whenExprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int whenExprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr whenExpr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int thenExprleft = CUP$SqlParser$stack.peek().left;
		int thenExprright = CUP$SqlParser$stack.peek().right;
		Expr thenExpr = (Expr) CUP$SqlParser$stack.peek().value;
		
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",97, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_when_clause_list ::= KW_WHEN expr KW_THEN expr 
    java_cup.runtime.Symbol case491(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<CaseWhenClause> RESULT =null;
		int whenExprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int whenExprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr whenExpr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int thenExprleft = CUP$SqlParser$stack.peek().left;
		int thenExprright = CUP$SqlParser$stack.peek().right;
		Expr thenExpr = (Expr) CUP$SqlParser$stack.peek().value;
		
    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",97, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_expr ::= KW_CASE case_when_clause_list case_else_clause KW_END 
    java_cup.runtime.Symbol case490(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      CaseExpr RESULT =null;
		int whenClauseListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int whenClauseListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int elseExprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int elseExprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr elseExpr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new CaseExpr(null, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",96, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //case_expr ::= KW_CASE expr case_when_clause_list case_else_clause KW_END 
    java_cup.runtime.Symbol case489(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      CaseExpr RESULT =null;
		int caseExprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int caseExprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr caseExpr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int whenClauseListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int whenClauseListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int elseExprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int elseExprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr elseExpr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new CaseExpr(caseExpr, whenClauseList, elseExpr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_expr",96, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cast_expr ::= KW_CAST LPAREN expr KW_AS KW_CHAR LPAREN non_pred_expr RPAREN opt_charset_name RPAREN 
    java_cup.runtime.Symbol case488(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		 RESULT = new CastExpr(Type.fromPrimitiveType(PrimitiveType.VARCHAR), e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",92, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cast_expr ::= KW_CAST LPAREN expr KW_AS KW_CHAR opt_charset_name RPAREN 
    java_cup.runtime.Symbol case487(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		 RESULT = new CastExpr(Type.fromPrimitiveType(PrimitiveType.VARCHAR), e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",92, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cast_expr ::= KW_CAST LPAREN expr KW_AS primitive_type LPAREN non_pred_expr RPAREN RPAREN 
    java_cup.runtime.Symbol case486(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int targetTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int targetTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		PrimitiveType targetType = (PrimitiveType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int e1left = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int e1right = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr e1 = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		 RESULT = new CastExpr(Type.fromPrimitiveType((PrimitiveType) targetType), e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",92, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cast_expr ::= KW_CAST LPAREN expr KW_AS primitive_type RPAREN 
    java_cup.runtime.Symbol case485(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int targetTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int targetTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		PrimitiveType targetType = (PrimitiveType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new CastExpr(Type.fromPrimitiveType((PrimitiveType) targetType), e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",92, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cast_expr ::= KW_CAST LPAREN expr KW_AS KW_STRING RPAREN 
    java_cup.runtime.Symbol case484(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		 RESULT = new CastExpr(Type.VARCHAR, e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cast_expr",92, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //limit_clause ::= KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
    java_cup.runtime.Symbol case483(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LimitElement RESULT =null;
		int limitleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int limitright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long limit = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int offsetleft = CUP$SqlParser$stack.peek().left;
		int offsetright = CUP$SqlParser$stack.peek().right;
		Long offset = (Long) CUP$SqlParser$stack.peek().value;
		 RESULT = new LimitElement(offset.longValue(), limit.longValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("limit_clause",91, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //limit_clause ::= KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
    java_cup.runtime.Symbol case482(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LimitElement RESULT =null;
		int offsetleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int offsetright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long offset = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		 RESULT = new LimitElement(offset.longValue(), limit.longValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("limit_clause",91, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //limit_clause ::= 
    java_cup.runtime.Symbol case481(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LimitElement RESULT =null;
		 RESULT = LimitElement.NO_LIMIT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("limit_clause",91, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //limit_clause ::= KW_LIMIT INTEGER_LITERAL 
    java_cup.runtime.Symbol case480(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LimitElement RESULT =null;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		 RESULT = new LimitElement(limit.longValue()); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("limit_clause",91, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_element ::= expr KW_DESC 
    java_cup.runtime.Symbol case479(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      OrderByElement RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new OrderByElement(e, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_element",90, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_element ::= expr KW_ASC 
    java_cup.runtime.Symbol case478(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      OrderByElement RESULT =null;
		int eleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int eright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr e = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new OrderByElement(e, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_element",90, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_element ::= expr 
    java_cup.runtime.Symbol case477(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      OrderByElement RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = new OrderByElement(e, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_element",90, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_elements ::= order_by_elements COMMA order_by_element 
    java_cup.runtime.Symbol case476(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<OrderByElement> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<OrderByElement> list = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		OrderByElement e = (OrderByElement) CUP$SqlParser$stack.peek().value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",88, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_elements ::= order_by_element 
    java_cup.runtime.Symbol case475(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<OrderByElement> RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		OrderByElement e = (OrderByElement) CUP$SqlParser$stack.peek().value;
		
    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_elements",88, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_clause ::= 
    java_cup.runtime.Symbol case474(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<OrderByElement> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_clause",89, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //order_by_clause ::= KW_ORDER KW_BY order_by_elements 
    java_cup.runtime.Symbol case473(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<OrderByElement> RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		ArrayList<OrderByElement> l = (ArrayList<OrderByElement>) CUP$SqlParser$stack.peek().value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_by_clause",89, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //having_clause ::= 
    java_cup.runtime.Symbol case472(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",87, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //having_clause ::= KW_HAVING expr 
    java_cup.runtime.Symbol case471(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("having_clause",87, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //group_by_clause ::= 
    java_cup.runtime.Symbol case470(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",85, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //group_by_clause ::= KW_GROUP KW_BY expr_list 
    java_cup.runtime.Symbol case469(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		ArrayList<Expr> l = (ArrayList<Expr>) CUP$SqlParser$stack.peek().value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("group_by_clause",85, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //where_clause ::= 
    java_cup.runtime.Symbol case468(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",77, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //where_clause ::= KW_WHERE expr 
    java_cup.runtime.Symbol case467(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Expr RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		 RESULT = e; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("where_clause",77, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //expr_list ::= expr_list COMMA expr 
    java_cup.runtime.Symbol case466(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<Expr> list = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",67, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //expr_list ::= expr 
    java_cup.runtime.Symbol case465(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Expr> RESULT =null;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_list",67, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //ident_list ::= ident_list COMMA ident 
    java_cup.runtime.Symbol case464(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> list = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
      list.add(ident);
      RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",71, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //ident_list ::= ident 
    java_cup.runtime.Symbol case463(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
      ArrayList<String> list = new ArrayList<String>();
      list.add(ident);
      RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",71, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_sort_hints ::= 
    java_cup.runtime.Symbol case462(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_sort_hints",115, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_sort_hints ::= LBRACKET ident_list RBRACKET 
    java_cup.runtime.Symbol case461(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> l = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = l; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_sort_hints",115, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_plan_hints ::= 
    java_cup.runtime.Symbol case460(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",114, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_plan_hints ::= LBRACKET ident_list RBRACKET 
    java_cup.runtime.Symbol case459(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> l = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",114, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_plan_hints ::= COMMENTED_PLAN_HINTS 
    java_cup.runtime.Symbol case458(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
        ArrayList<String> hints = Lists.newArrayList();
        String[] tokens = l.split(",");
        for (String token: tokens) {
            String trimmedToken = token.trim();
            if (trimmedToken.length() > 0) {
                hints.add(trimmedToken);
            }
        }
        RESULT = hints;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_plan_hints",114, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_outer ::= 
    java_cup.runtime.Symbol case457(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",33, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_outer ::= KW_OUTER 
    java_cup.runtime.Symbol case456(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_outer",33, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_inner ::= 
    java_cup.runtime.Symbol case455(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",32, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_inner ::= KW_INNER 
    java_cup.runtime.Symbol case454(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_inner",32, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_CROSS KW_JOIN 
    java_cup.runtime.Symbol case453(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.CROSS_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_RIGHT KW_ANTI KW_JOIN 
    java_cup.runtime.Symbol case452(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_LEFT KW_ANTI KW_JOIN 
    java_cup.runtime.Symbol case451(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_ANTI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_RIGHT KW_SEMI KW_JOIN 
    java_cup.runtime.Symbol case450(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_LEFT KW_SEMI KW_JOIN 
    java_cup.runtime.Symbol case449(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_SEMI_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_FULL opt_outer KW_JOIN 
    java_cup.runtime.Symbol case448(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.FULL_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_RIGHT opt_outer KW_JOIN 
    java_cup.runtime.Symbol case447(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_MERGE KW_JOIN 
    java_cup.runtime.Symbol case446(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.MERGE_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= KW_LEFT opt_outer KW_JOIN 
    java_cup.runtime.Symbol case445(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_OUTER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //join_operator ::= opt_inner KW_JOIN 
    java_cup.runtime.Symbol case444(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      JoinOperator RESULT =null;
		 RESULT = JoinOperator.INNER_JOIN; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("join_operator",113, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_using_partition ::= KW_PARTITION LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case443(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = partitions;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_using_partition",72, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_using_partition ::= 
    java_cup.runtime.Symbol case442(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_using_partition",72, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_table_alias ::= EQUAL ident 
    java_cup.runtime.Symbol case441(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = alias;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_table_alias",70, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_table_alias ::= KW_AS ident 
    java_cup.runtime.Symbol case440(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = alias;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_table_alias",70, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_table_alias ::= ident 
    java_cup.runtime.Symbol case439(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = alias;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_table_alias",70, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_table_alias ::= 
    java_cup.runtime.Symbol case438(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_table_alias",70, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //base_table_ref ::= table_name opt_using_partition opt_table_alias 
    java_cup.runtime.Symbol case437(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableRef RESULT =null;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		TableName name = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int partsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> parts = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new TableRef(name, alias, parts);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("base_table_ref",107, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //inline_view_ref ::= LPAREN query_stmt RPAREN opt_table_alias 
    java_cup.runtime.Symbol case436(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      InlineViewRef RESULT =null;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new InlineViewRef(alias, query);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("inline_view_ref",112, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref ::= inline_view_ref 
    java_cup.runtime.Symbol case435(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableRef RESULT =null;
		int sleft = CUP$SqlParser$stack.peek().left;
		int sright = CUP$SqlParser$stack.peek().right;
		InlineViewRef s = (InlineViewRef) CUP$SqlParser$stack.peek().value;
		 RESULT = s; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",106, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref ::= base_table_ref 
    java_cup.runtime.Symbol case434(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableRef RESULT =null;
		int bleft = CUP$SqlParser$stack.peek().left;
		int bright = CUP$SqlParser$stack.peek().right;
		TableRef b = (TableRef) CUP$SqlParser$stack.peek().value;
		 RESULT = b; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref",106, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints KW_USING LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case433(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<TableRef> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		JoinOperator op = (JoinOperator) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int hintsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int hintsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		ArrayList<String> hints = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		TableRef table = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int hleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int hright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> h = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int colNamesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colNamesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> colNames = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setUsingClause(colNames);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",104, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints KW_ON expr 
    java_cup.runtime.Symbol case432(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<TableRef> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		JoinOperator op = (JoinOperator) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int hintsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int hintsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> hints = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		TableRef table = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int hleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int hright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> h = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setOnClause(e);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",104, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref_list ::= table_ref_list join_operator opt_plan_hints table_ref opt_sort_hints 
    java_cup.runtime.Symbol case431(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<TableRef> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		JoinOperator op = (JoinOperator) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int hintsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int hintsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> hints = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableRef table = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hleft = CUP$SqlParser$stack.peek().left;
		int hright = CUP$SqlParser$stack.peek().right;
		ArrayList<String> h = (ArrayList<String>) CUP$SqlParser$stack.peek().value;
		
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",104, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref_list ::= table_ref_list COMMA table_ref opt_sort_hints 
    java_cup.runtime.Symbol case430(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<TableRef> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableRef table = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hleft = CUP$SqlParser$stack.peek().left;
		int hright = CUP$SqlParser$stack.peek().right;
		ArrayList<String> h = (ArrayList<String>) CUP$SqlParser$stack.peek().value;
		
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",104, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_ref_list ::= table_ref opt_sort_hints 
    java_cup.runtime.Symbol case429(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<TableRef> RESULT =null;
		int tleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableRef t = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hleft = CUP$SqlParser$stack.peek().left;
		int hright = CUP$SqlParser$stack.peek().right;
		ArrayList<String> h = (ArrayList<String>) CUP$SqlParser$stack.peek().value;
		
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    t.setSortHints(h);
    list.add(t);
    RESULT = list;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_ref_list",104, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //from_clause ::= KW_FROM table_ref_list 
    java_cup.runtime.Symbol case428(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FromClause RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		ArrayList<TableRef> l = (ArrayList<TableRef>) CUP$SqlParser$stack.peek().value;
		 RESULT = new FromClause(l); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_clause",105, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_name ::= ident DOT ident 
    java_cup.runtime.Symbol case427(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionName RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int fnleft = CUP$SqlParser$stack.peek().left;
		int fnright = CUP$SqlParser$stack.peek().right;
		String fn = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new FunctionName(db, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",76, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //function_name ::= ident 
    java_cup.runtime.Symbol case426(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      FunctionName RESULT =null;
		int fnleft = CUP$SqlParser$stack.peek().left;
		int fnright = CUP$SqlParser$stack.peek().right;
		String fn = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new FunctionName(null, fn); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("function_name",76, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_name ::= ident DOT ident 
    java_cup.runtime.Symbol case425(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableName RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tblleft = CUP$SqlParser$stack.peek().left;
		int tblright = CUP$SqlParser$stack.peek().right;
		String tbl = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new TableName(db, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",75, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //table_name ::= ident 
    java_cup.runtime.Symbol case424(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableName RESULT =null;
		int tblleft = CUP$SqlParser$stack.peek().left;
		int tblright = CUP$SqlParser$stack.peek().right;
		String tbl = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new TableName(null, tbl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",75, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //star_expr ::= ident DOT ident DOT STAR 
    java_cup.runtime.Symbol case423(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectListItem RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        RESULT = SelectListItem.createStarItem(new TableName(db, tbl));
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",61, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //star_expr ::= ident DOT STAR 
    java_cup.runtime.Symbol case422(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectListItem RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        RESULT = SelectListItem.createStarItem(new TableName(null, tbl));
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("star_expr",61, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_alias ::= STRING_LITERAL 
    java_cup.runtime.Symbol case421(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_alias",69, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_alias ::= KW_AS STRING_LITERAL 
    java_cup.runtime.Symbol case420(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		String l = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_alias",69, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_alias ::= ident 
    java_cup.runtime.Symbol case419(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = ident;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_alias",69, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_alias ::= KW_AS ident 
    java_cup.runtime.Symbol case418(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = ident;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_alias",69, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_alias ::= 
    java_cup.runtime.Symbol case417(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_alias",69, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_list_item ::= star_expr 
    java_cup.runtime.Symbol case416(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectListItem RESULT =null;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		SelectListItem expr = (SelectListItem) CUP$SqlParser$stack.peek().value;
		
        RESULT = expr;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",60, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_list_item ::= expr opt_collate select_alias 
    java_cup.runtime.Symbol case415(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectListItem RESULT =null;
		int exprleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int exprright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr expr = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int collateleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int collateright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String collate = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int aliasleft = CUP$SqlParser$stack.peek().left;
		int aliasright = CUP$SqlParser$stack.peek().right;
		String alias = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SelectListItem(expr, alias);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list_item",60, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_sublist ::= select_list_item 
    java_cup.runtime.Symbol case414(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		SelectListItem item = (SelectListItem) CUP$SqlParser$stack.peek().value;
		
        SelectList list = new SelectList();
        list.addItem(item);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_sublist",59, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_sublist ::= STAR COMMA select_list_item 
    java_cup.runtime.Symbol case413(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		SelectListItem item = (SelectListItem) CUP$SqlParser$stack.peek().value;
		
        SelectList list = new SelectList();
        list.addItem(SelectListItem.createStarItem(null));
        list.addItem(item);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_sublist",59, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_sublist ::= select_sublist COMMA STAR 
    java_cup.runtime.Symbol case412(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		SelectList list = (SelectList) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        list.addItem(SelectListItem.createStarItem(null));
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_sublist",59, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_sublist ::= select_sublist COMMA select_list_item 
    java_cup.runtime.Symbol case411(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		SelectList list = (SelectList) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		SelectListItem item = (SelectListItem) CUP$SqlParser$stack.peek().value;
		
        list.addItem(item);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_sublist",59, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_list ::= STAR 
    java_cup.runtime.Symbol case410(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		
        SelectList list = new SelectList();
        list.addItem(SelectListItem.createStarItem(null));
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",58, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_list ::= select_sublist 
    java_cup.runtime.Symbol case409(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		SelectList list = (SelectList) CUP$SqlParser$stack.peek().value;
		
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_list",58, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_clause ::= KW_SELECT KW_DISTINCT select_list 
    java_cup.runtime.Symbol case408(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		SelectList l = (SelectList) CUP$SqlParser$stack.peek().value;
		
        l.setIsDistinct(true);
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",57, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_clause ::= KW_SELECT KW_ALL select_list 
    java_cup.runtime.Symbol case407(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		SelectList l = (SelectList) CUP$SqlParser$stack.peek().value;
		
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",57, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_clause ::= KW_SELECT select_list 
    java_cup.runtime.Symbol case406(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectList RESULT =null;
		int lleft = CUP$SqlParser$stack.peek().left;
		int lright = CUP$SqlParser$stack.peek().right;
		SelectList l = (SelectList) CUP$SqlParser$stack.peek().value;
		
        RESULT = l;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_clause",57, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_stmt ::= select_clause from_clause where_clause group_by_clause having_clause order_by_clause limit_clause 
    java_cup.runtime.Symbol case405(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectStmt RESULT =null;
		int selectListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int selectListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		SelectList selectList = (SelectList) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int fromClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int fromClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		FromClause fromClause = (FromClause) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int wherePredicateleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int wherePredicateright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Expr wherePredicate = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int groupingExprsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int groupingExprsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<Expr> groupingExprs = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int havingPredicateleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int havingPredicateright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Expr havingPredicate = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int limitClauseleft = CUP$SqlParser$stack.peek().left;
		int limitClauseright = CUP$SqlParser$stack.peek().right;
		LimitElement limitClause = (LimitElement) CUP$SqlParser$stack.peek().value;
		
    RESULT = new SelectStmt(selectList, fromClause, wherePredicate,
                            groupingExprs, havingPredicate, orderByClause,
                            limitClause);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",29, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //select_stmt ::= select_clause limit_clause 
    java_cup.runtime.Symbol case404(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SelectStmt RESULT =null;
		int selectListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int selectListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SelectList selectList = (SelectList) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int limitClauseleft = CUP$SqlParser$stack.peek().left;
		int limitClauseright = CUP$SqlParser$stack.peek().right;
		LimitElement limitClause = (LimitElement) CUP$SqlParser$stack.peek().value;
		 RESULT = new SelectStmt(selectList, null, null, null, null, null, limitClause); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_stmt",29, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_expr_or_default ::= ident 
    java_cup.runtime.Symbol case403(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		String name = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new StringLiteral(name);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_expr_or_default",66, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_expr_or_default ::= KW_ALL 
    java_cup.runtime.Symbol case402(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		
        RESULT = new StringLiteral("ALL");
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_expr_or_default",66, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_expr_or_default ::= KW_ON 
    java_cup.runtime.Symbol case401(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		
        RESULT = new StringLiteral("ON");
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_expr_or_default",66, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_expr_or_default ::= KW_DEFAULT 
    java_cup.runtime.Symbol case400(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_expr_or_default",66, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_expr_or_default ::= literal 
    java_cup.runtime.Symbol case399(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LiteralExpr RESULT =null;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		LiteralExpr value = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = value;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_expr_or_default",66, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //isolation_types ::= KW_SERIALIZABLE 
    java_cup.runtime.Symbol case398(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("isolation_types",44, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //isolation_types ::= KW_REPEATABLE KW_READ 
    java_cup.runtime.Symbol case397(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("isolation_types",44, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //isolation_types ::= KW_READ KW_COMMITTED 
    java_cup.runtime.Symbol case396(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("isolation_types",44, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //isolation_types ::= KW_READ KW_UNCOMMITTED 
    java_cup.runtime.Symbol case395(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("isolation_types",44, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //isolation_level ::= KW_ISOLATION KW_LEVEL isolation_types 
    java_cup.runtime.Symbol case394(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("isolation_level",42, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_access_mode ::= KW_READ KW_WRITE 
    java_cup.runtime.Symbol case393(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_access_mode",43, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_access_mode ::= KW_READ KW_ONLY 
    java_cup.runtime.Symbol case392(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_access_mode",43, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_characteristics ::= isolation_level COMMA transaction_access_mode 
    java_cup.runtime.Symbol case391(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_characteristics",41, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_characteristics ::= transaction_access_mode COMMA isolation_level 
    java_cup.runtime.Symbol case390(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_characteristics",41, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_characteristics ::= isolation_level 
    java_cup.runtime.Symbol case389(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_characteristics",41, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //transaction_characteristics ::= transaction_access_mode 
    java_cup.runtime.Symbol case388(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("transaction_characteristics",41, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //equal ::= SET_VAR 
    java_cup.runtime.Symbol case387(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("equal",40, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //equal ::= EQUAL 
    java_cup.runtime.Symbol case386(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("equal",40, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //var_ident_type ::= KW_SESSION DOT 
    java_cup.runtime.Symbol case385(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.SESSION;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("var_ident_type",124, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //var_ident_type ::= KW_LOCAL DOT 
    java_cup.runtime.Symbol case384(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.SESSION;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("var_ident_type",124, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //var_ident_type ::= KW_GLOBAL DOT 
    java_cup.runtime.Symbol case383(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.GLOBAL;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("var_ident_type",124, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_var_type ::= KW_SESSION 
    java_cup.runtime.Symbol case382(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		 RESULT = SetType.SESSION; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_var_type",123, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_var_type ::= KW_LOCAL 
    java_cup.runtime.Symbol case381(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		 RESULT = SetType.SESSION; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_var_type",123, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_var_type ::= KW_GLOBAL 
    java_cup.runtime.Symbol case380(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		 RESULT = SetType.GLOBAL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_var_type",123, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_var_type ::= 
    java_cup.runtime.Symbol case379(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		 RESULT = SetType.DEFAULT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_var_type",123, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_type ::= KW_SESSION 
    java_cup.runtime.Symbol case378(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.SESSION;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_type",122, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_type ::= KW_LOCAL 
    java_cup.runtime.Symbol case377(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.SESSION;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_type",122, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_type ::= KW_GLOBAL 
    java_cup.runtime.Symbol case376(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetType RESULT =null;
		
        RESULT = SetType.GLOBAL;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_type",122, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //text_or_password ::= KW_PASSWORD LPAREN STRING_LITERAL RPAREN 
    java_cup.runtime.Symbol case375(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int passwdleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int passwdright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String passwd = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        // This is plain text
        RESULT = new String(MysqlPassword.makeScrambledPassword(passwd));
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("text_or_password",182, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //text_or_password ::= STRING_LITERAL 
    java_cup.runtime.Symbol case374(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int textleft = CUP$SqlParser$stack.peek().left;
		int textright = CUP$SqlParser$stack.peek().right;
		String text = (String) CUP$SqlParser$stack.peek().value;
		
        // This is hashed text
        RESULT = text;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("text_or_password",182, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //variable_name ::= ident 
    java_cup.runtime.Symbol case373(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		String name = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = name;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("variable_name",181, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= KW_PASSWORD KW_FOR STRING_LITERAL equal text_or_password 
    java_cup.runtime.Symbol case372(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String user = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int passwdleft = CUP$SqlParser$stack.peek().left;
		int passwdright = CUP$SqlParser$stack.peek().right;
		String passwd = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetPassVar(user, passwd);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= KW_PASSWORD equal text_or_password 
    java_cup.runtime.Symbol case371(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int passwdleft = CUP$SqlParser$stack.peek().left;
		int passwdright = CUP$SqlParser$stack.peek().right;
		String passwd = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetPassVar(null, passwd);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= KW_NAMES charset_name_or_default opt_collate 
    java_cup.runtime.Symbol case370(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int charsetleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int charsetright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String charset = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int collateleft = CUP$SqlParser$stack.peek().left;
		int collateright = CUP$SqlParser$stack.peek().right;
		String collate = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetNamesVar(charset, collate);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= KW_NAMES equal expr 
    java_cup.runtime.Symbol case369(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		
        parser.parseError("names", SqlParserSymbols.KW_NAMES);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= charset old_or_new_charset_name_or_default 
    java_cup.runtime.Symbol case368(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int charsetleft = CUP$SqlParser$stack.peek().left;
		int charsetright = CUP$SqlParser$stack.peek().right;
		String charset = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetNamesVar(charset);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= AT AT var_ident_type variable_name equal set_expr_or_default 
    java_cup.runtime.Symbol case367(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		SetType type = (SetType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int variableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int variableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String variable = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		LiteralExpr expr = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetVar(type, variable, expr);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= AT AT variable_name equal set_expr_or_default 
    java_cup.runtime.Symbol case366(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int variableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int variableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String variable = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		LiteralExpr expr = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetVar(variable, expr);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= AT ident_or_text equal literal 
    java_cup.runtime.Symbol case365(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int varleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int varright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String var = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		LiteralExpr expr = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetVar(var, expr);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_no_option_type ::= variable_name equal set_expr_or_default 
    java_cup.runtime.Symbol case364(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int variableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int variableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String variable = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		LiteralExpr expr = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetVar(variable, expr);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_no_option_type",127, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_follow_option_type ::= variable_name equal set_expr_or_default 
    java_cup.runtime.Symbol case363(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int variableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int variableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String variable = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int exprleft = CUP$SqlParser$stack.peek().left;
		int exprright = CUP$SqlParser$stack.peek().right;
		LiteralExpr expr = (LiteralExpr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetVar(variable, expr);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_follow_option_type",126, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value ::= option_value_no_option_type 
    java_cup.runtime.Symbol case362(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int varleft = CUP$SqlParser$stack.peek().left;
		int varright = CUP$SqlParser$stack.peek().right;
		SetVar var = (SetVar) CUP$SqlParser$stack.peek().value;
		
        RESULT = var;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value",125, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value ::= option_type option_value_follow_option_type 
    java_cup.runtime.Symbol case361(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SetType type = (SetType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int varleft = CUP$SqlParser$stack.peek().left;
		int varright = CUP$SqlParser$stack.peek().right;
		SetVar var = (SetVar) CUP$SqlParser$stack.peek().value;
		
        var.setType(type);
        RESULT = var;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value",125, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_list ::= option_value_list COMMA option_value 
    java_cup.runtime.Symbol case360(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		SetVar item = (SetVar) CUP$SqlParser$stack.peek().value;
		
        list.add(item);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_list",129, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_list ::= option_value 
    java_cup.runtime.Symbol case359(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int varleft = CUP$SqlParser$stack.peek().left;
		int varright = CUP$SqlParser$stack.peek().right;
		SetVar var = (SetVar) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(var);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_list",129, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_list_continued ::= COMMA option_value_list 
    java_cup.runtime.Symbol case358(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_list_continued",130, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //option_value_list_continued ::= 
    java_cup.runtime.Symbol case357(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		
        RESULT = Lists.newArrayList();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("option_value_list_continued",130, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //start_option_value_list_following_option_type ::= KW_TRANSACTION transaction_characteristics 
    java_cup.runtime.Symbol case356(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		
        RESULT = Lists.newArrayList((SetVar) new SetTransaction());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("start_option_value_list_following_option_type",132, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //start_option_value_list_following_option_type ::= option_value_follow_option_type option_value_list_continued 
    java_cup.runtime.Symbol case355(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int varleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int varright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SetVar var = (SetVar) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        list.add(var);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("start_option_value_list_following_option_type",132, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //start_option_value_list ::= option_type start_option_value_list_following_option_type 
    java_cup.runtime.Symbol case354(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SetType type = (SetType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        if (list == null || list.isEmpty()) {
        } else {
            list.get(0).setType(type);
        }
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("start_option_value_list",131, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //start_option_value_list ::= KW_TRANSACTION transaction_characteristics 
    java_cup.runtime.Symbol case353(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		
        RESULT = Lists.newArrayList((SetVar) new SetTransaction());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("start_option_value_list",131, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //start_option_value_list ::= option_value_no_option_type option_value_list_continued 
    java_cup.runtime.Symbol case352(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int valueleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int valueright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		SetVar value = (SetVar) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        if (list == null) {
            list = Lists.newArrayList(value);
        } else {
            list.add(value);
        }
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("start_option_value_list",131, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //user_property ::= STRING_LITERAL equal KW_NULL 
    java_cup.runtime.Symbol case351(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int keyleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int keyright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String key = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        RESULT = new SetUserPropertyVar(key, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("user_property",128, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //user_property ::= STRING_LITERAL equal STRING_LITERAL 
    java_cup.runtime.Symbol case350(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SetVar RESULT =null;
		int keyleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int keyright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String key = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetUserPropertyVar(key, value);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("user_property",128, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //user_property_list ::= user_property_list COMMA user_property 
    java_cup.runtime.Symbol case349(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int propertyleft = CUP$SqlParser$stack.peek().left;
		int propertyright = CUP$SqlParser$stack.peek().right;
		SetVar property = (SetVar) CUP$SqlParser$stack.peek().value;
		
        list.add(property);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("user_property_list",133, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //user_property_list ::= user_property 
    java_cup.runtime.Symbol case348(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SetVar> RESULT =null;
		int propertyleft = CUP$SqlParser$stack.peek().left;
		int propertyright = CUP$SqlParser$stack.peek().right;
		SetVar property = (SetVar) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(property);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("user_property_list",133, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_stmt ::= KW_SET KW_PROPERTY opt_user user_property_list 
    java_cup.runtime.Symbol case347(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String user = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int property_listleft = CUP$SqlParser$stack.peek().left;
		int property_listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> property_list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetUserPropertyStmt(user, property_list);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",15, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //set_stmt ::= KW_SET start_option_value_list 
    java_cup.runtime.Symbol case346(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SetVar> list = (List<SetVar>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SetStmt(list);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_stmt",15, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //kill_stmt ::= KW_KILL KW_QUERY INTEGER_LITERAL 
    java_cup.runtime.Symbol case345(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		Long value = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = new KillStmt(false, value.longValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("kill_stmt",9, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //kill_stmt ::= KW_KILL KW_CONNECTION INTEGER_LITERAL 
    java_cup.runtime.Symbol case344(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		Long value = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = new KillStmt(true, value.longValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("kill_stmt",9, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //kill_stmt ::= KW_KILL INTEGER_LITERAL 
    java_cup.runtime.Symbol case343(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		Long value = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = new KillStmt(true, value.longValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("kill_stmt",9, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name ::= ident DOT ident KW_AS ident DOT ident 
    java_cup.runtime.Symbol case342(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionName RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int partitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int partitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String partition = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int newTblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int newTblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String newTbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int newPartitionleft = CUP$SqlParser$stack.peek().left;
		int newPartitionright = CUP$SqlParser$stack.peek().right;
		String newPartition = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionName(tbl, newTbl, partition, newPartition);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name",121, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name ::= ident DOT ident 
    java_cup.runtime.Symbol case341(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionName RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int partitionleft = CUP$SqlParser$stack.peek().left;
		int partitionright = CUP$SqlParser$stack.peek().right;
		String partition = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionName(tbl, null, partition, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name",121, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name ::= ident KW_AS ident 
    java_cup.runtime.Symbol case340(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionName RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String tbl = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int newTblleft = CUP$SqlParser$stack.peek().left;
		int newTblright = CUP$SqlParser$stack.peek().right;
		String newTbl = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionName(tbl, newTbl, null, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name",121, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name ::= ident 
    java_cup.runtime.Symbol case339(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionName RESULT =null;
		int tblleft = CUP$SqlParser$stack.peek().left;
		int tblright = CUP$SqlParser$stack.peek().right;
		String tbl = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionName(tbl, null, null, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name",121, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name_list ::= partition_name_list COMMA partition_name 
    java_cup.runtime.Symbol case338(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<PartitionName> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<PartitionName> list = (ArrayList<PartitionName>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int partitionNameleft = CUP$SqlParser$stack.peek().left;
		int partitionNameright = CUP$SqlParser$stack.peek().right;
		PartitionName partitionName = (PartitionName) CUP$SqlParser$stack.peek().value;
		
        list.add(partitionName);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name_list",120, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_name_list ::= partition_name 
    java_cup.runtime.Symbol case337(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<PartitionName> RESULT =null;
		int partitionNameleft = CUP$SqlParser$stack.peek().left;
		int partitionNameright = CUP$SqlParser$stack.peek().right;
		PartitionName partitionName = (PartitionName) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(partitionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_name_list",120, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_name_list ::= LPAREN partition_name_list RPAREN 
    java_cup.runtime.Symbol case336(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<PartitionName> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<PartitionName> list = (ArrayList<PartitionName>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
		RESULT = list;
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_name_list",119, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_name_list ::= 
    java_cup.runtime.Symbol case335(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<PartitionName> RESULT =null;
		
		RESULT = Lists.newArrayList();
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_name_list",119, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //restore_stmt ::= KW_RESTORE KW_LABEL job_label opt_partition_name_list KW_FROM STRING_LITERAL opt_properties 
    java_cup.runtime.Symbol case334(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      RestoreStmt RESULT =null;
		int labelleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int labelright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		LabelName label = (LabelName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int restoreObjNamesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int restoreObjNamesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<PartitionName> restoreObjNames = (ArrayList<PartitionName>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rootPathleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rootPathright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rootPath = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RestoreStmt(label, restoreObjNames, rootPath, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("restore_stmt",56, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //backup_stmt ::= KW_BACKUP KW_LABEL job_label opt_partition_name_list KW_INTO STRING_LITERAL opt_properties 
    java_cup.runtime.Symbol case333(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      BackupStmt RESULT =null;
		int labelleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int labelright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		LabelName label = (LabelName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int backupObjNamesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int backupObjNamesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<PartitionName> backupObjNames = (ArrayList<PartitionName>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rootPathleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rootPathright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rootPath = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new BackupStmt(label, backupObjNames, rootPath, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("backup_stmt",55, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //insert_source ::= query_stmt 
    java_cup.runtime.Symbol case332(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      InsertSource RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.peek().value;
		
        RESULT = new InsertSource(query);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_source",54, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //insert_target ::= table_name opt_using_partition 
    java_cup.runtime.Symbol case331(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      InsertTarget RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableName tbl = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int partitionsleft = CUP$SqlParser$stack.peek().left;
		int partitionsright = CUP$SqlParser$stack.peek().right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new InsertTarget(tbl, partitions);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_target",53, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //insert_stmt ::= KW_INSERT KW_INTO insert_target opt_col_list opt_plan_hints insert_source 
    java_cup.runtime.Symbol case330(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      InsertStmt RESULT =null;
		int targetleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int targetright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		InsertTarget target = (InsertTarget) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<String> cols = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int hintsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int hintsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> hints = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int sourceleft = CUP$SqlParser$stack.peek().left;
		int sourceright = CUP$SqlParser$stack.peek().right;
		InsertSource source = (InsertSource) CUP$SqlParser$stack.peek().value;
		
        RESULT = new InsertStmt(target, cols, source, hints);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_stmt",52, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //use_stmt ::= KW_USE ident 
    java_cup.runtime.Symbol case329(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new UseStmt(db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("use_stmt",8, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //enter_stmt ::= KW_ENTER ident 
    java_cup.runtime.Symbol case328(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int clusterleft = CUP$SqlParser$stack.peek().left;
		int clusterright = CUP$SqlParser$stack.peek().right;
		String cluster = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new EnterStmt(cluster);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("enter_stmt",22, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_op ::= KW_UNION KW_ALL 
    java_cup.runtime.Symbol case327(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Qualifier RESULT =null;
		 RESULT = Qualifier.ALL; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",118, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_op ::= KW_UNION KW_DISTINCT 
    java_cup.runtime.Symbol case326(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",118, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_op ::= KW_UNION 
    java_cup.runtime.Symbol case325(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_op",118, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_operand_list ::= union_operand_list union_op union_operand 
    java_cup.runtime.Symbol case324(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<UnionOperand> RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int opleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int opright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Qualifier op = (Qualifier) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int operandleft = CUP$SqlParser$stack.peek().left;
		int operandright = CUP$SqlParser$stack.peek().right;
		QueryStmt operand = (QueryStmt) CUP$SqlParser$stack.peek().value;
		
    operands.add(new UnionOperand(operand, op));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",50, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_operand_list ::= union_operand 
    java_cup.runtime.Symbol case323(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<UnionOperand> RESULT =null;
		int operandleft = CUP$SqlParser$stack.peek().left;
		int operandright = CUP$SqlParser$stack.peek().right;
		QueryStmt operand = (QueryStmt) CUP$SqlParser$stack.peek().value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(operand, null));
    RESULT = operands;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand_list",50, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_operand ::= LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case322(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = query;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",49, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_operand ::= select_stmt 
    java_cup.runtime.Symbol case321(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int selectleft = CUP$SqlParser$stack.peek().left;
		int selectright = CUP$SqlParser$stack.peek().right;
		SelectStmt select = (SelectStmt) CUP$SqlParser$stack.peek().value;
		
    RESULT = select;
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_operand",49, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
    java_cup.runtime.Symbol case320(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int limitleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int limitright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long limit = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int offsetleft = CUP$SqlParser$stack.peek().left;
		int offsetright = CUP$SqlParser$stack.peek().right;
		Long offset = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, new LimitElement(offset.longValue(), limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
    java_cup.runtime.Symbol case319(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int offsetleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int offsetright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long offset = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, new LimitElement(offset.longValue(), limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL 
    java_cup.runtime.Symbol case318(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, new LimitElement(limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements 
    java_cup.runtime.Symbol case317(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int orderByClauseleft = CUP$SqlParser$stack.peek().left;
		int orderByClauseright = CUP$SqlParser$stack.peek().right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, LimitElement.NO_LIMIT);
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL KW_OFFSET INTEGER_LITERAL 
    java_cup.runtime.Symbol case316(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int limitleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int limitright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long limit = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int offsetleft = CUP$SqlParser$stack.peek().left;
		int offsetright = CUP$SqlParser$stack.peek().right;
		Long offset = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, new LimitElement(offset.longValue(), limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL COMMA INTEGER_LITERAL 
    java_cup.runtime.Symbol case315(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int offsetleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int offsetright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Long offset = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, new LimitElement(offset.longValue(), limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL 
    java_cup.runtime.Symbol case314(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int operandsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int operandsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitleft = CUP$SqlParser$stack.peek().left;
		int limitright = CUP$SqlParser$stack.peek().right;
		Long limit = (Long) CUP$SqlParser$stack.peek().value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, new LimitElement(limit.longValue()));
  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def_list ::= with_view_def_list COMMA with_view_def 
    java_cup.runtime.Symbol case313(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<View> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<View> list = (ArrayList<View>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int vleft = CUP$SqlParser$stack.peek().left;
		int vright = CUP$SqlParser$stack.peek().right;
		View v = (View) CUP$SqlParser$stack.peek().value;
		
        list.add(v);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",109, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def_list ::= with_view_def 
    java_cup.runtime.Symbol case312(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<View> RESULT =null;
		int vleft = CUP$SqlParser$stack.peek().left;
		int vright = CUP$SqlParser$stack.peek().right;
		View v = (View) CUP$SqlParser$stack.peek().value;
		
        ArrayList<View> list = new ArrayList<View>();
        list.add(v);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def_list",109, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def ::= STRING_LITERAL LPAREN ident_list RPAREN KW_AS LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case311(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      View RESULT =null;
		int aliasleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int aliasright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		String alias = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int col_namesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int col_namesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		ArrayList<String> col_names = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new View(alias, query, col_names); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",110, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def ::= ident LPAREN ident_list RPAREN KW_AS LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case310(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      View RESULT =null;
		int aliasleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int aliasright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		String alias = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int col_namesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int col_namesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		ArrayList<String> col_names = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new View(alias, query, col_names); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",110, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def ::= STRING_LITERAL KW_AS LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case309(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      View RESULT =null;
		int aliasleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int aliasright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String alias = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new View(alias, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",110, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //with_view_def ::= ident KW_AS LPAREN query_stmt RPAREN 
    java_cup.runtime.Symbol case308(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      View RESULT =null;
		int aliasleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int aliasright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String alias = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int queryleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int queryright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = new View(alias, query, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_view_def",110, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_with_clause ::= 
    java_cup.runtime.Symbol case307(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      WithClause RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",108, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_with_clause ::= KW_WITH with_view_def_list 
    java_cup.runtime.Symbol case306(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      WithClause RESULT =null;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		ArrayList<View> list = (ArrayList<View>) CUP$SqlParser$stack.peek().value;
		 RESULT = new WithClause(list); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_with_clause",108, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //query_stmt ::= opt_with_clause union_with_order_by_or_limit 
    java_cup.runtime.Symbol case305(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int wleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int wright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		WithClause w = (WithClause) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int unionleft = CUP$SqlParser$stack.peek().left;
		int unionright = CUP$SqlParser$stack.peek().right;
		QueryStmt union = (QueryStmt) CUP$SqlParser$stack.peek().value;
		 
        union.setWithClause(w);
        RESULT = union; 
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",48, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //query_stmt ::= opt_with_clause union_operand_list 
    java_cup.runtime.Symbol case304(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      QueryStmt RESULT =null;
		int wleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int wright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		WithClause w = (WithClause) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int operandsleft = CUP$SqlParser$stack.peek().left;
		int operandsright = CUP$SqlParser$stack.peek().right;
		List<UnionOperand> operands = (List<UnionOperand>) CUP$SqlParser$stack.peek().value;
		
        QueryStmt queryStmt = null;
        if (operands.size() == 1) {
          queryStmt = operands.get(0).getQueryStmt();
        } else {
          queryStmt = new UnionStmt(operands, null, LimitElement.NO_LIMIT);
        }
        queryStmt.setWithClause(w);
        RESULT = queryStmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query_stmt",48, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //delete_stmt ::= KW_DELETE KW_FROM table_name KW_PARTITION ident where_clause opt_properties 
    java_cup.runtime.Symbol case303(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		TableName table = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int partitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int partitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String partition = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int wherePredicateleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int wherePredicateright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Expr wherePredicate = (Expr) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DeleteStmt(table, partition, wherePredicate, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("delete_stmt",19, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_param ::= KW_RESTORE opt_db 
    java_cup.runtime.Symbol case302(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CancelBackupStmt(db, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_param",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_param ::= KW_BACKUP opt_db 
    java_cup.runtime.Symbol case301(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CancelBackupStmt(db, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_param",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_param ::= KW_DECOMMISSION KW_BACKEND string_list 
    java_cup.runtime.Symbol case300(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CancelAlterSystemStmt(hostPorts);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_param",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_param ::= KW_ALTER KW_TABLE opt_alter_type KW_FROM table_name 
    java_cup.runtime.Symbol case299(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ShowAlterStmt.AlterType type = (ShowAlterStmt.AlterType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tableleft = CUP$SqlParser$stack.peek().left;
		int tableright = CUP$SqlParser$stack.peek().right;
		TableName table = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CancelAlterTableStmt(type, table);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_param",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_param ::= KW_LOAD opt_db opt_wild_where 
    java_cup.runtime.Symbol case298(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new CancelLoadStmt(db, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_param",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cancel_stmt ::= KW_CANCEL cancel_param 
    java_cup.runtime.Symbol case297(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		
        RESULT = stmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cancel_stmt",17, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_command ::= KW_DESC 
    java_cup.runtime.Symbol case296(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_command",30, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_command ::= KW_DESCRIBE 
    java_cup.runtime.Symbol case295(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_command",30, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_stmt ::= describe_command insert_stmt 
    java_cup.runtime.Symbol case294(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		InsertStmt stmt = (InsertStmt) CUP$SqlParser$stack.peek().value;
		
        stmt.getQueryStmt().setIsExplain(true);
        RESULT = stmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",6, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_stmt ::= describe_command query_stmt 
    java_cup.runtime.Symbol case293(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.peek().value;
		
        query.setIsExplain(true);
        RESULT = query;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",6, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_stmt ::= describe_command table_name KW_ALL 
    java_cup.runtime.Symbol case292(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableName table = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new DescribeStmt(table, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",6, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //describe_stmt ::= describe_command table_name 
    java_cup.runtime.Symbol case291(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.peek().left;
		int tableright = CUP$SqlParser$stack.peek().right;
		TableName table = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DescribeStmt(table, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("describe_stmt",6, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_alter_type ::= KW_COLUMN 
    java_cup.runtime.Symbol case290(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ShowAlterStmt.AlterType RESULT =null;
		
        RESULT = ShowAlterStmt.AlterType.COLUMN;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_alter_type",196, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_alter_type ::= KW_ROLLUP 
    java_cup.runtime.Symbol case289(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ShowAlterStmt.AlterType RESULT =null;
		
        RESULT = ShowAlterStmt.AlterType.ROLLUP;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_alter_type",196, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_wild_where ::= KW_WHERE expr 
    java_cup.runtime.Symbol case288(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		int whereleft = CUP$SqlParser$stack.peek().left;
		int whereright = CUP$SqlParser$stack.peek().right;
		Expr where = (Expr) CUP$SqlParser$stack.peek().value;
		
        parser.where = where;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_wild_where",37, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_wild_where ::= KW_LIKE STRING_LITERAL 
    java_cup.runtime.Symbol case287(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		int wildleft = CUP$SqlParser$stack.peek().left;
		int wildright = CUP$SqlParser$stack.peek().right;
		String wild = (String) CUP$SqlParser$stack.peek().value;
		
        parser.wild = wild;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_wild_where",37, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_wild_where ::= 
    java_cup.runtime.Symbol case286(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_wild_where",37, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_full ::= KW_FULL 
    java_cup.runtime.Symbol case285(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        parser.isVerbose = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_full",31, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_full ::= 
    java_cup.runtime.Symbol case284(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		
        parser.isVerbose = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_full",31, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //from_or_in ::= KW_IN 
    java_cup.runtime.Symbol case283(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_or_in",34, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //from_or_in ::= KW_FROM 
    java_cup.runtime.Symbol case282(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_or_in",34, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //procedure_or_function ::= KW_FUNCTION 
    java_cup.runtime.Symbol case281(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("procedure_or_function",189, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //procedure_or_function ::= KW_PROCEDURE 
    java_cup.runtime.Symbol case280(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("procedure_or_function",189, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_storage ::= KW_STORAGE 
    java_cup.runtime.Symbol case279(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_storage",36, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_storage ::= 
    java_cup.runtime.Symbol case278(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_storage",36, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //collation_name_or_default ::= KW_DEFAULT 
    java_cup.runtime.Symbol case277(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("collation_name_or_default",186, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //collation_name_or_default ::= ident_or_text 
    java_cup.runtime.Symbol case276(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("collation_name_or_default",186, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_collate ::= KW_COLLATE collation_name_or_default 
    java_cup.runtime.Symbol case275(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int collateleft = CUP$SqlParser$stack.peek().left;
		int collateright = CUP$SqlParser$stack.peek().right;
		String collate = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = collate;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_collate",185, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_collate ::= 
    java_cup.runtime.Symbol case274(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_collate",185, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_charset_name ::= charset old_or_new_charset_name_or_default 
    java_cup.runtime.Symbol case273(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_charset_name",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_charset_name ::= 
    java_cup.runtime.Symbol case272(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_charset_name",39, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //old_or_new_charset_name_or_default ::= KW_DEFAULT 
    java_cup.runtime.Symbol case271(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("old_or_new_charset_name_or_default",184, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //old_or_new_charset_name_or_default ::= ident_or_text 
    java_cup.runtime.Symbol case270(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("old_or_new_charset_name_or_default",184, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //charset_name_or_default ::= KW_DEFAULT 
    java_cup.runtime.Symbol case269(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("charset_name_or_default",183, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //charset_name_or_default ::= ident_or_text 
    java_cup.runtime.Symbol case268(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("charset_name_or_default",183, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //charset ::= KW_CHARSET 
    java_cup.runtime.Symbol case267(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("charset",38, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //charset ::= KW_CHAR KW_SET 
    java_cup.runtime.Symbol case266(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("charset",38, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_name ::= KW_PARTITION ident 
    java_cup.runtime.Symbol case265(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int partitionNameleft = CUP$SqlParser$stack.peek().left;
		int partitionNameright = CUP$SqlParser$stack.peek().right;
		String partitionName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = partitionName;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_name",188, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition_name ::= 
    java_cup.runtime.Symbol case264(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_name",188, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_db ::= from_or_in ident 
    java_cup.runtime.Symbol case263(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = db;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_db",187, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_db ::= 
    java_cup.runtime.Symbol case262(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_db",187, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keys_or_index ::= KW_INDEXES 
    java_cup.runtime.Symbol case261(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keys_or_index",35, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keys_or_index ::= KW_INDEX 
    java_cup.runtime.Symbol case260(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keys_or_index",35, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //keys_or_index ::= KW_KEY 
    java_cup.runtime.Symbol case259(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keys_or_index",35, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_USER 
    java_cup.runtime.Symbol case258(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		   
        RESULT = new ShowUserStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_BACKENDS 
    java_cup.runtime.Symbol case257(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		   
        RESULT = new ShowBackendsStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_BROKER 
    java_cup.runtime.Symbol case256(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowBrokerStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_RESTORE opt_db opt_wild_where 
    java_cup.runtime.Symbol case255(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowRestoreStmt(db, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_BACKUP opt_db opt_wild_where 
    java_cup.runtime.Symbol case254(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowBackupStmt(db, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_PROPERTY opt_user opt_wild_where 
    java_cup.runtime.Symbol case253(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String user = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowUserPropertyStmt(user, parser.wild);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_TABLET KW_FROM table_name 
    java_cup.runtime.Symbol case252(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbTblNameleft = CUP$SqlParser$stack.peek().left;
		int dbTblNameright = CUP$SqlParser$stack.peek().right;
		TableName dbTblName = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowTabletStmt(dbTblName, -1L);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_TABLET INTEGER_LITERAL 
    java_cup.runtime.Symbol case251(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tabletIdleft = CUP$SqlParser$stack.peek().left;
		int tabletIdright = CUP$SqlParser$stack.peek().right;
		Long tabletId = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowTabletStmt(null, tabletId);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_PARTITIONS KW_FROM table_name opt_partition_name 
    java_cup.runtime.Symbol case250(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tblNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableName tblName = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int partitionNameleft = CUP$SqlParser$stack.peek().left;
		int partitionNameright = CUP$SqlParser$stack.peek().right;
		String partitionName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowPartitionsStmt(tblName, partitionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_DATA KW_FROM table_name 
    java_cup.runtime.Symbol case249(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbTblNameleft = CUP$SqlParser$stack.peek().left;
		int dbTblNameright = CUP$SqlParser$stack.peek().right;
		TableName dbTblName = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowDataStmt(dbTblName.getDb(), dbTblName.getTbl());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_DATA 
    java_cup.runtime.Symbol case248(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowDataStmt(null, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_ALTER KW_TABLE opt_alter_type opt_db 
    java_cup.runtime.Symbol case247(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ShowAlterStmt.AlterType type = (ShowAlterStmt.AlterType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowAlterStmt(type, db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_DELETE opt_db 
    java_cup.runtime.Symbol case246(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowDeleteStmt(db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_EXPORT opt_db opt_wild_where order_by_clause limit_clause 
    java_cup.runtime.Symbol case245(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int limitClauseleft = CUP$SqlParser$stack.peek().left;
		int limitClauseright = CUP$SqlParser$stack.peek().right;
		LimitElement limitClause = (LimitElement) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowExportStmt(db, parser.where, orderByClause, limitClause);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_LOAD opt_db opt_wild_where order_by_clause limit_clause 
    java_cup.runtime.Symbol case244(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int orderByClauseleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int orderByClauseright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int limitClauseleft = CUP$SqlParser$stack.peek().left;
		int limitClauseright = CUP$SqlParser$stack.peek().right;
		LimitElement limitClause = (LimitElement) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowLoadStmt(db, parser.where, orderByClause, limitClause);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_LOAD KW_WARNINGS opt_db opt_wild_where limit_clause 
    java_cup.runtime.Symbol case243(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int limitClauseleft = CUP$SqlParser$stack.peek().left;
		int limitClauseright = CUP$SqlParser$stack.peek().right;
		LimitElement limitClause = (LimitElement) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowLoadWarningsStmt(db, parser.where, limitClause);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_ERRORS limit_clause 
    java_cup.runtime.Symbol case242(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowWarningStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_WARNINGS limit_clause 
    java_cup.runtime.Symbol case241(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowWarningStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_COUNT LPAREN STAR RPAREN KW_ERRORS 
    java_cup.runtime.Symbol case240(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        SelectList list = new SelectList();
        list.addItem(new SelectListItem(new IntLiteral((long)0), null));
        RESULT = new SelectStmt(list, null, null, null, null, null, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_COUNT LPAREN STAR RPAREN KW_WARNINGS 
    java_cup.runtime.Symbol case239(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        SelectList list = new SelectList();
        list.addItem(new SelectListItem(new IntLiteral((long)0), null));
        RESULT = new SelectStmt(list, null, null, null, null, null, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_PROC STRING_LITERAL 
    java_cup.runtime.Symbol case238(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int pathleft = CUP$SqlParser$stack.peek().left;
		int pathright = CUP$SqlParser$stack.peek().right;
		String path = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowProcStmt(path);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= charset opt_wild_where 
    java_cup.runtime.Symbol case237(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowCharsetStmt(parser.wild);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_COLLATION opt_wild_where 
    java_cup.runtime.Symbol case236(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowCollationStmt(parser.wild);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_full KW_COLUMNS from_or_in table_name opt_db opt_wild_where 
    java_cup.runtime.Symbol case235(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		TableName table = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowColumnStmt(table, db, parser.wild, parser.isVerbose, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_SCHEMAS opt_wild_where 
    java_cup.runtime.Symbol case234(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowDbStmt(parser.wild, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_DATABASES opt_wild_where 
    java_cup.runtime.Symbol case233(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowDbStmt(parser.wild, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_MIGRATIONS 
    java_cup.runtime.Symbol case232(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowMigrationsStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_CLUSTERS 
    java_cup.runtime.Symbol case231(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowClusterStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_CREATE KW_DATABASE ident 
    java_cup.runtime.Symbol case230(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowCreateDbStmt(db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_CREATE KW_VIEW table_name 
    java_cup.runtime.Symbol case229(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.peek().left;
		int tableright = CUP$SqlParser$stack.peek().right;
		TableName table = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowCreateTableStmt(table, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_CREATE KW_TABLE table_name 
    java_cup.runtime.Symbol case228(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.peek().left;
		int tableright = CUP$SqlParser$stack.peek().right;
		TableName table = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowCreateTableStmt(table);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_AUTHORS 
    java_cup.runtime.Symbol case227(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowAuthorStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_storage KW_ENGINES 
    java_cup.runtime.Symbol case226(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowEnginesStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_PLUGINS 
    java_cup.runtime.Symbol case225(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowPluginsStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_EVENTS opt_db opt_wild_where 
    java_cup.runtime.Symbol case224(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowEventsStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_full KW_TRIGGERS opt_db opt_wild_where 
    java_cup.runtime.Symbol case223(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowTriggersStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_var_type KW_STATUS opt_wild_where 
    java_cup.runtime.Symbol case222(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowStatusStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= procedure_or_function KW_STATUS opt_wild_where 
    java_cup.runtime.Symbol case221(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowProcedureStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= keys_or_index from_or_in table_ref opt_db where_clause 
    java_cup.runtime.Symbol case220(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tableleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int tableright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		TableRef table = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int eleft = CUP$SqlParser$stack.peek().left;
		int eright = CUP$SqlParser$stack.peek().right;
		Expr e = (Expr) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ShowKeysStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_full KW_PROCESSLIST 
    java_cup.runtime.Symbol case219(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new ShowProcesslistStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_full KW_TABLES opt_db opt_wild_where 
    java_cup.runtime.Symbol case218(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowTableStmt(db, parser.isVerbose, parser.wild, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_TABLE KW_STATUS opt_db opt_wild_where 
    java_cup.runtime.Symbol case217(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowTableStatusStmt(db, parser.wild, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_OPEN KW_TABLES opt_db opt_wild_where 
    java_cup.runtime.Symbol case216(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ShowOpenTableStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= opt_var_type KW_VARIABLES opt_wild_where 
    java_cup.runtime.Symbol case215(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int typeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int typeright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		SetType type = (SetType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        RESULT = new ShowVariablesStmt(type, parser.wild, parser.where);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_param ::= KW_WHITELIST 
    java_cup.runtime.Symbol case214(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
		RESULT = new ShowWhiteListStmt();
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_param",3, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //show_stmt ::= KW_SHOW show_param 
    java_cup.runtime.Symbol case213(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		
        RESULT = stmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("show_stmt",2, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_external ::= KW_EXTERNAL 
    java_cup.runtime.Symbol case212(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_external",195, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_external ::= 
    java_cup.runtime.Symbol case211(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_external",195, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_if_not_exists ::= KW_IF KW_NOT KW_EXISTS 
    java_cup.runtime.Symbol case210(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_not_exists",194, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_if_not_exists ::= 
    java_cup.runtime.Symbol case209(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_not_exists",194, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_if_exists ::= KW_IF KW_EXISTS 
    java_cup.runtime.Symbol case208(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_exists",193, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_if_exists ::= 
    java_cup.runtime.Symbol case207(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_exists",193, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_comment ::= KW_COMMENT STRING_LITERAL 
    java_cup.runtime.Symbol case206(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int commentleft = CUP$SqlParser$stack.peek().left;
		int commentright = CUP$SqlParser$stack.peek().right;
		String comment = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = comment;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_comment",191, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_comment ::= 
    java_cup.runtime.Symbol case205(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = "";
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_comment",191, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_is_allow_null ::= KW_NOT KW_NULL 
    java_cup.runtime.Symbol case204(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",168, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_is_allow_null ::= KW_NULL 
    java_cup.runtime.Symbol case203(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",168, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_is_allow_null ::= 
    java_cup.runtime.Symbol case202(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",168, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_definition ::= ident column_type opt_is_key opt_agg_type opt_is_allow_null opt_default_value opt_comment 
    java_cup.runtime.Symbol case201(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Column RESULT =null;
		int columnNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int columnNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		String columnName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int dataTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int dataTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		ColumnType dataType = (ColumnType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int isKeyleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int isKeyright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Boolean isKey = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int aggTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int aggTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		AggregateType aggType = (AggregateType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int isAllowNullleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int isAllowNullright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Boolean isAllowNull = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int defaultValueleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int defaultValueright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String defaultValue = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int commentleft = CUP$SqlParser$stack.peek().left;
		int commentright = CUP$SqlParser$stack.peek().right;
		String comment = (String) CUP$SqlParser$stack.peek().value;
		
        Column column = new Column(columnName, dataType, isKey, aggType, isAllowNull, defaultValue, comment);
        RESULT = column;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition",138, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_is_key ::= KW_KEY 
    java_cup.runtime.Symbol case200(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		int keyleft = CUP$SqlParser$stack.peek().left;
		int keyright = CUP$SqlParser$stack.peek().right;
		String key = (String) CUP$SqlParser$stack.peek().value;
		
		RESULT = true;
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_key",169, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_is_key ::= 
    java_cup.runtime.Symbol case199(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
		RESULT = false;
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_key",169, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_default_value ::= KW_DEFAULT KW_NULL 
    java_cup.runtime.Symbol case198(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",190, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_default_value ::= KW_DEFAULT STRING_LITERAL 
    java_cup.runtime.Symbol case197(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = value;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",190, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_default_value ::= 
    java_cup.runtime.Symbol case196(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",190, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_HLL 
    java_cup.runtime.Symbol case195(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createHll();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case194(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createVarchar(length.intValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case193(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createChar(length.intValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_CHAR 
    java_cup.runtime.Symbol case192(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createChar(1);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_DATETIME 
    java_cup.runtime.Symbol case191(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.DATETIME);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_DATE 
    java_cup.runtime.Symbol case190(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.DATE);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case189(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int precisionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int precisionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Long precision = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int scaleleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int scaleright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long scale = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createDecimal(precision.intValue(), scale.intValue());
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_DECIMAL 
    java_cup.runtime.Symbol case188(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createDecimal(10, 0);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_DOUBLE 
    java_cup.runtime.Symbol case187(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.DOUBLE);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_FLOAT 
    java_cup.runtime.Symbol case186(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.FLOAT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_LARGEINT LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case185(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createType(PrimitiveType.LARGEINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_LARGEINT 
    java_cup.runtime.Symbol case184(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.LARGEINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_BIGINT LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case183(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createType(PrimitiveType.BIGINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_BIGINT 
    java_cup.runtime.Symbol case182(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.BIGINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_INT LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case181(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createType(PrimitiveType.INT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_INT 
    java_cup.runtime.Symbol case180(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.INT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_SMALLINT LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case179(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createType(PrimitiveType.SMALLINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_SMALLINT 
    java_cup.runtime.Symbol case178(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.SMALLINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_TINYINT LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case177(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ColumnType.createType(PrimitiveType.TINYINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type ::= KW_TINYINT 
    java_cup.runtime.Symbol case176(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnType RESULT =null;
		
        RESULT = ColumnType.createType(PrimitiveType.TINYINT);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type",140, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_definition_list ::= column_definition_list COMMA column_definition 
    java_cup.runtime.Symbol case175(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Column> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<Column> list = (ArrayList<Column>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int columnleft = CUP$SqlParser$stack.peek().left;
		int columnright = CUP$SqlParser$stack.peek().right;
		Column column = (Column) CUP$SqlParser$stack.peek().value;
		
    list.add(column);
    RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition_list",139, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_definition_list ::= column_definition 
    java_cup.runtime.Symbol case174(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<Column> RESULT =null;
		int columnleft = CUP$SqlParser$stack.peek().left;
		int columnright = CUP$SqlParser$stack.peek().right;
		Column column = (Column) CUP$SqlParser$stack.peek().value;
		
    RESULT = Lists.newArrayList();
    RESULT.add(column);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition_list",139, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_ext_properties ::= KW_BROKER KW_PROPERTIES LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case173(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ext_properties",137, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_ext_properties ::= 
    java_cup.runtime.Symbol case172(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		
    RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ext_properties",137, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_properties ::= KW_PROPERTIES LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case171(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_properties",136, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_properties ::= 
    java_cup.runtime.Symbol case170(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		
    RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_properties",136, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //key_value_map ::= key_value_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
    java_cup.runtime.Symbol case169(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
    map.put(name, value);
    RESULT = map;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("key_value_map",134, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //key_value_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
    java_cup.runtime.Symbol case168(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT = Maps.newHashMap();
    RESULT.put(name, value);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("key_value_map",134, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_key_value_map ::= LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case167(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_key_value_map",135, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_key_value_map ::= 
    java_cup.runtime.Symbol case166(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;
		
    RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_key_value_map",135, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_engine ::= KW_ENGINE EQUAL ident 
    java_cup.runtime.Symbol case165(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int engineNameleft = CUP$SqlParser$stack.peek().left;
		int engineNameright = CUP$SqlParser$stack.peek().right;
		String engineName = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = engineName; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_engine",192, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_engine ::= 
    java_cup.runtime.Symbol case164(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_engine",192, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_key_desc ::= LPAREN string_list RPAREN 
    java_cup.runtime.Symbol case163(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionKeyDesc RESULT =null;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<String> keys = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionKeyDesc(keys);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_desc",147, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //partition_key_desc ::= KW_MAX_VALUE 
    java_cup.runtime.Symbol case162(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionKeyDesc RESULT =null;
		
        RESULT = PartitionKeyDesc.createMaxKeyDesc();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_desc",147, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES KW_LESS KW_THAN partition_key_desc opt_key_value_map 
    java_cup.runtime.Symbol case161(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SingleRangePartitionDesc RESULT =null;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int partNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int partNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String partName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int descleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int descright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		PartitionKeyDesc desc = (PartitionKeyDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SingleRangePartitionDesc(ifNotExists, partName, desc, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc",148, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //single_range_partition_desc_list ::= single_range_partition_desc 
    java_cup.runtime.Symbol case160(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(desc);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc_list",150, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //single_range_partition_desc_list ::= single_range_partition_desc_list COMMA single_range_partition_desc 
    java_cup.runtime.Symbol case159(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.peek().value;
		
        list.add(desc);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc_list",150, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_single_range_partition_desc_list ::= single_range_partition_desc_list 
    java_cup.runtime.Symbol case158(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.peek().value;
		
		RESULT = list;
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_single_range_partition_desc_list",149, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_single_range_partition_desc_list ::= 
    java_cup.runtime.Symbol case157(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_single_range_partition_desc_list",149, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_keys ::= KW_AGGREGATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case156(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.AGG_KEYS, keys);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",146, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_keys ::= KW_UNIQUE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case155(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.UNIQUE_KEYS, keys);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",146, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case154(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.DUP_KEYS, keys);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",146, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_keys ::= KW_PRIMARY KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case153(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.PRIMARY_KEYS, keys);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",146, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_keys ::= 
    java_cup.runtime.Symbol case152(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",146, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_distribution_number ::= KW_BUCKETS INTEGER_LITERAL 
    java_cup.runtime.Symbol case151(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Integer RESULT =null;
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Long numDistribution = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = numDistribution.intValue();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution_number",145, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_distribution_number ::= 
    java_cup.runtime.Symbol case150(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Integer RESULT =null;
		
        /* If distribution number is null, default distribution number is 10. */
        RESULT = 10;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution_number",145, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_distribution ::= KW_DISTRIBUTED KW_BY KW_RANDOM opt_distribution_number 
    java_cup.runtime.Symbol case149(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Integer numDistribution = (Integer) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RandomDistributionDesc(numDistribution);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",144, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_distribution ::= KW_DISTRIBUTED KW_BY KW_HASH LPAREN ident_list RPAREN opt_distribution_number 
    java_cup.runtime.Symbol case148(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> columns = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Integer numDistribution = (Integer) CUP$SqlParser$stack.peek().value;
		
        RESULT = new HashDistributionDesc(numDistribution, columns);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",144, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_distribution ::= 
    java_cup.runtime.Symbol case147(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",144, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition ::= KW_PARTITION KW_BY KW_RANGE LPAREN ident_list RPAREN LPAREN opt_single_range_partition_desc_list RPAREN 
    java_cup.runtime.Symbol case146(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionDesc RESULT =null;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> columns = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new RangePartitionDesc(columns, list);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition",143, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partition ::= 
    java_cup.runtime.Symbol case145(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionDesc RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition",143, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= KW_HLL_UNION 
    java_cup.runtime.Symbol case144(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		
    RESULT = AggregateType.HLL_UNION;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= KW_REPLACE 
    java_cup.runtime.Symbol case143(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		
    RESULT = AggregateType.REPLACE;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= KW_MIN 
    java_cup.runtime.Symbol case142(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		
    RESULT = AggregateType.MIN;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= KW_MAX 
    java_cup.runtime.Symbol case141(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		
    RESULT = AggregateType.MAX;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= KW_SUM 
    java_cup.runtime.Symbol case140(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		
    RESULT = AggregateType.SUM;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_agg_type ::= 
    java_cup.runtime.Symbol case139(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;
		 RESULT = null; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",142, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //recover_stmt ::= KW_RECOVER KW_PARTITION ident KW_FROM table_name 
    java_cup.runtime.Symbol case138(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int dbTblNameleft = CUP$SqlParser$stack.peek().left;
		int dbTblNameright = CUP$SqlParser$stack.peek().right;
		TableName dbTblName = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RecoverPartitionStmt(dbTblName, partitionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("recover_stmt",11, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //recover_stmt ::= KW_RECOVER KW_TABLE table_name 
    java_cup.runtime.Symbol case137(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbTblNameleft = CUP$SqlParser$stack.peek().left;
		int dbTblNameright = CUP$SqlParser$stack.peek().right;
		TableName dbTblName = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RecoverTableStmt(dbTblName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("recover_stmt",11, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //recover_stmt ::= KW_RECOVER KW_DATABASE ident 
    java_cup.runtime.Symbol case136(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbNameleft = CUP$SqlParser$stack.peek().left;
		int dbNameright = CUP$SqlParser$stack.peek().right;
		String dbName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RecoverDbStmt(dbName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("recover_stmt",11, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_VIEW opt_if_exists table_name 
    java_cup.runtime.Symbol case135(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		TableName name = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropTableStmt(ifExists, name, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_USER STRING_LITERAL 
    java_cup.runtime.Symbol case134(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropUserStmt(user);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_TABLE opt_if_exists table_name 
    java_cup.runtime.Symbol case133(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		TableName name = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropTableStmt(ifExists, name);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_FUNCTION function_name 
    java_cup.runtime.Symbol case132(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int functionNameleft = CUP$SqlParser$stack.peek().left;
		int functionNameright = CUP$SqlParser$stack.peek().right;
		FunctionName functionName = (FunctionName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropFunctionStmt(functionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_CLUSTER opt_if_exists ident 
    java_cup.runtime.Symbol case131(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int clusterleft = CUP$SqlParser$stack.peek().left;
		int clusterright = CUP$SqlParser$stack.peek().right;
		String cluster = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropClusterStmt(ifExists, cluster);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //drop_stmt ::= KW_DROP KW_DATABASE opt_if_exists ident 
    java_cup.runtime.Symbol case130(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropDbStmt(ifExists, db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("drop_stmt",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //revoke_stmt ::= KW_REVOKE KW_ALL KW_ON ident KW_FROM user 
    java_cup.runtime.Symbol case129(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String dbName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RevokeStmt(user, dbName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("revoke_stmt",13, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //grant_stmt ::= KW_GRANT privilege_list KW_ON ident KW_TO user 
    java_cup.runtime.Symbol case128(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int privsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int privsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		List<AccessPrivilege> privs = (List<AccessPrivilege>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int dbNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String dbName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new GrantStmt(user, dbName, privs);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_stmt",12, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_cluster ::= KW_BY ident_or_text 
    java_cup.runtime.Symbol case127(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int clusterleft = CUP$SqlParser$stack.peek().left;
		int clusterright = CUP$SqlParser$stack.peek().right;
		String cluster = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = cluster;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_cluster",159, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_cluster ::= 
    java_cup.runtime.Symbol case126(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_cluster",159, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_broker ::= KW_WITH KW_BROKER ident_or_text LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case125(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      BrokerDesc RESULT =null;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new BrokerDesc(name, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_broker",160, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_broker ::= KW_WITH KW_BROKER ident_or_text 
    java_cup.runtime.Symbol case124(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      BrokerDesc RESULT =null;
		int nameleft = CUP$SqlParser$stack.peek().left;
		int nameright = CUP$SqlParser$stack.peek().right;
		String name = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new BrokerDesc(name, null);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_broker",160, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_broker ::= 
    java_cup.runtime.Symbol case123(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      BrokerDesc RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_broker",160, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_system ::= KW_BY ident_or_text 
    java_cup.runtime.Symbol case122(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int systemleft = CUP$SqlParser$stack.peek().left;
		int systemright = CUP$SqlParser$stack.peek().right;
		String system = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = system;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_system",158, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_system ::= 
    java_cup.runtime.Symbol case121(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_system",158, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_mapping_list ::= KW_SET LPAREN expr_list RPAREN 
    java_cup.runtime.Symbol case120(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<Expr> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<Expr> list = (ArrayList<Expr>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    	RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_mapping_list",164, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_mapping_list ::= 
    java_cup.runtime.Symbol case119(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<Expr> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_mapping_list",164, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_list ::= LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case118(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		int colListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> colList = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = colList;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_list",161, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_list ::= 
    java_cup.runtime.Symbol case117(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_list",161, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_field_term ::= KW_COLUMNS KW_TERMINATED KW_BY STRING_LITERAL 
    java_cup.runtime.Symbol case116(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnSeparator RESULT =null;
		int sepleft = CUP$SqlParser$stack.peek().left;
		int sepright = CUP$SqlParser$stack.peek().right;
		String sep = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnSeparator(sep);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_field_term",165, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_field_term ::= 
    java_cup.runtime.Symbol case115(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnSeparator RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_field_term",165, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_negative ::= KW_NEGATIVE 
    java_cup.runtime.Symbol case114(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_negative",166, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_negative ::= 
    java_cup.runtime.Symbol case113(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_negative",166, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partitions ::= KW_PARTITION LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case112(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		int partitionNamesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionNamesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitionNames = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = partitionNames;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partitions",163, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_partitions ::= 
    java_cup.runtime.Symbol case111(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partitions",163, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //data_desc ::= KW_DATA KW_INFILE LPAREN string_list RPAREN opt_negative KW_INTO KW_TABLE ident opt_partitions opt_field_term opt_col_list opt_col_mapping_list 
    java_cup.runtime.Symbol case110(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DataDescription RESULT =null;
		int filesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).left;
		int filesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).right;
		List<String> files = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).value;
		int isNegleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int isNegright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		Boolean isNeg = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int tableNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tableNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String tableName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int partitionNamesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int partitionNamesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		List<String> partitionNames = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int colSepleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int colSepright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ColumnSeparator colSep = (ColumnSeparator) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int colListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<String> colList = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int colMappingListleft = CUP$SqlParser$stack.peek().left;
		int colMappingListright = CUP$SqlParser$stack.peek().right;
		List<Expr> colMappingList = (List<Expr>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DataDescription(tableName, partitionNames, files, colList, colSep, isNeg, colMappingList);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("data_desc",155, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //data_desc_list ::= data_desc_list COMMA data_desc 
    java_cup.runtime.Symbol case109(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<DataDescription> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<DataDescription> list = (List<DataDescription>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		DataDescription desc = (DataDescription) CUP$SqlParser$stack.peek().value;
		
        list.add(desc);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("data_desc_list",156, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //data_desc_list ::= data_desc 
    java_cup.runtime.Symbol case108(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<DataDescription> RESULT =null;
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		DataDescription desc = (DataDescription) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(desc);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("data_desc_list",156, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //job_label ::= ident DOT ident 
    java_cup.runtime.Symbol case107(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LabelName RESULT =null;
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int labelleft = CUP$SqlParser$stack.peek().left;
		int labelright = CUP$SqlParser$stack.peek().right;
		String label = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new LabelName(db, label);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("job_label",157, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //job_label ::= ident 
    java_cup.runtime.Symbol case106(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      LabelName RESULT =null;
		int labelleft = CUP$SqlParser$stack.peek().left;
		int labelright = CUP$SqlParser$stack.peek().right;
		String label = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new LabelName("", label);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("job_label",157, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //load_stmt ::= KW_LOAD KW_LABEL job_label LPAREN data_desc_list RPAREN opt_broker opt_system opt_properties 
    java_cup.runtime.Symbol case105(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int labelleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int labelright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		LabelName label = (LabelName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int dataDescListleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int dataDescListright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		List<DataDescription> dataDescList = (List<DataDescription>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int brokerleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int brokerright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		BrokerDesc broker = (BrokerDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int systemleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int systemright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String system = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new LoadStmt(label, dataDescList, broker, system, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("load_stmt",5, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //export_stmt ::= KW_EXPORT KW_TABLE base_table_ref KW_TO STRING_LITERAL opt_properties opt_broker 
    java_cup.runtime.Symbol case104(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tblRefleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int tblRefright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		TableRef tblRef = (TableRef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int pathleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int pathright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String path = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int brokerleft = CUP$SqlParser$stack.peek().left;
		int brokerright = CUP$SqlParser$stack.peek().right;
		BrokerDesc broker = (BrokerDesc) CUP$SqlParser$stack.peek().value;
		
        // RESULT = new ExportStmt(tblName, partitions, path, properties, broker);
        RESULT = new ExportStmt(tblRef, path, properties, broker);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("export_stmt",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //help_stmt ::= KW_HELP ident_or_text 
    java_cup.runtime.Symbol case103(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int markleft = CUP$SqlParser$stack.peek().left;
		int markright = CUP$SqlParser$stack.peek().right;
		String mark = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new HelpStmt(mark);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("help_stmt",4, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type_list ::= column_type_list COMMA column_type 
    java_cup.runtime.Symbol case102(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<ColumnType> RESULT =null;
		int typesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int typesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<ColumnType> types = (List<ColumnType>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int typeleft = CUP$SqlParser$stack.peek().left;
		int typeright = CUP$SqlParser$stack.peek().right;
		ColumnType type = (ColumnType) CUP$SqlParser$stack.peek().value;
		
    types.add(type);
    RESULT = types;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type_list",141, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //column_type_list ::= column_type 
    java_cup.runtime.Symbol case101(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<ColumnType> RESULT =null;
		int typeleft = CUP$SqlParser$stack.peek().left;
		int typeright = CUP$SqlParser$stack.peek().right;
		ColumnType type = (ColumnType) CUP$SqlParser$stack.peek().value;
		
    RESULT = Lists.newArrayList();
    RESULT.add(type);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_type_list",141, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //user ::= ident_or_text 
    java_cup.runtime.Symbol case100(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = user;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("user",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_super_user ::= KW_SUPERUSER 
    java_cup.runtime.Symbol case99(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_super_user",167, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_super_user ::= 
    java_cup.runtime.Symbol case98(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_super_user",167, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //grant_user ::= user KW_IDENTIFIED KW_BY KW_PASSWORD STRING_LITERAL 
    java_cup.runtime.Symbol case97(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      UserDesc RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String user = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int passwordleft = CUP$SqlParser$stack.peek().left;
		int passwordright = CUP$SqlParser$stack.peek().right;
		String password = (String) CUP$SqlParser$stack.peek().value;
		
        /* hashed password */
        RESULT = new UserDesc(user, password, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_user",47, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //grant_user ::= user KW_IDENTIFIED KW_BY STRING_LITERAL 
    java_cup.runtime.Symbol case96(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      UserDesc RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String user = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int passwordleft = CUP$SqlParser$stack.peek().left;
		int passwordright = CUP$SqlParser$stack.peek().right;
		String password = (String) CUP$SqlParser$stack.peek().value;
		
        /* plain text password */
        RESULT = new UserDesc(user, password, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_user",47, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //grant_user ::= user 
    java_cup.runtime.Symbol case95(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      UserDesc RESULT =null;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        /* No password */
        RESULT = new UserDesc(user);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("grant_user",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_CLUSTER ident opt_properties KW_IDENTIFIED KW_BY STRING_LITERAL 
    java_cup.runtime.Symbol case94(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int passwordleft = CUP$SqlParser$stack.peek().left;
		int passwordright = CUP$SqlParser$stack.peek().right;
		String password = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateClusterStmt(name, properties, password);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_VIEW opt_if_not_exists table_name opt_col_list KW_AS query_stmt 
    java_cup.runtime.Symbol case93(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int viewNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int viewNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		TableName viewName = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<String> columns = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int view_defleft = CUP$SqlParser$stack.peek().left;
		int view_defright = CUP$SqlParser$stack.peek().right;
		QueryStmt view_def = (QueryStmt) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateViewStmt(ifNotExists, viewName, columns, view_def);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_USER grant_user opt_super_user 
    java_cup.runtime.Symbol case92(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int userleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int userright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		UserDesc user = (UserDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int isSuperuserleft = CUP$SqlParser$stack.peek().left;
		int isSuperuserright = CUP$SqlParser$stack.peek().right;
		Boolean isSuperuser = (Boolean) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateUserStmt(user, isSuperuser);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list RPAREN opt_engine opt_keys opt_partition opt_distribution opt_properties opt_ext_properties 
    java_cup.runtime.Symbol case91(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int isExternalleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).left;
		int isExternalright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).right;
		Boolean isExternal = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).value;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).right;
		TableName name = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).value;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		ArrayList<Column> columns = (ArrayList<Column>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int engineNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int engineNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String engineName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		KeysDesc keys = (KeysDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int partitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int partitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		PartitionDesc partition = (PartitionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int distributionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int distributionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		DistributionDesc distribution = (DistributionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tblPropertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblPropertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> tblProperties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int extPropertiesleft = CUP$SqlParser$stack.peek().left;
		int extPropertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> extProperties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, engineName, keys, partition, distribution, tblProperties, extProperties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_AGGREGATE KW_FUNCTION function_name LPAREN column_type_list RPAREN column_type KW_SONAME STRING_LITERAL opt_properties 
    java_cup.runtime.Symbol case90(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int functionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int functionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		FunctionName functionName = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int argumentsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int argumentsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		List<ColumnType> arguments = (List<ColumnType>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int retrunTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int retrunTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ColumnType retrunType = (ColumnType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int soPathleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int soPathright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String soPath = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateFunctionStmt(functionName, arguments, retrunType, soPath, properties, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-10), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_FUNCTION function_name LPAREN column_type_list RPAREN column_type KW_SONAME STRING_LITERAL opt_properties 
    java_cup.runtime.Symbol case89(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int functionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int functionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		FunctionName functionName = (FunctionName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int argumentsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int argumentsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		List<ColumnType> arguments = (List<ColumnType>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int retrunTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int retrunTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ColumnType retrunType = (ColumnType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int soPathleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int soPathright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String soPath = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateFunctionStmt(functionName, arguments, retrunType, soPath, properties, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //create_stmt ::= KW_CREATE KW_DATABASE opt_if_not_exists ident 
    java_cup.runtime.Symbol case88(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateDbStmt(ifNotExists, db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //sync_stmt ::= KW_SYNC 
    java_cup.runtime.Symbol case87(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new SyncStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("sync_stmt",16, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_user_clause ::= KW_DELETE KW_WHITELIST string_list 
    java_cup.runtime.Symbol case86(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
		RESULT = new AlterUserClause(AlterUserType.DELETE_USER_WHITELIST, hostPorts);
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_user_clause",176, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_user_clause ::= KW_ADD KW_WHITELIST string_list 
    java_cup.runtime.Symbol case85(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
		RESULT = new AlterUserClause(AlterUserType.ADD_USER_WHITELIST, hostPorts);
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_user_clause",176, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_cluster_clause ::= KW_MODIFY opt_properties 
    java_cup.runtime.Symbol case84(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterClusterClause(AlterClusterType.ALTER_CLUSTER_PROPERTIES, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_cluster_clause",174, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_SET ident equal STRING_LITERAL 
    java_cup.runtime.Symbol case83(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int urlleft = CUP$SqlParser$stack.peek().left;
		int urlright = CUP$SqlParser$stack.peek().right;
		String url = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterLoadErrorUrlClause(url);
        // RESULT = new Object();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROP KW_ALL KW_BROKER ident_or_text 
    java_cup.runtime.Symbol case82(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int brokerNameleft = CUP$SqlParser$stack.peek().left;
		int brokerNameright = CUP$SqlParser$stack.peek().right;
		String brokerName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = ModifyBrokerClause.createDropAllBrokerClause(brokerName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROP KW_BROKER ident_or_text string_list 
    java_cup.runtime.Symbol case81(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int brokerNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int brokerNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String brokerName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = ModifyBrokerClause.createDropBrokerClause(brokerName, hostPorts);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_BROKER ident_or_text string_list 
    java_cup.runtime.Symbol case80(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int brokerNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int brokerNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String brokerName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = ModifyBrokerClause.createAddBrokerClause(brokerName, hostPorts);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROP KW_FOLLOWER STRING_LITERAL 
    java_cup.runtime.Symbol case79(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortleft = CUP$SqlParser$stack.peek().left;
		int hostPortright = CUP$SqlParser$stack.peek().right;
		String hostPort = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropFollowerClause(hostPort);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_FOLLOWER STRING_LITERAL 
    java_cup.runtime.Symbol case78(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortleft = CUP$SqlParser$stack.peek().left;
		int hostPortright = CUP$SqlParser$stack.peek().right;
		String hostPort = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddFollowerClause(hostPort);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROP KW_OBSERVER STRING_LITERAL 
    java_cup.runtime.Symbol case77(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortleft = CUP$SqlParser$stack.peek().left;
		int hostPortright = CUP$SqlParser$stack.peek().right;
		String hostPort = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropObserverClause(hostPort);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_OBSERVER STRING_LITERAL 
    java_cup.runtime.Symbol case76(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortleft = CUP$SqlParser$stack.peek().left;
		int hostPortright = CUP$SqlParser$stack.peek().right;
		String hostPort = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddObserverClause(hostPort);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DECOMMISSION KW_BACKEND string_list 
    java_cup.runtime.Symbol case75(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DecommissionBackendClause(hostPorts);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROPP KW_BACKEND string_list 
    java_cup.runtime.Symbol case74(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropBackendClause(hostPorts, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_DROP KW_BACKEND string_list 
    java_cup.runtime.Symbol case73(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropBackendClause(hostPorts, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_BACKEND KW_TO ident string_list 
    java_cup.runtime.Symbol case72(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int clusterNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int clusterNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String clusterName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		   
        RESULT = new AddBackendClause(hostPorts, clusterName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_FREE KW_BACKEND string_list 
    java_cup.runtime.Symbol case71(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddBackendClause(hostPorts, true);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_system_clause ::= KW_ADD KW_BACKEND string_list 
    java_cup.runtime.Symbol case70(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int hostPortsleft = CUP$SqlParser$stack.peek().left;
		int hostPortsright = CUP$SqlParser$stack.peek().right;
		List<String> hostPorts = (List<String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddBackendClause(hostPorts, false);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_system_clause",173, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_RENAME KW_COLUMN ident ident 
    java_cup.runtime.Symbol case69(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String colName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newColNameleft = CUP$SqlParser$stack.peek().left;
		int newColNameright = CUP$SqlParser$stack.peek().right;
		String newColName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnRenameClause(colName, newColName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_RENAME KW_PARTITION ident ident 
    java_cup.runtime.Symbol case68(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newPartitionNameleft = CUP$SqlParser$stack.peek().left;
		int newPartitionNameright = CUP$SqlParser$stack.peek().right;
		String newPartitionName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionRenameClause(partitionName, newPartitionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_RENAME KW_ROLLUP ident ident 
    java_cup.runtime.Symbol case67(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int rollupNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollupName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newRollupNameleft = CUP$SqlParser$stack.peek().left;
		int newRollupNameright = CUP$SqlParser$stack.peek().right;
		String newRollupName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RollupRenameClause(rollupName, newRollupName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_RENAME ident 
    java_cup.runtime.Symbol case66(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int newTableNameleft = CUP$SqlParser$stack.peek().left;
		int newTableNameright = CUP$SqlParser$stack.peek().right;
		String newTableName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new TableRenameClause(newTableName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_MODIFY KW_PARTITION ident KW_SET LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case65(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ModifyPartitionClause(partitionName, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_DROP KW_PARTITION opt_if_exists ident 
    java_cup.runtime.Symbol case64(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int partitionNameleft = CUP$SqlParser$stack.peek().left;
		int partitionNameright = CUP$SqlParser$stack.peek().right;
		String partitionName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropPartitionClause(ifExists, partitionName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_ADD single_range_partition_desc opt_distribution opt_properties 
    java_cup.runtime.Symbol case63(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int descleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int descright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int distributionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int distributionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		DistributionDesc distribution = (DistributionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddPartitionClause(desc, distribution, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= opt_properties 
    java_cup.runtime.Symbol case62(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ModifyTablePropertiesClause(properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_ORDER KW_BY LPAREN ident_list RPAREN opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case61(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ReorderColumnsClause(cols, rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_MODIFY KW_COLUMN column_definition opt_col_pos opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case60(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Column col = (Column) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int col_posleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int col_posright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ColumnPosition col_pos = (ColumnPosition) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ModifyColumnClause(col, col_pos, rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_DROP KW_ROLLUP ident opt_properties 
    java_cup.runtime.Symbol case59(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropRollupClause(rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_DROP KW_COLUMN ident opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case58(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String col = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropColumnClause(col, rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_ADD KW_ROLLUP ident LPAREN ident_list RPAREN opt_dup_keys opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case57(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int rollupNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int rollupNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		String rollupName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int dup_keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dup_keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<String> dup_keys = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int baseRollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int baseRollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String baseRollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddRollupClause(rollupName, cols, dup_keys, baseRollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_ADD KW_COLUMN LPAREN column_definition_list RPAREN opt_to_rollup opt_properties 
    java_cup.runtime.Symbol case56(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<Column> cols = (ArrayList<Column>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddColumnsClause(cols, rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause ::= KW_ADD KW_COLUMN column_definition opt_col_pos opt_to_rollup opt_properties 
    java_cup.runtime.Symbol case55(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Column col = (Column) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int col_posleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int col_posright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ColumnPosition col_pos = (ColumnPosition) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddColumnClause(col, col_pos, rollup, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",175, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_dup_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case54(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = cols;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_dup_keys",162, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_dup_keys ::= 
    java_cup.runtime.Symbol case53(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_dup_keys",162, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_pos ::= KW_AFTER ident 
    java_cup.runtime.Symbol case52(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;
		int colleft = CUP$SqlParser$stack.peek().left;
		int colright = CUP$SqlParser$stack.peek().right;
		String col = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnPosition(col);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",172, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_pos ::= KW_FIRST 
    java_cup.runtime.Symbol case51(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;
		
        RESULT = ColumnPosition.FIRST;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",172, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_col_pos ::= 
    java_cup.runtime.Symbol case50(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",172, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_from_rollup ::= KW_FROM ident 
    java_cup.runtime.Symbol case49(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_from_rollup",170, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_from_rollup ::= 
    java_cup.runtime.Symbol case48(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_from_rollup",170, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_to_rollup ::= KW_IN ident 
    java_cup.runtime.Symbol case47(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",171, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_to_rollup ::= KW_TO ident 
    java_cup.runtime.Symbol case46(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",171, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_to_rollup ::= 
    java_cup.runtime.Symbol case45(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		
        RESULT = null;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",171, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause_list ::= alter_table_clause_list COMMA alter_table_clause 
    java_cup.runtime.Symbol case44(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AlterClause> list = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        list.add(clause);
        RESULT = list;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause_list",177, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_table_clause_list ::= alter_table_clause 
    java_cup.runtime.Symbol case43(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(clause);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause_list",177, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_user ::= KW_FOR user 
    java_cup.runtime.Symbol case42(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;
		int userleft = CUP$SqlParser$stack.peek().left;
		int userright = CUP$SqlParser$stack.peek().right;
		String user = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = user;

    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_user",46, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //opt_user ::= 
    java_cup.runtime.Symbol case41(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_user",46, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_USER ident alter_user_clause 
    java_cup.runtime.Symbol case40(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int userNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int userNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String userName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterUserStmt(userName, clause);
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_DATABASE ident KW_RENAME ident 
    java_cup.runtime.Symbol case39(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String dbName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int newDbNameleft = CUP$SqlParser$stack.peek().left;
		int newDbNameright = CUP$SqlParser$stack.peek().right;
		String newDbName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterDatabaseRename(dbName, newDbName);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_DATABASE ident KW_SET KW_DATA KW_QUOTA INTEGER_LITERAL 
    java_cup.runtime.Symbol case38(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int dbNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int dbNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String dbName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int quotaleft = CUP$SqlParser$stack.peek().left;
		int quotaright = CUP$SqlParser$stack.peek().right;
		Long quota = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterDatabaseQuotaStmt(dbName, quota);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_CLUSTER ident opt_properties 
    java_cup.runtime.Symbol case37(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterClusterStmt(name, properties);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_SYSTEM alter_system_clause 
    java_cup.runtime.Symbol case36(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterSystemStmt(clause);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //alter_stmt ::= KW_ALTER KW_TABLE table_name alter_table_clause_list 
    java_cup.runtime.Symbol case35(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableName tbl = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int clausesleft = CUP$SqlParser$stack.peek().left;
		int clausesright = CUP$SqlParser$stack.peek().right;
		List<AlterClause> clauses = (List<AlterClause>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterTableStmt(tbl, clauses);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //migrate_stmt ::= KW_MIGRATE KW_DATABASE cluster_name des_cluster_name 
    java_cup.runtime.Symbol case34(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int src_nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int src_nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ClusterName src_name = (ClusterName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int des_nameleft = CUP$SqlParser$stack.peek().left;
		int des_nameright = CUP$SqlParser$stack.peek().right;
		ClusterName des_name = (ClusterName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new MigrateDbStmt(src_name, des_name);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("migrate_stmt",21, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //link_stmt ::= KW_LINK KW_DATABASE cluster_name des_cluster_name 
    java_cup.runtime.Symbol case33(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int src_nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int src_nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ClusterName src_name = (ClusterName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int des_nameleft = CUP$SqlParser$stack.peek().left;
		int des_nameright = CUP$SqlParser$stack.peek().right;
		ClusterName des_name = (ClusterName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new LinkDbStmt(src_name, des_name);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("link_stmt",20, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //des_cluster_name ::= ident DOT ident 
    java_cup.runtime.Symbol case32(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ClusterName RESULT =null;
		int clusterleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int clusterright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String cluster = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		   
        RESULT = new ClusterName(cluster, db); 
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("des_cluster_name",74, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //des_cluster_name ::= ident 
    java_cup.runtime.Symbol case31(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ClusterName RESULT =null;
		int clusterleft = CUP$SqlParser$stack.peek().left;
		int clusterright = CUP$SqlParser$stack.peek().right;
		String cluster = (String) CUP$SqlParser$stack.peek().value;
		   
        RESULT = new ClusterName(cluster, ""); 
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("des_cluster_name",74, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cluster_name ::= ident DOT ident 
    java_cup.runtime.Symbol case30(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ClusterName RESULT =null;
		int clusterleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int clusterright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String cluster = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int dbleft = CUP$SqlParser$stack.peek().left;
		int dbright = CUP$SqlParser$stack.peek().right;
		String db = (String) CUP$SqlParser$stack.peek().value;
		   
        RESULT = new ClusterName(cluster, db);
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cluster_name",73, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //cluster_name ::= ident 
    java_cup.runtime.Symbol case29(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ClusterName RESULT =null;
		int clusterleft = CUP$SqlParser$stack.peek().left;
		int clusterright = CUP$SqlParser$stack.peek().right;
		String cluster = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ClusterName(cluster, "");
	
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cluster_name",73, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= 
    java_cup.runtime.Symbol case28(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		
        RESULT = new EmptyStmt();
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= export_stmt 
    java_cup.runtime.Symbol case27(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= unsupported_stmt 
    java_cup.runtime.Symbol case26(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= restore_stmt 
    java_cup.runtime.Symbol case25(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		RestoreStmt stmt = (RestoreStmt) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= backup_stmt 
    java_cup.runtime.Symbol case24(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		BackupStmt stmt = (BackupStmt) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= insert_stmt 
    java_cup.runtime.Symbol case23(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		InsertStmt stmt = (InsertStmt) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= sync_stmt 
    java_cup.runtime.Symbol case22(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= delete_stmt 
    java_cup.runtime.Symbol case21(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= cancel_stmt 
    java_cup.runtime.Symbol case20(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= load_stmt 
    java_cup.runtime.Symbol case19(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= help_stmt 
    java_cup.runtime.Symbol case18(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= revoke_stmt 
    java_cup.runtime.Symbol case17(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int revokeleft = CUP$SqlParser$stack.peek().left;
		int revokeright = CUP$SqlParser$stack.peek().right;
		StatementBase revoke = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = revoke; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= grant_stmt 
    java_cup.runtime.Symbol case16(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int grantleft = CUP$SqlParser$stack.peek().left;
		int grantright = CUP$SqlParser$stack.peek().right;
		StatementBase grant = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = grant; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= show_stmt 
    java_cup.runtime.Symbol case15(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int showleft = CUP$SqlParser$stack.peek().left;
		int showright = CUP$SqlParser$stack.peek().right;
		StatementBase show = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = show; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= describe_stmt 
    java_cup.runtime.Symbol case14(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int describeleft = CUP$SqlParser$stack.peek().left;
		int describeright = CUP$SqlParser$stack.peek().right;
		StatementBase describe = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = describe; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= kill_stmt 
    java_cup.runtime.Symbol case13(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int killleft = CUP$SqlParser$stack.peek().left;
		int killright = CUP$SqlParser$stack.peek().right;
		StatementBase kill = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = kill; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= set_stmt 
    java_cup.runtime.Symbol case12(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int setleft = CUP$SqlParser$stack.peek().left;
		int setright = CUP$SqlParser$stack.peek().right;
		StatementBase set = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = set; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= use_stmt 
    java_cup.runtime.Symbol case11(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int useleft = CUP$SqlParser$stack.peek().left;
		int useright = CUP$SqlParser$stack.peek().right;
		StatementBase use = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = use; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= recover_stmt 
    java_cup.runtime.Symbol case10(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= drop_stmt 
    java_cup.runtime.Symbol case9(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= query_stmt 
    java_cup.runtime.Symbol case8(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		QueryStmt query = (QueryStmt) CUP$SqlParser$stack.peek().value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= enter_stmt 
    java_cup.runtime.Symbol case7(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int enterleft = CUP$SqlParser$stack.peek().left;
		int enterright = CUP$SqlParser$stack.peek().right;
		StatementBase enter = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = enter; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= migrate_stmt 
    java_cup.runtime.Symbol case6(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		StatementBase query = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= link_stmt 
    java_cup.runtime.Symbol case5(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		StatementBase query = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= create_stmt 
    java_cup.runtime.Symbol case4(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		StatementBase query = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = query; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //stmt ::= alter_stmt 
    java_cup.runtime.Symbol case3(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //query ::= stmt SEMICOLON 
    java_cup.runtime.Symbol case2(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int stmtright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = stmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query",0, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //query ::= stmt 
    java_cup.runtime.Symbol case1(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		
        RESULT = stmt;
    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("query",0, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
    //$START ::= query EOF 
    java_cup.runtime.Symbol case0(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;
		int start_valleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int start_valright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		StatementBase start_val = (StatementBase) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT);
      return CUP$SqlParser$result;

    }
}

